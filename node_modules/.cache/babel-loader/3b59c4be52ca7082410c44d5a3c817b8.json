{"ast":null,"code":"import { drawLine, drawTriangle, getDistance, getDistances, getStyleFromRgb, rangeColorToRgb } from \"tsparticles-engine\";\nexport function drawLinkLine(context, width, begin, end, maxDistance, canvasSize, warp, backgroundMask, composite, colorLine, opacity, shadow) {\n  var drawn = false;\n\n  if (getDistance(begin, end) <= maxDistance) {\n    drawLine(context, begin, end);\n    drawn = true;\n  } else if (warp) {\n    var pi1;\n    var pi2;\n    var endNE = {\n      x: end.x - canvasSize.width,\n      y: end.y\n    };\n    var d1 = getDistances(begin, endNE);\n\n    if (d1.distance <= maxDistance) {\n      var yi = begin.y - d1.dy / d1.dx * begin.x;\n      pi1 = {\n        x: 0,\n        y: yi\n      };\n      pi2 = {\n        x: canvasSize.width,\n        y: yi\n      };\n    } else {\n      var endSW = {\n        x: end.x,\n        y: end.y - canvasSize.height\n      };\n      var d2 = getDistances(begin, endSW);\n\n      if (d2.distance <= maxDistance) {\n        var _yi = begin.y - d2.dy / d2.dx * begin.x;\n\n        var xi = -_yi / (d2.dy / d2.dx);\n        pi1 = {\n          x: xi,\n          y: 0\n        };\n        pi2 = {\n          x: xi,\n          y: canvasSize.height\n        };\n      } else {\n        var endSE = {\n          x: end.x - canvasSize.width,\n          y: end.y - canvasSize.height\n        };\n        var d3 = getDistances(begin, endSE);\n\n        if (d3.distance <= maxDistance) {\n          var _yi2 = begin.y - d3.dy / d3.dx * begin.x;\n\n          var _xi = -_yi2 / (d3.dy / d3.dx);\n\n          pi1 = {\n            x: _xi,\n            y: _yi2\n          };\n          pi2 = {\n            x: pi1.x + canvasSize.width,\n            y: pi1.y + canvasSize.height\n          };\n        }\n      }\n    }\n\n    if (pi1 && pi2) {\n      drawLine(context, begin, pi1);\n      drawLine(context, end, pi2);\n      drawn = true;\n    }\n  }\n\n  if (!drawn) {\n    return;\n  }\n\n  context.lineWidth = width;\n\n  if (backgroundMask) {\n    context.globalCompositeOperation = composite;\n  }\n\n  context.strokeStyle = getStyleFromRgb(colorLine, opacity);\n\n  if (shadow.enable) {\n    var shadowColor = rangeColorToRgb(shadow.color);\n\n    if (shadowColor) {\n      context.shadowBlur = shadow.blur;\n      context.shadowColor = getStyleFromRgb(shadowColor);\n    }\n  }\n\n  context.stroke();\n}\nexport function drawLinkTriangle(context, pos1, pos2, pos3, backgroundMask, composite, colorTriangle, opacityTriangle) {\n  drawTriangle(context, pos1, pos2, pos3);\n\n  if (backgroundMask) {\n    context.globalCompositeOperation = composite;\n  }\n\n  context.fillStyle = getStyleFromRgb(colorTriangle, opacityTriangle);\n  context.fill();\n}","map":{"version":3,"sources":["/Users/torea/Desktop/freelanceProject2/open-react-template/node_modules/tsparticles-interaction-particles-links/esm/Utils.js"],"names":["drawLine","drawTriangle","getDistance","getDistances","getStyleFromRgb","rangeColorToRgb","drawLinkLine","context","width","begin","end","maxDistance","canvasSize","warp","backgroundMask","composite","colorLine","opacity","shadow","drawn","pi1","pi2","endNE","x","y","d1","distance","yi","dy","dx","endSW","height","d2","xi","endSE","d3","lineWidth","globalCompositeOperation","strokeStyle","enable","shadowColor","color","shadowBlur","blur","stroke","drawLinkTriangle","pos1","pos2","pos3","colorTriangle","opacityTriangle","fillStyle","fill"],"mappings":"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","sourcesContent":["import { drawLine, drawTriangle, getDistance, getDistances, getStyleFromRgb, rangeColorToRgb, } from \"tsparticles-engine\";\nexport function drawLinkLine(context, width, begin, end, maxDistance, canvasSize, warp, backgroundMask, composite, colorLine, opacity, shadow) {\n    let drawn = false;\n    if (getDistance(begin, end) <= maxDistance) {\n        drawLine(context, begin, end);\n        drawn = true;\n    }\n    else if (warp) {\n        let pi1;\n        let pi2;\n        const endNE = {\n            x: end.x - canvasSize.width,\n            y: end.y,\n        };\n        const d1 = getDistances(begin, endNE);\n        if (d1.distance <= maxDistance) {\n            const yi = begin.y - (d1.dy / d1.dx) * begin.x;\n            pi1 = { x: 0, y: yi };\n            pi2 = { x: canvasSize.width, y: yi };\n        }\n        else {\n            const endSW = {\n                x: end.x,\n                y: end.y - canvasSize.height,\n            };\n            const d2 = getDistances(begin, endSW);\n            if (d2.distance <= maxDistance) {\n                const yi = begin.y - (d2.dy / d2.dx) * begin.x;\n                const xi = -yi / (d2.dy / d2.dx);\n                pi1 = { x: xi, y: 0 };\n                pi2 = { x: xi, y: canvasSize.height };\n            }\n            else {\n                const endSE = {\n                    x: end.x - canvasSize.width,\n                    y: end.y - canvasSize.height,\n                };\n                const d3 = getDistances(begin, endSE);\n                if (d3.distance <= maxDistance) {\n                    const yi = begin.y - (d3.dy / d3.dx) * begin.x;\n                    const xi = -yi / (d3.dy / d3.dx);\n                    pi1 = { x: xi, y: yi };\n                    pi2 = { x: pi1.x + canvasSize.width, y: pi1.y + canvasSize.height };\n                }\n            }\n        }\n        if (pi1 && pi2) {\n            drawLine(context, begin, pi1);\n            drawLine(context, end, pi2);\n            drawn = true;\n        }\n    }\n    if (!drawn) {\n        return;\n    }\n    context.lineWidth = width;\n    if (backgroundMask) {\n        context.globalCompositeOperation = composite;\n    }\n    context.strokeStyle = getStyleFromRgb(colorLine, opacity);\n    if (shadow.enable) {\n        const shadowColor = rangeColorToRgb(shadow.color);\n        if (shadowColor) {\n            context.shadowBlur = shadow.blur;\n            context.shadowColor = getStyleFromRgb(shadowColor);\n        }\n    }\n    context.stroke();\n}\nexport function drawLinkTriangle(context, pos1, pos2, pos3, backgroundMask, composite, colorTriangle, opacityTriangle) {\n    drawTriangle(context, pos1, pos2, pos3);\n    if (backgroundMask) {\n        context.globalCompositeOperation = composite;\n    }\n    context.fillStyle = getStyleFromRgb(colorTriangle, opacityTriangle);\n    context.fill();\n}\n"]},"metadata":{},"sourceType":"module"}