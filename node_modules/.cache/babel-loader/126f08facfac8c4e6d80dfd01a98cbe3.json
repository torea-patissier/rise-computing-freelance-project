{"ast":null,"code":"export class Vector3d {\n  constructor(xOrCoords, y, z) {\n    if (typeof xOrCoords !== \"number\" && xOrCoords) {\n      this.x = xOrCoords.x;\n      this.y = xOrCoords.y;\n      const coords3d = xOrCoords;\n      this.z = coords3d.z ? coords3d.z : 0;\n    } else if (xOrCoords !== undefined && y !== undefined) {\n      this.x = xOrCoords;\n      this.y = y;\n      this.z = z !== null && z !== void 0 ? z : 0;\n    } else {\n      throw new Error(\"tsParticles - Vector3d not initialized correctly\");\n    }\n  }\n\n  static get origin() {\n    return Vector3d.create(0, 0, 0);\n  }\n\n  get angle() {\n    return Math.atan2(this.y, this.x);\n  }\n\n  set angle(angle) {\n    this.updateFromAngle(angle, this.length);\n  }\n\n  get length() {\n    return Math.sqrt(this.getLengthSq());\n  }\n\n  set length(length) {\n    this.updateFromAngle(this.angle, length);\n  }\n\n  static clone(source) {\n    return Vector3d.create(source.x, source.y, source.z);\n  }\n\n  static create(x, y, z) {\n    return new Vector3d(x, y, z);\n  }\n\n  add(v) {\n    return Vector3d.create(this.x + v.x, this.y + v.y, this.z + v.z);\n  }\n\n  addTo(v) {\n    this.x += v.x;\n    this.y += v.y;\n    this.z += v.z;\n  }\n\n  copy() {\n    return Vector3d.clone(this);\n  }\n\n  distanceTo(v) {\n    return this.sub(v).length;\n  }\n\n  distanceToSq(v) {\n    return this.sub(v).getLengthSq();\n  }\n\n  div(n) {\n    return Vector3d.create(this.x / n, this.y / n, this.z / n);\n  }\n\n  divTo(n) {\n    this.x /= n;\n    this.y /= n;\n    this.z /= n;\n  }\n\n  getLengthSq() {\n    return this.x ** 2 + this.y ** 2;\n  }\n\n  mult(n) {\n    return Vector3d.create(this.x * n, this.y * n, this.z * n);\n  }\n\n  multTo(n) {\n    this.x *= n;\n    this.y *= n;\n    this.z *= n;\n  }\n\n  rotate(angle) {\n    return Vector3d.create(this.x * Math.cos(angle) - this.y * Math.sin(angle), this.x * Math.sin(angle) + this.y * Math.cos(angle), 0);\n  }\n\n  setTo(c) {\n    this.x = c.x;\n    this.y = c.y;\n    const v3d = c;\n    this.z = v3d.z ? v3d.z : 0;\n  }\n\n  sub(v) {\n    return Vector3d.create(this.x - v.x, this.y - v.y, this.z - v.z);\n  }\n\n  subFrom(v) {\n    this.x -= v.x;\n    this.y -= v.y;\n    this.z -= v.z;\n  }\n\n  updateFromAngle(angle, length) {\n    this.x = Math.cos(angle) * length;\n    this.y = Math.sin(angle) * length;\n  }\n\n}","map":{"version":3,"sources":["/Users/torea/Desktop/freelanceProject2/open-react-template/node_modules/tsparticles-engine/esm/Core/Utils/Vector3d.js"],"names":["Vector3d","constructor","xOrCoords","y","z","x","coords3d","undefined","Error","origin","create","angle","Math","atan2","updateFromAngle","length","sqrt","getLengthSq","clone","source","add","v","addTo","copy","distanceTo","sub","distanceToSq","div","n","divTo","mult","multTo","rotate","cos","sin","setTo","c","v3d","subFrom"],"mappings":"AAAA,OAAO,MAAMA,QAAN,CAAe;AAClBC,EAAAA,WAAW,CAACC,SAAD,EAAYC,CAAZ,EAAeC,CAAf,EAAkB;AACzB,QAAI,OAAOF,SAAP,KAAqB,QAArB,IAAiCA,SAArC,EAAgD;AAC5C,WAAKG,CAAL,GAASH,SAAS,CAACG,CAAnB;AACA,WAAKF,CAAL,GAASD,SAAS,CAACC,CAAnB;AACA,YAAMG,QAAQ,GAAGJ,SAAjB;AACA,WAAKE,CAAL,GAASE,QAAQ,CAACF,CAAT,GAAaE,QAAQ,CAACF,CAAtB,GAA0B,CAAnC;AACH,KALD,MAMK,IAAIF,SAAS,KAAKK,SAAd,IAA2BJ,CAAC,KAAKI,SAArC,EAAgD;AACjD,WAAKF,CAAL,GAASH,SAAT;AACA,WAAKC,CAAL,GAASA,CAAT;AACA,WAAKC,CAAL,GAASA,CAAC,KAAK,IAAN,IAAcA,CAAC,KAAK,KAAK,CAAzB,GAA6BA,CAA7B,GAAiC,CAA1C;AACH,KAJI,MAKA;AACD,YAAM,IAAII,KAAJ,CAAU,kDAAV,CAAN;AACH;AACJ;;AACD,aAAWC,MAAX,GAAoB;AAChB,WAAOT,QAAQ,CAACU,MAAT,CAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,CAAP;AACH;;AACD,MAAIC,KAAJ,GAAY;AACR,WAAOC,IAAI,CAACC,KAAL,CAAW,KAAKV,CAAhB,EAAmB,KAAKE,CAAxB,CAAP;AACH;;AACD,MAAIM,KAAJ,CAAUA,KAAV,EAAiB;AACb,SAAKG,eAAL,CAAqBH,KAArB,EAA4B,KAAKI,MAAjC;AACH;;AACD,MAAIA,MAAJ,GAAa;AACT,WAAOH,IAAI,CAACI,IAAL,CAAU,KAAKC,WAAL,EAAV,CAAP;AACH;;AACD,MAAIF,MAAJ,CAAWA,MAAX,EAAmB;AACf,SAAKD,eAAL,CAAqB,KAAKH,KAA1B,EAAiCI,MAAjC;AACH;;AACD,SAAOG,KAAP,CAAaC,MAAb,EAAqB;AACjB,WAAOnB,QAAQ,CAACU,MAAT,CAAgBS,MAAM,CAACd,CAAvB,EAA0Bc,MAAM,CAAChB,CAAjC,EAAoCgB,MAAM,CAACf,CAA3C,CAAP;AACH;;AACD,SAAOM,MAAP,CAAcL,CAAd,EAAiBF,CAAjB,EAAoBC,CAApB,EAAuB;AACnB,WAAO,IAAIJ,QAAJ,CAAaK,CAAb,EAAgBF,CAAhB,EAAmBC,CAAnB,CAAP;AACH;;AACDgB,EAAAA,GAAG,CAACC,CAAD,EAAI;AACH,WAAOrB,QAAQ,CAACU,MAAT,CAAgB,KAAKL,CAAL,GAASgB,CAAC,CAAChB,CAA3B,EAA8B,KAAKF,CAAL,GAASkB,CAAC,CAAClB,CAAzC,EAA4C,KAAKC,CAAL,GAASiB,CAAC,CAACjB,CAAvD,CAAP;AACH;;AACDkB,EAAAA,KAAK,CAACD,CAAD,EAAI;AACL,SAAKhB,CAAL,IAAUgB,CAAC,CAAChB,CAAZ;AACA,SAAKF,CAAL,IAAUkB,CAAC,CAAClB,CAAZ;AACA,SAAKC,CAAL,IAAUiB,CAAC,CAACjB,CAAZ;AACH;;AACDmB,EAAAA,IAAI,GAAG;AACH,WAAOvB,QAAQ,CAACkB,KAAT,CAAe,IAAf,CAAP;AACH;;AACDM,EAAAA,UAAU,CAACH,CAAD,EAAI;AACV,WAAO,KAAKI,GAAL,CAASJ,CAAT,EAAYN,MAAnB;AACH;;AACDW,EAAAA,YAAY,CAACL,CAAD,EAAI;AACZ,WAAO,KAAKI,GAAL,CAASJ,CAAT,EAAYJ,WAAZ,EAAP;AACH;;AACDU,EAAAA,GAAG,CAACC,CAAD,EAAI;AACH,WAAO5B,QAAQ,CAACU,MAAT,CAAgB,KAAKL,CAAL,GAASuB,CAAzB,EAA4B,KAAKzB,CAAL,GAASyB,CAArC,EAAwC,KAAKxB,CAAL,GAASwB,CAAjD,CAAP;AACH;;AACDC,EAAAA,KAAK,CAACD,CAAD,EAAI;AACL,SAAKvB,CAAL,IAAUuB,CAAV;AACA,SAAKzB,CAAL,IAAUyB,CAAV;AACA,SAAKxB,CAAL,IAAUwB,CAAV;AACH;;AACDX,EAAAA,WAAW,GAAG;AACV,WAAO,KAAKZ,CAAL,IAAU,CAAV,GAAc,KAAKF,CAAL,IAAU,CAA/B;AACH;;AACD2B,EAAAA,IAAI,CAACF,CAAD,EAAI;AACJ,WAAO5B,QAAQ,CAACU,MAAT,CAAgB,KAAKL,CAAL,GAASuB,CAAzB,EAA4B,KAAKzB,CAAL,GAASyB,CAArC,EAAwC,KAAKxB,CAAL,GAASwB,CAAjD,CAAP;AACH;;AACDG,EAAAA,MAAM,CAACH,CAAD,EAAI;AACN,SAAKvB,CAAL,IAAUuB,CAAV;AACA,SAAKzB,CAAL,IAAUyB,CAAV;AACA,SAAKxB,CAAL,IAAUwB,CAAV;AACH;;AACDI,EAAAA,MAAM,CAACrB,KAAD,EAAQ;AACV,WAAOX,QAAQ,CAACU,MAAT,CAAgB,KAAKL,CAAL,GAASO,IAAI,CAACqB,GAAL,CAAStB,KAAT,CAAT,GAA2B,KAAKR,CAAL,GAASS,IAAI,CAACsB,GAAL,CAASvB,KAAT,CAApD,EAAqE,KAAKN,CAAL,GAASO,IAAI,CAACsB,GAAL,CAASvB,KAAT,CAAT,GAA2B,KAAKR,CAAL,GAASS,IAAI,CAACqB,GAAL,CAAStB,KAAT,CAAzG,EAA0H,CAA1H,CAAP;AACH;;AACDwB,EAAAA,KAAK,CAACC,CAAD,EAAI;AACL,SAAK/B,CAAL,GAAS+B,CAAC,CAAC/B,CAAX;AACA,SAAKF,CAAL,GAASiC,CAAC,CAACjC,CAAX;AACA,UAAMkC,GAAG,GAAGD,CAAZ;AACA,SAAKhC,CAAL,GAASiC,GAAG,CAACjC,CAAJ,GAAQiC,GAAG,CAACjC,CAAZ,GAAgB,CAAzB;AACH;;AACDqB,EAAAA,GAAG,CAACJ,CAAD,EAAI;AACH,WAAOrB,QAAQ,CAACU,MAAT,CAAgB,KAAKL,CAAL,GAASgB,CAAC,CAAChB,CAA3B,EAA8B,KAAKF,CAAL,GAASkB,CAAC,CAAClB,CAAzC,EAA4C,KAAKC,CAAL,GAASiB,CAAC,CAACjB,CAAvD,CAAP;AACH;;AACDkC,EAAAA,OAAO,CAACjB,CAAD,EAAI;AACP,SAAKhB,CAAL,IAAUgB,CAAC,CAAChB,CAAZ;AACA,SAAKF,CAAL,IAAUkB,CAAC,CAAClB,CAAZ;AACA,SAAKC,CAAL,IAAUiB,CAAC,CAACjB,CAAZ;AACH;;AACDU,EAAAA,eAAe,CAACH,KAAD,EAAQI,MAAR,EAAgB;AAC3B,SAAKV,CAAL,GAASO,IAAI,CAACqB,GAAL,CAAStB,KAAT,IAAkBI,MAA3B;AACA,SAAKZ,CAAL,GAASS,IAAI,CAACsB,GAAL,CAASvB,KAAT,IAAkBI,MAA3B;AACH;;AA9FiB","sourcesContent":["export class Vector3d {\n    constructor(xOrCoords, y, z) {\n        if (typeof xOrCoords !== \"number\" && xOrCoords) {\n            this.x = xOrCoords.x;\n            this.y = xOrCoords.y;\n            const coords3d = xOrCoords;\n            this.z = coords3d.z ? coords3d.z : 0;\n        }\n        else if (xOrCoords !== undefined && y !== undefined) {\n            this.x = xOrCoords;\n            this.y = y;\n            this.z = z !== null && z !== void 0 ? z : 0;\n        }\n        else {\n            throw new Error(\"tsParticles - Vector3d not initialized correctly\");\n        }\n    }\n    static get origin() {\n        return Vector3d.create(0, 0, 0);\n    }\n    get angle() {\n        return Math.atan2(this.y, this.x);\n    }\n    set angle(angle) {\n        this.updateFromAngle(angle, this.length);\n    }\n    get length() {\n        return Math.sqrt(this.getLengthSq());\n    }\n    set length(length) {\n        this.updateFromAngle(this.angle, length);\n    }\n    static clone(source) {\n        return Vector3d.create(source.x, source.y, source.z);\n    }\n    static create(x, y, z) {\n        return new Vector3d(x, y, z);\n    }\n    add(v) {\n        return Vector3d.create(this.x + v.x, this.y + v.y, this.z + v.z);\n    }\n    addTo(v) {\n        this.x += v.x;\n        this.y += v.y;\n        this.z += v.z;\n    }\n    copy() {\n        return Vector3d.clone(this);\n    }\n    distanceTo(v) {\n        return this.sub(v).length;\n    }\n    distanceToSq(v) {\n        return this.sub(v).getLengthSq();\n    }\n    div(n) {\n        return Vector3d.create(this.x / n, this.y / n, this.z / n);\n    }\n    divTo(n) {\n        this.x /= n;\n        this.y /= n;\n        this.z /= n;\n    }\n    getLengthSq() {\n        return this.x ** 2 + this.y ** 2;\n    }\n    mult(n) {\n        return Vector3d.create(this.x * n, this.y * n, this.z * n);\n    }\n    multTo(n) {\n        this.x *= n;\n        this.y *= n;\n        this.z *= n;\n    }\n    rotate(angle) {\n        return Vector3d.create(this.x * Math.cos(angle) - this.y * Math.sin(angle), this.x * Math.sin(angle) + this.y * Math.cos(angle), 0);\n    }\n    setTo(c) {\n        this.x = c.x;\n        this.y = c.y;\n        const v3d = c;\n        this.z = v3d.z ? v3d.z : 0;\n    }\n    sub(v) {\n        return Vector3d.create(this.x - v.x, this.y - v.y, this.z - v.z);\n    }\n    subFrom(v) {\n        this.x -= v.x;\n        this.y -= v.y;\n        this.z -= v.z;\n    }\n    updateFromAngle(angle, length) {\n        this.x = Math.cos(angle) * length;\n        this.y = Math.sin(angle) * length;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}