{"ast":null,"code":"export class EventDispatcher {\n  constructor() {\n    this._listeners = new Map();\n  }\n\n  addEventListener(type, listener) {\n    var _a;\n\n    this.removeEventListener(type, listener);\n\n    if (!this._listeners.get(type)) {\n      this._listeners.set(type, []);\n    }\n\n    (_a = this._listeners.get(type)) === null || _a === void 0 ? void 0 : _a.push(listener);\n  }\n\n  dispatchEvent(type, args) {\n    var _a;\n\n    (_a = this._listeners.get(type)) === null || _a === void 0 ? void 0 : _a.forEach(handler => handler(args));\n  }\n\n  hasEventListener(type) {\n    return !!this._listeners.get(type);\n  }\n\n  removeAllEventListeners(type) {\n    if (!type) {\n      this._listeners = new Map();\n    } else {\n      this._listeners.delete(type);\n    }\n  }\n\n  removeEventListener(type, listener) {\n    const arr = this._listeners.get(type);\n\n    if (!arr) {\n      return;\n    }\n\n    const length = arr.length,\n          idx = arr.indexOf(listener);\n\n    if (idx < 0) {\n      return;\n    }\n\n    if (length === 1) {\n      this._listeners.delete(type);\n    } else {\n      arr.splice(idx, 1);\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/torea/Desktop/freelanceProject2/open-react-template/node_modules/tsparticles-engine/esm/Utils/EventDispatcher.js"],"names":["EventDispatcher","constructor","_listeners","Map","addEventListener","type","listener","_a","removeEventListener","get","set","push","dispatchEvent","args","forEach","handler","hasEventListener","removeAllEventListeners","delete","arr","length","idx","indexOf","splice"],"mappings":"AAAA,OAAO,MAAMA,eAAN,CAAsB;AACzBC,EAAAA,WAAW,GAAG;AACV,SAAKC,UAAL,GAAkB,IAAIC,GAAJ,EAAlB;AACH;;AACDC,EAAAA,gBAAgB,CAACC,IAAD,EAAOC,QAAP,EAAiB;AAC7B,QAAIC,EAAJ;;AACA,SAAKC,mBAAL,CAAyBH,IAAzB,EAA+BC,QAA/B;;AACA,QAAI,CAAC,KAAKJ,UAAL,CAAgBO,GAAhB,CAAoBJ,IAApB,CAAL,EAAgC;AAC5B,WAAKH,UAAL,CAAgBQ,GAAhB,CAAoBL,IAApB,EAA0B,EAA1B;AACH;;AACD,KAACE,EAAE,GAAG,KAAKL,UAAL,CAAgBO,GAAhB,CAAoBJ,IAApB,CAAN,MAAqC,IAArC,IAA6CE,EAAE,KAAK,KAAK,CAAzD,GAA6D,KAAK,CAAlE,GAAsEA,EAAE,CAACI,IAAH,CAAQL,QAAR,CAAtE;AACH;;AACDM,EAAAA,aAAa,CAACP,IAAD,EAAOQ,IAAP,EAAa;AACtB,QAAIN,EAAJ;;AACA,KAACA,EAAE,GAAG,KAAKL,UAAL,CAAgBO,GAAhB,CAAoBJ,IAApB,CAAN,MAAqC,IAArC,IAA6CE,EAAE,KAAK,KAAK,CAAzD,GAA6D,KAAK,CAAlE,GAAsEA,EAAE,CAACO,OAAH,CAAYC,OAAD,IAAaA,OAAO,CAACF,IAAD,CAA/B,CAAtE;AACH;;AACDG,EAAAA,gBAAgB,CAACX,IAAD,EAAO;AACnB,WAAO,CAAC,CAAC,KAAKH,UAAL,CAAgBO,GAAhB,CAAoBJ,IAApB,CAAT;AACH;;AACDY,EAAAA,uBAAuB,CAACZ,IAAD,EAAO;AAC1B,QAAI,CAACA,IAAL,EAAW;AACP,WAAKH,UAAL,GAAkB,IAAIC,GAAJ,EAAlB;AACH,KAFD,MAGK;AACD,WAAKD,UAAL,CAAgBgB,MAAhB,CAAuBb,IAAvB;AACH;AACJ;;AACDG,EAAAA,mBAAmB,CAACH,IAAD,EAAOC,QAAP,EAAiB;AAChC,UAAMa,GAAG,GAAG,KAAKjB,UAAL,CAAgBO,GAAhB,CAAoBJ,IAApB,CAAZ;;AACA,QAAI,CAACc,GAAL,EAAU;AACN;AACH;;AACD,UAAMC,MAAM,GAAGD,GAAG,CAACC,MAAnB;AAAA,UAA2BC,GAAG,GAAGF,GAAG,CAACG,OAAJ,CAAYhB,QAAZ,CAAjC;;AACA,QAAIe,GAAG,GAAG,CAAV,EAAa;AACT;AACH;;AACD,QAAID,MAAM,KAAK,CAAf,EAAkB;AACd,WAAKlB,UAAL,CAAgBgB,MAAhB,CAAuBb,IAAvB;AACH,KAFD,MAGK;AACDc,MAAAA,GAAG,CAACI,MAAJ,CAAWF,GAAX,EAAgB,CAAhB;AACH;AACJ;;AA1CwB","sourcesContent":["export class EventDispatcher {\n    constructor() {\n        this._listeners = new Map();\n    }\n    addEventListener(type, listener) {\n        var _a;\n        this.removeEventListener(type, listener);\n        if (!this._listeners.get(type)) {\n            this._listeners.set(type, []);\n        }\n        (_a = this._listeners.get(type)) === null || _a === void 0 ? void 0 : _a.push(listener);\n    }\n    dispatchEvent(type, args) {\n        var _a;\n        (_a = this._listeners.get(type)) === null || _a === void 0 ? void 0 : _a.forEach((handler) => handler(args));\n    }\n    hasEventListener(type) {\n        return !!this._listeners.get(type);\n    }\n    removeAllEventListeners(type) {\n        if (!type) {\n            this._listeners = new Map();\n        }\n        else {\n            this._listeners.delete(type);\n        }\n    }\n    removeEventListener(type, listener) {\n        const arr = this._listeners.get(type);\n        if (!arr) {\n            return;\n        }\n        const length = arr.length, idx = arr.indexOf(listener);\n        if (idx < 0) {\n            return;\n        }\n        if (length === 1) {\n            this._listeners.delete(type);\n        }\n        else {\n            arr.splice(idx, 1);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}