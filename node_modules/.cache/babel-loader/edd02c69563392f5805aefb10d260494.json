{"ast":null,"code":"import _slicedToArray from \"/Users/torea/Desktop/freelanceProject2/open-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _createForOfIteratorHelper from \"/Users/torea/Desktop/freelanceProject2/open-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"/Users/torea/Desktop/freelanceProject2/open-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/torea/Desktop/freelanceProject2/open-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { calcExactPositionOrRandomFromSize, clamp, getDistance, getParticleBaseVelocity, getParticleDirectionAngle, getRandom, getRangeMax, getRangeMin, getRangeValue, getValue, randomInRange, setRangeValue } from \"../Utils/NumberUtils\";\nimport { deepExtend, isInArray, itemFromSingleOrMultiple } from \"../Utils/Utils\";\nimport { getHslFromAnimation, rangeColorToRgb } from \"../Utils/ColorUtils\";\nimport { Interactivity } from \"../Options/Classes/Interactivity/Interactivity\";\nimport { Vector } from \"./Utils/Vector\";\nimport { Vector3d } from \"./Utils/Vector3d\";\nimport { alterHsl } from \"../Utils/CanvasUtils\";\nimport { loadParticlesOptions } from \"../Utils/OptionsUtils\";\n\nvar fixOutMode = function fixOutMode(data) {\n  if (!isInArray(data.outMode, data.checkModes)) {\n    return;\n  }\n\n  if (data.coord > data.maxCoord - data.radius * 2) {\n    data.setCb(-data.radius);\n  } else if (data.coord < data.radius * 2) {\n    data.setCb(data.radius);\n  }\n};\n\nexport var Particle = /*#__PURE__*/function () {\n  function Particle(engine, id, container, position, overrideOptions, group) {\n    _classCallCheck(this, Particle);\n\n    this.container = container;\n    this._engine = engine;\n    this.init(id, position, overrideOptions, group);\n  }\n\n  _createClass(Particle, [{\n    key: \"destroy\",\n    value: function destroy(override) {\n      var _a;\n\n      if (this.unbreakable || this.destroyed) {\n        return;\n      }\n\n      this.destroyed = true;\n      this.bubble.inRange = false;\n      this.slow.inRange = false;\n\n      var _iterator = _createForOfIteratorHelper(this.container.plugins),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              plugin = _step$value[1];\n\n          if (plugin.particleDestroyed) {\n            plugin.particleDestroyed(this, override);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      var _iterator2 = _createForOfIteratorHelper(this.container.particles.updaters),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var updater = _step2.value;\n\n          if (updater.particleDestroyed) {\n            updater.particleDestroyed(this, override);\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      (_a = this.pathGenerator) === null || _a === void 0 ? void 0 : _a.reset(this);\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(delta) {\n      var container = this.container;\n\n      var _iterator3 = _createForOfIteratorHelper(container.plugins),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var _step3$value = _slicedToArray(_step3.value, 2),\n              plugin = _step3$value[1];\n\n          container.canvas.drawParticlePlugin(plugin, this, delta);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      container.canvas.drawParticle(this, delta);\n    }\n  }, {\n    key: \"getFillColor\",\n    value: function getFillColor() {\n      var _a;\n\n      return this._getRollColor((_a = this.bubble.color) !== null && _a !== void 0 ? _a : getHslFromAnimation(this.color));\n    }\n  }, {\n    key: \"getMass\",\n    value: function getMass() {\n      return Math.pow(this.getRadius(), 2) * Math.PI / 2;\n    }\n  }, {\n    key: \"getPosition\",\n    value: function getPosition() {\n      return {\n        x: this.position.x + this.offset.x,\n        y: this.position.y + this.offset.y,\n        z: this.position.z\n      };\n    }\n  }, {\n    key: \"getRadius\",\n    value: function getRadius() {\n      var _a;\n\n      return (_a = this.bubble.radius) !== null && _a !== void 0 ? _a : this.size.value;\n    }\n  }, {\n    key: \"getStrokeColor\",\n    value: function getStrokeColor() {\n      var _a;\n\n      return this._getRollColor((_a = this.bubble.color) !== null && _a !== void 0 ? _a : getHslFromAnimation(this.strokeColor));\n    }\n  }, {\n    key: \"init\",\n    value: function init(id, position, overrideOptions, group) {\n      var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n\n      var container = this.container,\n          engine = this._engine;\n      this.id = id;\n      this.group = group;\n      this.fill = true;\n      this.pathRotation = false;\n      this.close = true;\n      this.lastPathTime = 0;\n      this.destroyed = false;\n      this.unbreakable = false;\n      this.rotation = 0;\n      this.misplaced = false;\n      this.retina = {\n        maxDistance: {}\n      };\n      this.outType = \"normal\";\n      this.ignoresResizeRatio = true;\n      var pxRatio = container.retina.pixelRatio,\n          mainOptions = container.actualOptions,\n          particlesOptions = loadParticlesOptions(this._engine, container, mainOptions.particles),\n          shapeType = particlesOptions.shape.type,\n          reduceDuplicates = particlesOptions.reduceDuplicates;\n      this.shape = itemFromSingleOrMultiple(shapeType, this.id, reduceDuplicates);\n      var shapeOptions = particlesOptions.shape;\n\n      if (overrideOptions && overrideOptions.shape && overrideOptions.shape.type) {\n        var overrideShapeType = overrideOptions.shape.type,\n            shape = itemFromSingleOrMultiple(overrideShapeType, this.id, reduceDuplicates);\n\n        if (shape) {\n          this.shape = shape;\n          shapeOptions.load(overrideOptions.shape);\n        }\n      }\n\n      this.shapeData = this._loadShapeData(shapeOptions, reduceDuplicates);\n      particlesOptions.load(overrideOptions);\n      particlesOptions.load((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles);\n      this.interactivity = new Interactivity(engine, container);\n      this.interactivity.load(container.actualOptions.interactivity);\n      this.interactivity.load(particlesOptions.interactivity);\n      this.fill = (_c = (_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.fill) !== null && _c !== void 0 ? _c : this.fill;\n      this.close = (_e = (_d = this.shapeData) === null || _d === void 0 ? void 0 : _d.close) !== null && _e !== void 0 ? _e : this.close;\n      this.options = particlesOptions;\n      var pathOptions = this.options.move.path;\n      this.pathDelay = getValue(pathOptions.delay) * 1000;\n\n      if (pathOptions.generator) {\n        this.pathGenerator = this._engine.plugins.getPathGenerator(pathOptions.generator);\n\n        if (this.pathGenerator && container.addPath(pathOptions.generator, this.pathGenerator)) {\n          this.pathGenerator.init(container);\n        }\n      }\n\n      var zIndexValue = getRangeValue(this.options.zIndex.value);\n      container.retina.initParticle(this);\n      var sizeOptions = this.options.size,\n          sizeRange = sizeOptions.value,\n          sizeAnimation = sizeOptions.animation;\n      this.size = {\n        enable: sizeOptions.animation.enable,\n        value: getRangeValue(sizeOptions.value) * container.retina.pixelRatio,\n        max: getRangeMax(sizeRange) * pxRatio,\n        min: getRangeMin(sizeRange) * pxRatio,\n        loops: 0,\n        maxLoops: getRangeValue(sizeOptions.animation.count)\n      };\n\n      if (sizeAnimation.enable) {\n        this.size.status = \"increasing\";\n        this.size.decay = 1 - getRangeValue(sizeAnimation.decay);\n\n        switch (sizeAnimation.startValue) {\n          case \"min\":\n            this.size.value = this.size.min;\n            this.size.status = \"increasing\";\n            break;\n\n          case \"random\":\n            this.size.value = randomInRange(this.size);\n            this.size.status = getRandom() >= 0.5 ? \"increasing\" : \"decreasing\";\n            break;\n\n          case \"max\":\n          default:\n            this.size.value = this.size.max;\n            this.size.status = \"decreasing\";\n            break;\n        }\n      }\n\n      this.size.initialValue = this.size.value;\n      this.bubble = {\n        inRange: false\n      };\n      this.slow = {\n        inRange: false,\n        factor: 1\n      };\n      this.position = this._calcPosition(container, position, clamp(zIndexValue, 0, container.zLayers));\n      this.initialPosition = this.position.copy();\n      var canvasSize = container.canvas.size,\n          moveCenter = Object.assign({}, this.options.move.center),\n          isCenterPercent = moveCenter.mode === \"percent\";\n      this.moveCenter = {\n        x: moveCenter.x * (isCenterPercent ? canvasSize.width / 100 : 1),\n        y: moveCenter.y * (isCenterPercent ? canvasSize.height / 100 : 1),\n        radius: (_f = this.options.move.center.radius) !== null && _f !== void 0 ? _f : 0,\n        mode: (_g = this.options.move.center.mode) !== null && _g !== void 0 ? _g : \"percent\"\n      };\n      this.direction = getParticleDirectionAngle(this.options.move.direction, this.position, this.moveCenter);\n\n      switch (this.options.move.direction) {\n        case \"inside\":\n          this.outType = \"inside\";\n          break;\n\n        case \"outside\":\n          this.outType = \"outside\";\n          break;\n      }\n\n      this.initialVelocity = this._calculateVelocity();\n      this.velocity = this.initialVelocity.copy();\n      this.moveDecay = 1 - getRangeValue(this.options.move.decay);\n      this.offset = Vector.origin;\n      var particles = container.particles;\n      particles.needsSort = particles.needsSort || particles.lastZIndex < this.position.z;\n      particles.lastZIndex = this.position.z;\n      this.zIndexFactor = this.position.z / container.zLayers;\n      this.sides = 24;\n      var drawer = container.drawers.get(this.shape);\n\n      if (!drawer) {\n        drawer = this._engine.plugins.getShapeDrawer(this.shape);\n\n        if (drawer) {\n          container.drawers.set(this.shape, drawer);\n        }\n      }\n\n      if (drawer === null || drawer === void 0 ? void 0 : drawer.loadShape) {\n        drawer === null || drawer === void 0 ? void 0 : drawer.loadShape(this);\n      }\n\n      var sideCountFunc = drawer === null || drawer === void 0 ? void 0 : drawer.getSidesCount;\n\n      if (sideCountFunc) {\n        this.sides = sideCountFunc(this);\n      }\n\n      this.spawning = false;\n      this.shadowColor = rangeColorToRgb(this.options.shadow.color);\n\n      var _iterator4 = _createForOfIteratorHelper(container.particles.updaters),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var updater = _step4.value;\n          updater.init(this);\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      var _iterator5 = _createForOfIteratorHelper(container.particles.movers),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var mover = _step5.value;\n          (_h = mover.init) === null || _h === void 0 ? void 0 : _h.call(mover, this);\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n\n      if (drawer === null || drawer === void 0 ? void 0 : drawer.particleInit) {\n        drawer.particleInit(container, this);\n      }\n\n      var _iterator6 = _createForOfIteratorHelper(container.plugins),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var _step6$value = _slicedToArray(_step6.value, 2),\n              plugin = _step6$value[1];\n\n          (_j = plugin.particleCreated) === null || _j === void 0 ? void 0 : _j.call(plugin, this);\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n    }\n  }, {\n    key: \"isInsideCanvas\",\n    value: function isInsideCanvas() {\n      var radius = this.getRadius(),\n          canvasSize = this.container.canvas.size;\n      return this.position.x >= -radius && this.position.y >= -radius && this.position.y <= canvasSize.height + radius && this.position.x <= canvasSize.width + radius;\n    }\n  }, {\n    key: \"isVisible\",\n    value: function isVisible() {\n      return !this.destroyed && !this.spawning && this.isInsideCanvas();\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      var _a;\n\n      var _iterator7 = _createForOfIteratorHelper(this.container.particles.updaters),\n          _step7;\n\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var updater = _step7.value;\n          (_a = updater.reset) === null || _a === void 0 ? void 0 : _a.call(updater, this);\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n    }\n  }, {\n    key: \"_calcPosition\",\n    value: function _calcPosition(container, position, zIndex) {\n      var tryCount = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n      var _a, _b, _c, _d;\n\n      var _iterator8 = _createForOfIteratorHelper(container.plugins),\n          _step8;\n\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var _step8$value = _slicedToArray(_step8.value, 2),\n              plugin = _step8$value[1];\n\n          var pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n\n          if (pluginPos !== undefined) {\n            return Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\n          }\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n\n      var canvasSize = container.canvas.size,\n          exactPosition = calcExactPositionOrRandomFromSize({\n        size: canvasSize,\n        position: position\n      }),\n          pos = Vector3d.create(exactPosition.x, exactPosition.y, zIndex),\n          radius = this.getRadius(),\n          outModes = this.options.move.outModes,\n          fixHorizontal = function fixHorizontal(outMode) {\n        fixOutMode({\n          outMode: outMode,\n          checkModes: [\"bounce\", \"bounce-horizontal\"],\n          coord: pos.x,\n          maxCoord: container.canvas.size.width,\n          setCb: function setCb(value) {\n            return pos.x += value;\n          },\n          radius: radius\n        });\n      },\n          fixVertical = function fixVertical(outMode) {\n        fixOutMode({\n          outMode: outMode,\n          checkModes: [\"bounce\", \"bounce-vertical\"],\n          coord: pos.y,\n          maxCoord: container.canvas.size.height,\n          setCb: function setCb(value) {\n            return pos.y += value;\n          },\n          radius: radius\n        });\n      };\n\n      fixHorizontal((_a = outModes.left) !== null && _a !== void 0 ? _a : outModes.default);\n      fixHorizontal((_b = outModes.right) !== null && _b !== void 0 ? _b : outModes.default);\n      fixVertical((_c = outModes.top) !== null && _c !== void 0 ? _c : outModes.default);\n      fixVertical((_d = outModes.bottom) !== null && _d !== void 0 ? _d : outModes.default);\n\n      if (this._checkOverlap(pos, tryCount)) {\n        return this._calcPosition(container, undefined, zIndex, tryCount + 1);\n      }\n\n      return pos;\n    }\n  }, {\n    key: \"_calculateVelocity\",\n    value: function _calculateVelocity() {\n      var baseVelocity = getParticleBaseVelocity(this.direction),\n          res = baseVelocity.copy(),\n          moveOptions = this.options.move;\n\n      if (moveOptions.direction === \"inside\" || moveOptions.direction === \"outside\") {\n        return res;\n      }\n\n      var rad = Math.PI / 180 * getRangeValue(moveOptions.angle.value),\n          radOffset = Math.PI / 180 * getRangeValue(moveOptions.angle.offset),\n          range = {\n        left: radOffset - rad / 2,\n        right: radOffset + rad / 2\n      };\n\n      if (!moveOptions.straight) {\n        res.angle += randomInRange(setRangeValue(range.left, range.right));\n      }\n\n      if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n        res.length *= getRandom();\n      }\n\n      return res;\n    }\n  }, {\n    key: \"_checkOverlap\",\n    value: function _checkOverlap(pos) {\n      var tryCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var collisionsOptions = this.options.collisions,\n          radius = this.getRadius();\n\n      if (!collisionsOptions.enable) {\n        return false;\n      }\n\n      var overlapOptions = collisionsOptions.overlap;\n\n      if (overlapOptions.enable) {\n        return false;\n      }\n\n      var retries = overlapOptions.retries;\n\n      if (retries >= 0 && tryCount > retries) {\n        throw new Error(\"Particle is overlapping and can't be placed\");\n      }\n\n      var overlaps = false;\n\n      var _iterator9 = _createForOfIteratorHelper(this.container.particles.array),\n          _step9;\n\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          var particle = _step9.value;\n\n          if (getDistance(pos, particle.position) < radius + particle.getRadius()) {\n            overlaps = true;\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n\n      return overlaps;\n    }\n  }, {\n    key: \"_getRollColor\",\n    value: function _getRollColor(color) {\n      var _a;\n\n      if (!color || !this.roll || !this.backColor && !this.roll.alter) {\n        return color;\n      }\n\n      var backFactor = this.roll.horizontal && this.roll.vertical ? 2 : 1,\n          backSum = this.roll.horizontal ? Math.PI / 2 : 0,\n          rolled = Math.floor((((_a = this.roll.angle) !== null && _a !== void 0 ? _a : 0) + backSum) / (Math.PI / backFactor)) % 2;\n\n      if (!rolled) {\n        return color;\n      }\n\n      if (this.backColor) {\n        return this.backColor;\n      }\n\n      if (this.roll.alter) {\n        return alterHsl(color, this.roll.alter.type, this.roll.alter.value);\n      }\n\n      return color;\n    }\n  }, {\n    key: \"_loadShapeData\",\n    value: function _loadShapeData(shapeOptions, reduceDuplicates) {\n      var shapeData = shapeOptions.options[this.shape];\n\n      if (shapeData) {\n        return deepExtend({}, itemFromSingleOrMultiple(shapeData, this.id, reduceDuplicates));\n      }\n    }\n  }]);\n\n  return Particle;\n}();","map":{"version":3,"sources":["/Users/torea/Desktop/freelanceProject2/open-react-template/node_modules/tsparticles-engine/esm/Core/Particle.js"],"names":["calcExactPositionOrRandomFromSize","clamp","getDistance","getParticleBaseVelocity","getParticleDirectionAngle","getRandom","getRangeMax","getRangeMin","getRangeValue","getValue","randomInRange","setRangeValue","deepExtend","isInArray","itemFromSingleOrMultiple","getHslFromAnimation","rangeColorToRgb","Interactivity","Vector","Vector3d","alterHsl","loadParticlesOptions","fixOutMode","data","outMode","checkModes","coord","maxCoord","radius","setCb","Particle","engine","id","container","position","overrideOptions","group","_engine","init","override","_a","unbreakable","destroyed","bubble","inRange","slow","plugins","plugin","particleDestroyed","particles","updaters","updater","pathGenerator","reset","delta","canvas","drawParticlePlugin","drawParticle","_getRollColor","color","getRadius","Math","PI","x","offset","y","z","size","value","strokeColor","_b","_c","_d","_e","_f","_g","_h","_j","fill","pathRotation","close","lastPathTime","rotation","misplaced","retina","maxDistance","outType","ignoresResizeRatio","pxRatio","pixelRatio","mainOptions","actualOptions","particlesOptions","shapeType","shape","type","reduceDuplicates","shapeOptions","overrideShapeType","load","shapeData","_loadShapeData","interactivity","options","pathOptions","move","path","pathDelay","delay","generator","getPathGenerator","addPath","zIndexValue","zIndex","initParticle","sizeOptions","sizeRange","sizeAnimation","animation","enable","max","min","loops","maxLoops","count","status","decay","startValue","initialValue","factor","_calcPosition","zLayers","initialPosition","copy","canvasSize","moveCenter","Object","assign","center","isCenterPercent","mode","width","height","direction","initialVelocity","_calculateVelocity","velocity","moveDecay","origin","needsSort","lastZIndex","zIndexFactor","sides","drawer","drawers","get","getShapeDrawer","set","loadShape","sideCountFunc","getSidesCount","spawning","shadowColor","shadow","movers","mover","call","particleInit","particleCreated","isInsideCanvas","tryCount","pluginPos","particlePosition","undefined","create","exactPosition","pos","outModes","fixHorizontal","fixVertical","left","default","right","top","bottom","_checkOverlap","baseVelocity","res","moveOptions","rad","angle","radOffset","range","straight","random","speed","length","collisionsOptions","collisions","overlapOptions","overlap","retries","Error","overlaps","array","particle","roll","backColor","alter","backFactor","horizontal","vertical","backSum","rolled","floor"],"mappings":"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","sourcesContent":["import { calcExactPositionOrRandomFromSize, clamp, getDistance, getParticleBaseVelocity, getParticleDirectionAngle, getRandom, getRangeMax, getRangeMin, getRangeValue, getValue, randomInRange, setRangeValue, } from \"../Utils/NumberUtils\";\nimport { deepExtend, isInArray, itemFromSingleOrMultiple } from \"../Utils/Utils\";\nimport { getHslFromAnimation, rangeColorToRgb } from \"../Utils/ColorUtils\";\nimport { Interactivity } from \"../Options/Classes/Interactivity/Interactivity\";\nimport { Vector } from \"./Utils/Vector\";\nimport { Vector3d } from \"./Utils/Vector3d\";\nimport { alterHsl } from \"../Utils/CanvasUtils\";\nimport { loadParticlesOptions } from \"../Utils/OptionsUtils\";\nconst fixOutMode = (data) => {\n    if (!isInArray(data.outMode, data.checkModes)) {\n        return;\n    }\n    if (data.coord > data.maxCoord - data.radius * 2) {\n        data.setCb(-data.radius);\n    }\n    else if (data.coord < data.radius * 2) {\n        data.setCb(data.radius);\n    }\n};\nexport class Particle {\n    constructor(engine, id, container, position, overrideOptions, group) {\n        this.container = container;\n        this._engine = engine;\n        this.init(id, position, overrideOptions, group);\n    }\n    destroy(override) {\n        var _a;\n        if (this.unbreakable || this.destroyed) {\n            return;\n        }\n        this.destroyed = true;\n        this.bubble.inRange = false;\n        this.slow.inRange = false;\n        for (const [, plugin] of this.container.plugins) {\n            if (plugin.particleDestroyed) {\n                plugin.particleDestroyed(this, override);\n            }\n        }\n        for (const updater of this.container.particles.updaters) {\n            if (updater.particleDestroyed) {\n                updater.particleDestroyed(this, override);\n            }\n        }\n        (_a = this.pathGenerator) === null || _a === void 0 ? void 0 : _a.reset(this);\n    }\n    draw(delta) {\n        const container = this.container;\n        for (const [, plugin] of container.plugins) {\n            container.canvas.drawParticlePlugin(plugin, this, delta);\n        }\n        container.canvas.drawParticle(this, delta);\n    }\n    getFillColor() {\n        var _a;\n        return this._getRollColor((_a = this.bubble.color) !== null && _a !== void 0 ? _a : getHslFromAnimation(this.color));\n    }\n    getMass() {\n        return (this.getRadius() ** 2 * Math.PI) / 2;\n    }\n    getPosition() {\n        return {\n            x: this.position.x + this.offset.x,\n            y: this.position.y + this.offset.y,\n            z: this.position.z,\n        };\n    }\n    getRadius() {\n        var _a;\n        return (_a = this.bubble.radius) !== null && _a !== void 0 ? _a : this.size.value;\n    }\n    getStrokeColor() {\n        var _a;\n        return this._getRollColor((_a = this.bubble.color) !== null && _a !== void 0 ? _a : getHslFromAnimation(this.strokeColor));\n    }\n    init(id, position, overrideOptions, group) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n        const container = this.container, engine = this._engine;\n        this.id = id;\n        this.group = group;\n        this.fill = true;\n        this.pathRotation = false;\n        this.close = true;\n        this.lastPathTime = 0;\n        this.destroyed = false;\n        this.unbreakable = false;\n        this.rotation = 0;\n        this.misplaced = false;\n        this.retina = {\n            maxDistance: {},\n        };\n        this.outType = \"normal\";\n        this.ignoresResizeRatio = true;\n        const pxRatio = container.retina.pixelRatio, mainOptions = container.actualOptions, particlesOptions = loadParticlesOptions(this._engine, container, mainOptions.particles), shapeType = particlesOptions.shape.type, { reduceDuplicates } = particlesOptions;\n        this.shape = itemFromSingleOrMultiple(shapeType, this.id, reduceDuplicates);\n        const shapeOptions = particlesOptions.shape;\n        if (overrideOptions && overrideOptions.shape && overrideOptions.shape.type) {\n            const overrideShapeType = overrideOptions.shape.type, shape = itemFromSingleOrMultiple(overrideShapeType, this.id, reduceDuplicates);\n            if (shape) {\n                this.shape = shape;\n                shapeOptions.load(overrideOptions.shape);\n            }\n        }\n        this.shapeData = this._loadShapeData(shapeOptions, reduceDuplicates);\n        particlesOptions.load(overrideOptions);\n        particlesOptions.load((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles);\n        this.interactivity = new Interactivity(engine, container);\n        this.interactivity.load(container.actualOptions.interactivity);\n        this.interactivity.load(particlesOptions.interactivity);\n        this.fill = (_c = (_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.fill) !== null && _c !== void 0 ? _c : this.fill;\n        this.close = (_e = (_d = this.shapeData) === null || _d === void 0 ? void 0 : _d.close) !== null && _e !== void 0 ? _e : this.close;\n        this.options = particlesOptions;\n        const pathOptions = this.options.move.path;\n        this.pathDelay = getValue(pathOptions.delay) * 1000;\n        if (pathOptions.generator) {\n            this.pathGenerator = this._engine.plugins.getPathGenerator(pathOptions.generator);\n            if (this.pathGenerator && container.addPath(pathOptions.generator, this.pathGenerator)) {\n                this.pathGenerator.init(container);\n            }\n        }\n        const zIndexValue = getRangeValue(this.options.zIndex.value);\n        container.retina.initParticle(this);\n        const sizeOptions = this.options.size, sizeRange = sizeOptions.value, sizeAnimation = sizeOptions.animation;\n        this.size = {\n            enable: sizeOptions.animation.enable,\n            value: getRangeValue(sizeOptions.value) * container.retina.pixelRatio,\n            max: getRangeMax(sizeRange) * pxRatio,\n            min: getRangeMin(sizeRange) * pxRatio,\n            loops: 0,\n            maxLoops: getRangeValue(sizeOptions.animation.count),\n        };\n        if (sizeAnimation.enable) {\n            this.size.status = \"increasing\";\n            this.size.decay = 1 - getRangeValue(sizeAnimation.decay);\n            switch (sizeAnimation.startValue) {\n                case \"min\":\n                    this.size.value = this.size.min;\n                    this.size.status = \"increasing\";\n                    break;\n                case \"random\":\n                    this.size.value = randomInRange(this.size);\n                    this.size.status = getRandom() >= 0.5 ? \"increasing\" : \"decreasing\";\n                    break;\n                case \"max\":\n                default:\n                    this.size.value = this.size.max;\n                    this.size.status = \"decreasing\";\n                    break;\n            }\n        }\n        this.size.initialValue = this.size.value;\n        this.bubble = {\n            inRange: false,\n        };\n        this.slow = {\n            inRange: false,\n            factor: 1,\n        };\n        this.position = this._calcPosition(container, position, clamp(zIndexValue, 0, container.zLayers));\n        this.initialPosition = this.position.copy();\n        const canvasSize = container.canvas.size, moveCenter = Object.assign({}, this.options.move.center), isCenterPercent = moveCenter.mode === \"percent\";\n        this.moveCenter = {\n            x: moveCenter.x * (isCenterPercent ? canvasSize.width / 100 : 1),\n            y: moveCenter.y * (isCenterPercent ? canvasSize.height / 100 : 1),\n            radius: (_f = this.options.move.center.radius) !== null && _f !== void 0 ? _f : 0,\n            mode: (_g = this.options.move.center.mode) !== null && _g !== void 0 ? _g : \"percent\",\n        };\n        this.direction = getParticleDirectionAngle(this.options.move.direction, this.position, this.moveCenter);\n        switch (this.options.move.direction) {\n            case \"inside\":\n                this.outType = \"inside\";\n                break;\n            case \"outside\":\n                this.outType = \"outside\";\n                break;\n        }\n        this.initialVelocity = this._calculateVelocity();\n        this.velocity = this.initialVelocity.copy();\n        this.moveDecay = 1 - getRangeValue(this.options.move.decay);\n        this.offset = Vector.origin;\n        const particles = container.particles;\n        particles.needsSort = particles.needsSort || particles.lastZIndex < this.position.z;\n        particles.lastZIndex = this.position.z;\n        this.zIndexFactor = this.position.z / container.zLayers;\n        this.sides = 24;\n        let drawer = container.drawers.get(this.shape);\n        if (!drawer) {\n            drawer = this._engine.plugins.getShapeDrawer(this.shape);\n            if (drawer) {\n                container.drawers.set(this.shape, drawer);\n            }\n        }\n        if (drawer === null || drawer === void 0 ? void 0 : drawer.loadShape) {\n            drawer === null || drawer === void 0 ? void 0 : drawer.loadShape(this);\n        }\n        const sideCountFunc = drawer === null || drawer === void 0 ? void 0 : drawer.getSidesCount;\n        if (sideCountFunc) {\n            this.sides = sideCountFunc(this);\n        }\n        this.spawning = false;\n        this.shadowColor = rangeColorToRgb(this.options.shadow.color);\n        for (const updater of container.particles.updaters) {\n            updater.init(this);\n        }\n        for (const mover of container.particles.movers) {\n            (_h = mover.init) === null || _h === void 0 ? void 0 : _h.call(mover, this);\n        }\n        if (drawer === null || drawer === void 0 ? void 0 : drawer.particleInit) {\n            drawer.particleInit(container, this);\n        }\n        for (const [, plugin] of container.plugins) {\n            (_j = plugin.particleCreated) === null || _j === void 0 ? void 0 : _j.call(plugin, this);\n        }\n    }\n    isInsideCanvas() {\n        const radius = this.getRadius(), canvasSize = this.container.canvas.size;\n        return (this.position.x >= -radius &&\n            this.position.y >= -radius &&\n            this.position.y <= canvasSize.height + radius &&\n            this.position.x <= canvasSize.width + radius);\n    }\n    isVisible() {\n        return !this.destroyed && !this.spawning && this.isInsideCanvas();\n    }\n    reset() {\n        var _a;\n        for (const updater of this.container.particles.updaters) {\n            (_a = updater.reset) === null || _a === void 0 ? void 0 : _a.call(updater, this);\n        }\n    }\n    _calcPosition(container, position, zIndex, tryCount = 0) {\n        var _a, _b, _c, _d;\n        for (const [, plugin] of container.plugins) {\n            const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n            if (pluginPos !== undefined) {\n                return Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\n            }\n        }\n        const canvasSize = container.canvas.size, exactPosition = calcExactPositionOrRandomFromSize({\n            size: canvasSize,\n            position: position,\n        }), pos = Vector3d.create(exactPosition.x, exactPosition.y, zIndex), radius = this.getRadius(), outModes = this.options.move.outModes, fixHorizontal = (outMode) => {\n            fixOutMode({\n                outMode,\n                checkModes: [\"bounce\", \"bounce-horizontal\"],\n                coord: pos.x,\n                maxCoord: container.canvas.size.width,\n                setCb: (value) => (pos.x += value),\n                radius,\n            });\n        }, fixVertical = (outMode) => {\n            fixOutMode({\n                outMode,\n                checkModes: [\"bounce\", \"bounce-vertical\"],\n                coord: pos.y,\n                maxCoord: container.canvas.size.height,\n                setCb: (value) => (pos.y += value),\n                radius,\n            });\n        };\n        fixHorizontal((_a = outModes.left) !== null && _a !== void 0 ? _a : outModes.default);\n        fixHorizontal((_b = outModes.right) !== null && _b !== void 0 ? _b : outModes.default);\n        fixVertical((_c = outModes.top) !== null && _c !== void 0 ? _c : outModes.default);\n        fixVertical((_d = outModes.bottom) !== null && _d !== void 0 ? _d : outModes.default);\n        if (this._checkOverlap(pos, tryCount)) {\n            return this._calcPosition(container, undefined, zIndex, tryCount + 1);\n        }\n        return pos;\n    }\n    _calculateVelocity() {\n        const baseVelocity = getParticleBaseVelocity(this.direction), res = baseVelocity.copy(), moveOptions = this.options.move;\n        if (moveOptions.direction === \"inside\" || moveOptions.direction === \"outside\") {\n            return res;\n        }\n        const rad = (Math.PI / 180) * getRangeValue(moveOptions.angle.value), radOffset = (Math.PI / 180) * getRangeValue(moveOptions.angle.offset), range = {\n            left: radOffset - rad / 2,\n            right: radOffset + rad / 2,\n        };\n        if (!moveOptions.straight) {\n            res.angle += randomInRange(setRangeValue(range.left, range.right));\n        }\n        if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n            res.length *= getRandom();\n        }\n        return res;\n    }\n    _checkOverlap(pos, tryCount = 0) {\n        const collisionsOptions = this.options.collisions, radius = this.getRadius();\n        if (!collisionsOptions.enable) {\n            return false;\n        }\n        const overlapOptions = collisionsOptions.overlap;\n        if (overlapOptions.enable) {\n            return false;\n        }\n        const retries = overlapOptions.retries;\n        if (retries >= 0 && tryCount > retries) {\n            throw new Error(\"Particle is overlapping and can't be placed\");\n        }\n        let overlaps = false;\n        for (const particle of this.container.particles.array) {\n            if (getDistance(pos, particle.position) < radius + particle.getRadius()) {\n                overlaps = true;\n                break;\n            }\n        }\n        return overlaps;\n    }\n    _getRollColor(color) {\n        var _a;\n        if (!color || !this.roll || (!this.backColor && !this.roll.alter)) {\n            return color;\n        }\n        const backFactor = this.roll.horizontal && this.roll.vertical ? 2 : 1, backSum = this.roll.horizontal ? Math.PI / 2 : 0, rolled = Math.floor((((_a = this.roll.angle) !== null && _a !== void 0 ? _a : 0) + backSum) / (Math.PI / backFactor)) % 2;\n        if (!rolled) {\n            return color;\n        }\n        if (this.backColor) {\n            return this.backColor;\n        }\n        if (this.roll.alter) {\n            return alterHsl(color, this.roll.alter.type, this.roll.alter.value);\n        }\n        return color;\n    }\n    _loadShapeData(shapeOptions, reduceDuplicates) {\n        const shapeData = shapeOptions.options[this.shape];\n        if (shapeData) {\n            return deepExtend({}, itemFromSingleOrMultiple(shapeData, this.id, reduceDuplicates));\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}