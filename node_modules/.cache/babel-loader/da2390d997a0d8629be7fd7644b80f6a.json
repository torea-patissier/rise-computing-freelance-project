{"ast":null,"code":"import _regeneratorRuntime from \"/Users/torea/Desktop/freelanceProject2/rise-consulting/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/torea/Desktop/freelanceProject2/rise-consulting/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _createForOfIteratorHelper from \"/Users/torea/Desktop/freelanceProject2/rise-consulting/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"/Users/torea/Desktop/freelanceProject2/rise-consulting/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/torea/Desktop/freelanceProject2/rise-consulting/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { executeOnSingleOrMultiple, itemFromSingleOrMultiple } from \"tsparticles-engine\";\nimport { AbsorberInstance } from \"./AbsorberInstance\";\nexport var Absorbers = /*#__PURE__*/function () {\n  function Absorbers(container) {\n    var _this = this;\n\n    _classCallCheck(this, Absorbers);\n\n    this.container = container;\n    this.array = [];\n    this.absorbers = [];\n    this.interactivityAbsorbers = [];\n\n    container.getAbsorber = function (idxOrName) {\n      return idxOrName === undefined || typeof idxOrName === \"number\" ? _this.array[idxOrName || 0] : _this.array.find(function (t) {\n        return t.name === idxOrName;\n      });\n    };\n\n    container.addAbsorber = function (options, position) {\n      return _this.addAbsorber(options, position);\n    };\n  }\n\n  _createClass(Absorbers, [{\n    key: \"addAbsorber\",\n    value: function addAbsorber(options, position) {\n      var absorber = new AbsorberInstance(this, this.container, options, position);\n      this.array.push(absorber);\n      return absorber;\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(context) {\n      var _iterator = _createForOfIteratorHelper(this.array),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var absorber = _step.value;\n          absorber.draw(context);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"handleClickMode\",\n    value: function handleClickMode(mode) {\n      var absorberOptions = this.absorbers,\n          modeAbsorbers = this.interactivityAbsorbers;\n\n      if (mode === \"absorber\") {\n        var absorbersModeOptions = itemFromSingleOrMultiple(modeAbsorbers),\n            absorbersOptions = absorbersModeOptions !== null && absorbersModeOptions !== void 0 ? absorbersModeOptions : itemFromSingleOrMultiple(absorberOptions),\n            aPosition = this.container.interactivity.mouse.clickPosition;\n        this.addAbsorber(absorbersOptions, aPosition);\n      }\n    }\n  }, {\n    key: \"init\",\n    value: function () {\n      var _init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.absorbers = this.container.actualOptions.absorbers;\n                this.interactivityAbsorbers = this.container.actualOptions.interactivity.modes.absorbers;\n                executeOnSingleOrMultiple(this.absorbers, function (absorber) {\n                  _this2.addAbsorber(absorber);\n                });\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function init() {\n        return _init.apply(this, arguments);\n      }\n\n      return init;\n    }()\n  }, {\n    key: \"particleUpdate\",\n    value: function particleUpdate(particle) {\n      var _iterator2 = _createForOfIteratorHelper(this.array),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var absorber = _step2.value;\n          absorber.attract(particle);\n\n          if (particle.destroyed) {\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }, {\n    key: \"removeAbsorber\",\n    value: function removeAbsorber(absorber) {\n      var index = this.array.indexOf(absorber);\n\n      if (index >= 0) {\n        this.array.splice(index, 1);\n      }\n    }\n  }, {\n    key: \"resize\",\n    value: function resize() {\n      var _iterator3 = _createForOfIteratorHelper(this.array),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var absorber = _step3.value;\n          absorber.resize();\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this.array = [];\n    }\n  }]);\n\n  return Absorbers;\n}();","map":{"version":3,"sources":["/Users/torea/Desktop/freelanceProject2/rise-consulting/node_modules/tsparticles-plugin-absorbers/esm/Absorbers.js"],"names":["executeOnSingleOrMultiple","itemFromSingleOrMultiple","AbsorberInstance","Absorbers","container","array","absorbers","interactivityAbsorbers","getAbsorber","idxOrName","undefined","find","t","name","addAbsorber","options","position","absorber","push","context","draw","mode","absorberOptions","modeAbsorbers","absorbersModeOptions","absorbersOptions","aPosition","interactivity","mouse","clickPosition","actualOptions","modes","particle","attract","destroyed","index","indexOf","splice","resize"],"mappings":"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","sourcesContent":["import { executeOnSingleOrMultiple, itemFromSingleOrMultiple } from \"tsparticles-engine\";\nimport { AbsorberInstance } from \"./AbsorberInstance\";\nexport class Absorbers {\n    constructor(container) {\n        this.container = container;\n        this.array = [];\n        this.absorbers = [];\n        this.interactivityAbsorbers = [];\n        container.getAbsorber = (idxOrName) => idxOrName === undefined || typeof idxOrName === \"number\"\n            ? this.array[idxOrName || 0]\n            : this.array.find((t) => t.name === idxOrName);\n        container.addAbsorber = (options, position) => this.addAbsorber(options, position);\n    }\n    addAbsorber(options, position) {\n        const absorber = new AbsorberInstance(this, this.container, options, position);\n        this.array.push(absorber);\n        return absorber;\n    }\n    draw(context) {\n        for (const absorber of this.array) {\n            absorber.draw(context);\n        }\n    }\n    handleClickMode(mode) {\n        const absorberOptions = this.absorbers, modeAbsorbers = this.interactivityAbsorbers;\n        if (mode === \"absorber\") {\n            const absorbersModeOptions = itemFromSingleOrMultiple(modeAbsorbers), absorbersOptions = absorbersModeOptions !== null && absorbersModeOptions !== void 0 ? absorbersModeOptions : itemFromSingleOrMultiple(absorberOptions), aPosition = this.container.interactivity.mouse.clickPosition;\n            this.addAbsorber(absorbersOptions, aPosition);\n        }\n    }\n    async init() {\n        this.absorbers = this.container.actualOptions.absorbers;\n        this.interactivityAbsorbers = this.container.actualOptions.interactivity.modes.absorbers;\n        executeOnSingleOrMultiple(this.absorbers, (absorber) => {\n            this.addAbsorber(absorber);\n        });\n    }\n    particleUpdate(particle) {\n        for (const absorber of this.array) {\n            absorber.attract(particle);\n            if (particle.destroyed) {\n                break;\n            }\n        }\n    }\n    removeAbsorber(absorber) {\n        const index = this.array.indexOf(absorber);\n        if (index >= 0) {\n            this.array.splice(index, 1);\n        }\n    }\n    resize() {\n        for (const absorber of this.array) {\n            absorber.resize();\n        }\n    }\n    stop() {\n        this.array = [];\n    }\n}\n"]},"metadata":{},"sourceType":"module"}