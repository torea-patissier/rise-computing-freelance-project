{"ast":null,"code":"import _classCallCheck from \"/Users/torea/Desktop/freelanceProject2/open-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/torea/Desktop/freelanceProject2/open-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { getRangeValue, getValue, itemFromSingleOrMultiple, loadParticlesOptions, randomInRange, setRangeValue } from \"tsparticles-engine\";\nimport { Destroy } from \"./Options/Classes/Destroy\";\nexport var DestroyUpdater = /*#__PURE__*/function () {\n  function DestroyUpdater(engine, container) {\n    _classCallCheck(this, DestroyUpdater);\n\n    this.engine = engine;\n    this.container = container;\n  }\n\n  _createClass(DestroyUpdater, [{\n    key: \"init\",\n    value: function init(particle) {\n      var container = this.container,\n          particlesOptions = particle.options,\n          destroyOptions = particlesOptions.destroy;\n\n      if (!destroyOptions) {\n        return;\n      }\n\n      particle.splitCount = 0;\n      var destroyBounds = destroyOptions.bounds;\n\n      if (!particle.destroyBounds) {\n        particle.destroyBounds = {};\n      }\n\n      if (destroyBounds.bottom) {\n        particle.destroyBounds.bottom = getRangeValue(destroyBounds.bottom) * container.canvas.size.height / 100;\n      }\n\n      if (destroyBounds.left) {\n        particle.destroyBounds.left = getRangeValue(destroyBounds.left) * container.canvas.size.width / 100;\n      }\n\n      if (destroyBounds.right) {\n        particle.destroyBounds.right = getRangeValue(destroyBounds.right) * container.canvas.size.width / 100;\n      }\n\n      if (destroyBounds.top) {\n        particle.destroyBounds.top = getRangeValue(destroyBounds.top) * container.canvas.size.height / 100;\n      }\n    }\n  }, {\n    key: \"isEnabled\",\n    value: function isEnabled(particle) {\n      return !particle.destroyed;\n    }\n  }, {\n    key: \"loadOptions\",\n    value: function loadOptions(options) {\n      if (!options.destroy) {\n        options.destroy = new Destroy();\n      }\n\n      for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        sources[_key - 1] = arguments[_key];\n      }\n\n      for (var _i = 0, _sources = sources; _i < _sources.length; _i++) {\n        var source = _sources[_i];\n        options.destroy.load(source === null || source === void 0 ? void 0 : source.destroy);\n      }\n    }\n  }, {\n    key: \"particleDestroyed\",\n    value: function particleDestroyed(particle, override) {\n      if (override) {\n        return;\n      }\n\n      var destroyOptions = particle.options.destroy;\n\n      if (destroyOptions && destroyOptions.mode === \"split\") {\n        this.split(particle);\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function update(particle) {\n      if (!this.isEnabled(particle)) {\n        return;\n      }\n\n      var position = particle.getPosition(),\n          bounds = particle.destroyBounds;\n\n      if (!bounds) {\n        return;\n      }\n\n      if (bounds.bottom !== undefined && position.y >= bounds.bottom || bounds.left !== undefined && position.x <= bounds.left || bounds.right !== undefined && position.x >= bounds.right || bounds.top !== undefined && position.y <= bounds.top) {\n        particle.destroy();\n      }\n    }\n  }, {\n    key: \"addSplitParticle\",\n    value: function addSplitParticle(parent, splitParticlesOptions) {\n      var _a, _b, _c;\n\n      var destroyOptions = parent.options.destroy;\n\n      if (!destroyOptions) {\n        return;\n      }\n\n      var splitOptions = destroyOptions.split,\n          options = loadParticlesOptions(this.engine, this.container, parent.options),\n          factor = getValue(splitOptions.factor),\n          parentColor = parent.getFillColor();\n\n      if (splitOptions.color) {\n        options.color.load(splitOptions.color);\n      } else if (splitOptions.colorOffset && parentColor) {\n        options.color.load({\n          value: {\n            hsl: {\n              h: parentColor.h + getRangeValue((_a = splitOptions.colorOffset.h) !== null && _a !== void 0 ? _a : 0),\n              s: parentColor.s + getRangeValue((_b = splitOptions.colorOffset.s) !== null && _b !== void 0 ? _b : 0),\n              l: parentColor.l + getRangeValue((_c = splitOptions.colorOffset.l) !== null && _c !== void 0 ? _c : 0)\n            }\n          }\n        });\n      } else {\n        options.color.load({\n          value: {\n            hsl: parent.getFillColor()\n          }\n        });\n      }\n\n      options.move.load({\n        center: {\n          x: parent.position.x,\n          y: parent.position.y,\n          mode: \"precise\"\n        }\n      });\n\n      if (typeof options.size.value === \"number\") {\n        options.size.value /= factor;\n      } else {\n        options.size.value.min /= factor;\n        options.size.value.max /= factor;\n      }\n\n      options.load(splitParticlesOptions);\n      var offset = splitOptions.sizeOffset ? setRangeValue(-parent.size.value, parent.size.value) : 0,\n          position = {\n        x: parent.position.x + randomInRange(offset),\n        y: parent.position.y + randomInRange(offset)\n      };\n      return this.container.particles.addParticle(position, options, parent.group, function (particle) {\n        var _a;\n\n        if (particle.size.value < 0.5) {\n          return false;\n        }\n\n        particle.velocity.length = randomInRange(setRangeValue(parent.velocity.length, particle.velocity.length));\n        particle.splitCount = ((_a = parent.splitCount) !== null && _a !== void 0 ? _a : 0) + 1;\n        particle.unbreakable = true;\n        setTimeout(function () {\n          particle.unbreakable = false;\n        }, 500);\n        return true;\n      });\n    }\n  }, {\n    key: \"split\",\n    value: function split(particle) {\n      var destroyOptions = particle.options.destroy;\n\n      if (!destroyOptions) {\n        return;\n      }\n\n      var splitOptions = destroyOptions.split;\n\n      if (splitOptions.count >= 0 && (particle.splitCount === undefined || particle.splitCount++ > splitOptions.count)) {\n        return;\n      }\n\n      var rate = getValue(splitOptions.rate),\n          particlesSplitOptions = itemFromSingleOrMultiple(splitOptions.particles);\n\n      for (var i = 0; i < rate; i++) {\n        this.addSplitParticle(particle, particlesSplitOptions);\n      }\n    }\n  }]);\n\n  return DestroyUpdater;\n}();","map":{"version":3,"sources":["/Users/torea/Desktop/freelanceProject2/open-react-template/node_modules/tsparticles-updater-destroy/esm/DestroyUpdater.js"],"names":["getRangeValue","getValue","itemFromSingleOrMultiple","loadParticlesOptions","randomInRange","setRangeValue","Destroy","DestroyUpdater","engine","container","particle","particlesOptions","options","destroyOptions","destroy","splitCount","destroyBounds","bounds","bottom","canvas","size","height","left","width","right","top","destroyed","sources","source","load","override","mode","split","isEnabled","position","getPosition","undefined","y","x","parent","splitParticlesOptions","_a","_b","_c","splitOptions","factor","parentColor","getFillColor","color","colorOffset","value","hsl","h","s","l","move","center","min","max","offset","sizeOffset","particles","addParticle","group","velocity","length","unbreakable","setTimeout","count","rate","particlesSplitOptions","i","addSplitParticle"],"mappings":"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","sourcesContent":["import { getRangeValue, getValue, itemFromSingleOrMultiple, loadParticlesOptions, randomInRange, setRangeValue, } from \"tsparticles-engine\";\nimport { Destroy } from \"./Options/Classes/Destroy\";\nexport class DestroyUpdater {\n    constructor(engine, container) {\n        this.engine = engine;\n        this.container = container;\n    }\n    init(particle) {\n        const container = this.container, particlesOptions = particle.options, destroyOptions = particlesOptions.destroy;\n        if (!destroyOptions) {\n            return;\n        }\n        particle.splitCount = 0;\n        const destroyBounds = destroyOptions.bounds;\n        if (!particle.destroyBounds) {\n            particle.destroyBounds = {};\n        }\n        if (destroyBounds.bottom) {\n            particle.destroyBounds.bottom = (getRangeValue(destroyBounds.bottom) * container.canvas.size.height) / 100;\n        }\n        if (destroyBounds.left) {\n            particle.destroyBounds.left = (getRangeValue(destroyBounds.left) * container.canvas.size.width) / 100;\n        }\n        if (destroyBounds.right) {\n            particle.destroyBounds.right = (getRangeValue(destroyBounds.right) * container.canvas.size.width) / 100;\n        }\n        if (destroyBounds.top) {\n            particle.destroyBounds.top = (getRangeValue(destroyBounds.top) * container.canvas.size.height) / 100;\n        }\n    }\n    isEnabled(particle) {\n        return !particle.destroyed;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.destroy) {\n            options.destroy = new Destroy();\n        }\n        for (const source of sources) {\n            options.destroy.load(source === null || source === void 0 ? void 0 : source.destroy);\n        }\n    }\n    particleDestroyed(particle, override) {\n        if (override) {\n            return;\n        }\n        const destroyOptions = particle.options.destroy;\n        if (destroyOptions && destroyOptions.mode === \"split\") {\n            this.split(particle);\n        }\n    }\n    update(particle) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        const position = particle.getPosition(), bounds = particle.destroyBounds;\n        if (!bounds) {\n            return;\n        }\n        if ((bounds.bottom !== undefined && position.y >= bounds.bottom) ||\n            (bounds.left !== undefined && position.x <= bounds.left) ||\n            (bounds.right !== undefined && position.x >= bounds.right) ||\n            (bounds.top !== undefined && position.y <= bounds.top)) {\n            particle.destroy();\n        }\n    }\n    addSplitParticle(parent, splitParticlesOptions) {\n        var _a, _b, _c;\n        const destroyOptions = parent.options.destroy;\n        if (!destroyOptions) {\n            return;\n        }\n        const splitOptions = destroyOptions.split, options = loadParticlesOptions(this.engine, this.container, parent.options), factor = getValue(splitOptions.factor), parentColor = parent.getFillColor();\n        if (splitOptions.color) {\n            options.color.load(splitOptions.color);\n        }\n        else if (splitOptions.colorOffset && parentColor) {\n            options.color.load({\n                value: {\n                    hsl: {\n                        h: parentColor.h + getRangeValue((_a = splitOptions.colorOffset.h) !== null && _a !== void 0 ? _a : 0),\n                        s: parentColor.s + getRangeValue((_b = splitOptions.colorOffset.s) !== null && _b !== void 0 ? _b : 0),\n                        l: parentColor.l + getRangeValue((_c = splitOptions.colorOffset.l) !== null && _c !== void 0 ? _c : 0),\n                    },\n                },\n            });\n        }\n        else {\n            options.color.load({\n                value: {\n                    hsl: parent.getFillColor(),\n                },\n            });\n        }\n        options.move.load({\n            center: {\n                x: parent.position.x,\n                y: parent.position.y,\n                mode: \"precise\",\n            },\n        });\n        if (typeof options.size.value === \"number\") {\n            options.size.value /= factor;\n        }\n        else {\n            options.size.value.min /= factor;\n            options.size.value.max /= factor;\n        }\n        options.load(splitParticlesOptions);\n        const offset = splitOptions.sizeOffset ? setRangeValue(-parent.size.value, parent.size.value) : 0, position = {\n            x: parent.position.x + randomInRange(offset),\n            y: parent.position.y + randomInRange(offset),\n        };\n        return this.container.particles.addParticle(position, options, parent.group, (particle) => {\n            var _a;\n            if (particle.size.value < 0.5) {\n                return false;\n            }\n            particle.velocity.length = randomInRange(setRangeValue(parent.velocity.length, particle.velocity.length));\n            particle.splitCount = ((_a = parent.splitCount) !== null && _a !== void 0 ? _a : 0) + 1;\n            particle.unbreakable = true;\n            setTimeout(() => {\n                particle.unbreakable = false;\n            }, 500);\n            return true;\n        });\n    }\n    split(particle) {\n        const destroyOptions = particle.options.destroy;\n        if (!destroyOptions) {\n            return;\n        }\n        const splitOptions = destroyOptions.split;\n        if (splitOptions.count >= 0 &&\n            (particle.splitCount === undefined || particle.splitCount++ > splitOptions.count)) {\n            return;\n        }\n        const rate = getValue(splitOptions.rate), particlesSplitOptions = itemFromSingleOrMultiple(splitOptions.particles);\n        for (let i = 0; i < rate; i++) {\n            this.addSplitParticle(particle, particlesSplitOptions);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}