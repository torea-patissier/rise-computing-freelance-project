{"ast":null,"code":"import { ExternalInteractorBase, drawLine, getDistance, getLinkColor, getLinkRandomColor, getStyleFromRgb, isInArray, mouseMoveEvent } from \"tsparticles-engine\";\nimport { Grab } from \"./Options/Classes/Grab\";\nexport function drawGrabLine(context, width, begin, end, colorLine, opacity) {\n  drawLine(context, begin, end);\n  context.strokeStyle = getStyleFromRgb(colorLine, opacity);\n  context.lineWidth = width;\n  context.stroke();\n}\n\nfunction drawGrab(container, particle, lineColor, opacity, mousePos) {\n  container.canvas.draw(ctx => {\n    var _a;\n\n    const beginPos = particle.getPosition();\n    drawGrabLine(ctx, (_a = particle.retina.linksWidth) !== null && _a !== void 0 ? _a : 0, beginPos, mousePos, lineColor, opacity);\n  });\n}\n\nexport class Grabber extends ExternalInteractorBase {\n  constructor(container) {\n    super(container);\n  }\n\n  clear() {}\n\n  init() {\n    const container = this.container,\n          grab = container.actualOptions.interactivity.modes.grab;\n\n    if (!grab) {\n      return;\n    }\n\n    container.retina.grabModeDistance = grab.distance * container.retina.pixelRatio;\n  }\n\n  async interact() {\n    var _a, _b;\n\n    const container = this.container,\n          options = container.actualOptions,\n          interactivity = options.interactivity;\n\n    if (!interactivity.modes.grab || !interactivity.events.onHover.enable || container.interactivity.status !== mouseMoveEvent) {\n      return;\n    }\n\n    const mousePos = container.interactivity.mouse.position;\n\n    if (!mousePos) {\n      return;\n    }\n\n    const distance = container.retina.grabModeDistance;\n\n    if (!distance || distance < 0) {\n      return;\n    }\n\n    const query = container.particles.quadTree.queryCircle(mousePos, distance, p => this.isEnabled(p));\n\n    for (const particle of query) {\n      const pos = particle.getPosition(),\n            pointDistance = getDistance(pos, mousePos);\n\n      if (pointDistance > distance) {\n        continue;\n      }\n\n      const grabLineOptions = interactivity.modes.grab.links,\n            lineOpacity = grabLineOptions.opacity,\n            opacityLine = lineOpacity - pointDistance * lineOpacity / distance;\n\n      if (opacityLine <= 0) {\n        continue;\n      }\n\n      const optColor = (_a = grabLineOptions.color) !== null && _a !== void 0 ? _a : (_b = particle.options.links) === null || _b === void 0 ? void 0 : _b.color;\n\n      if (!container.particles.grabLineColor && optColor) {\n        const linksOptions = interactivity.modes.grab.links;\n        container.particles.grabLineColor = getLinkRandomColor(optColor, linksOptions.blink, linksOptions.consent);\n      }\n\n      const colorLine = getLinkColor(particle, undefined, container.particles.grabLineColor);\n\n      if (!colorLine) {\n        return;\n      }\n\n      drawGrab(container, particle, colorLine, opacityLine, mousePos);\n    }\n  }\n\n  isEnabled(particle) {\n    var _a;\n\n    const container = this.container,\n          mouse = container.interactivity.mouse,\n          events = ((_a = particle === null || particle === void 0 ? void 0 : particle.interactivity) !== null && _a !== void 0 ? _a : container.actualOptions.interactivity).events;\n    return events.onHover.enable && !!mouse.position && isInArray(\"grab\", events.onHover.mode);\n  }\n\n  loadModeOptions(options, ...sources) {\n    if (!options.grab) {\n      options.grab = new Grab();\n    }\n\n    for (const source of sources) {\n      options.grab.load(source === null || source === void 0 ? void 0 : source.grab);\n    }\n  }\n\n  reset() {}\n\n}","map":{"version":3,"sources":["/Users/torea/Desktop/freelanceProject2/rise-consulting/node_modules/tsparticles-interaction-external-grab/esm/Grabber.js"],"names":["ExternalInteractorBase","drawLine","getDistance","getLinkColor","getLinkRandomColor","getStyleFromRgb","isInArray","mouseMoveEvent","Grab","drawGrabLine","context","width","begin","end","colorLine","opacity","strokeStyle","lineWidth","stroke","drawGrab","container","particle","lineColor","mousePos","canvas","draw","ctx","_a","beginPos","getPosition","retina","linksWidth","Grabber","constructor","clear","init","grab","actualOptions","interactivity","modes","grabModeDistance","distance","pixelRatio","interact","_b","options","events","onHover","enable","status","mouse","position","query","particles","quadTree","queryCircle","p","isEnabled","pos","pointDistance","grabLineOptions","links","lineOpacity","opacityLine","optColor","color","grabLineColor","linksOptions","blink","consent","undefined","mode","loadModeOptions","sources","source","load","reset"],"mappings":"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","sourcesContent":["import { ExternalInteractorBase, drawLine, getDistance, getLinkColor, getLinkRandomColor, getStyleFromRgb, isInArray, mouseMoveEvent, } from \"tsparticles-engine\";\nimport { Grab } from \"./Options/Classes/Grab\";\nexport function drawGrabLine(context, width, begin, end, colorLine, opacity) {\n    drawLine(context, begin, end);\n    context.strokeStyle = getStyleFromRgb(colorLine, opacity);\n    context.lineWidth = width;\n    context.stroke();\n}\nfunction drawGrab(container, particle, lineColor, opacity, mousePos) {\n    container.canvas.draw((ctx) => {\n        var _a;\n        const beginPos = particle.getPosition();\n        drawGrabLine(ctx, (_a = particle.retina.linksWidth) !== null && _a !== void 0 ? _a : 0, beginPos, mousePos, lineColor, opacity);\n    });\n}\nexport class Grabber extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    clear() {\n    }\n    init() {\n        const container = this.container, grab = container.actualOptions.interactivity.modes.grab;\n        if (!grab) {\n            return;\n        }\n        container.retina.grabModeDistance = grab.distance * container.retina.pixelRatio;\n    }\n    async interact() {\n        var _a, _b;\n        const container = this.container, options = container.actualOptions, interactivity = options.interactivity;\n        if (!interactivity.modes.grab ||\n            !interactivity.events.onHover.enable ||\n            container.interactivity.status !== mouseMoveEvent) {\n            return;\n        }\n        const mousePos = container.interactivity.mouse.position;\n        if (!mousePos) {\n            return;\n        }\n        const distance = container.retina.grabModeDistance;\n        if (!distance || distance < 0) {\n            return;\n        }\n        const query = container.particles.quadTree.queryCircle(mousePos, distance, (p) => this.isEnabled(p));\n        for (const particle of query) {\n            const pos = particle.getPosition(), pointDistance = getDistance(pos, mousePos);\n            if (pointDistance > distance) {\n                continue;\n            }\n            const grabLineOptions = interactivity.modes.grab.links, lineOpacity = grabLineOptions.opacity, opacityLine = lineOpacity - (pointDistance * lineOpacity) / distance;\n            if (opacityLine <= 0) {\n                continue;\n            }\n            const optColor = (_a = grabLineOptions.color) !== null && _a !== void 0 ? _a : (_b = particle.options.links) === null || _b === void 0 ? void 0 : _b.color;\n            if (!container.particles.grabLineColor && optColor) {\n                const linksOptions = interactivity.modes.grab.links;\n                container.particles.grabLineColor = getLinkRandomColor(optColor, linksOptions.blink, linksOptions.consent);\n            }\n            const colorLine = getLinkColor(particle, undefined, container.particles.grabLineColor);\n            if (!colorLine) {\n                return;\n            }\n            drawGrab(container, particle, colorLine, opacityLine, mousePos);\n        }\n    }\n    isEnabled(particle) {\n        var _a;\n        const container = this.container, mouse = container.interactivity.mouse, events = ((_a = particle === null || particle === void 0 ? void 0 : particle.interactivity) !== null && _a !== void 0 ? _a : container.actualOptions.interactivity).events;\n        return events.onHover.enable && !!mouse.position && isInArray(\"grab\", events.onHover.mode);\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.grab) {\n            options.grab = new Grab();\n        }\n        for (const source of sources) {\n            options.grab.load(source === null || source === void 0 ? void 0 : source.grab);\n        }\n    }\n    reset() {\n    }\n}\n"]},"metadata":{},"sourceType":"module"}