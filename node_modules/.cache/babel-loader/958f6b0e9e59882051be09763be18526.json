{"ast":null,"code":"import { MoveAngle } from \"./MoveAngle\";\nimport { MoveAttract } from \"./MoveAttract\";\nimport { MoveCenter } from \"./MoveCenter\";\nimport { MoveGravity } from \"./MoveGravity\";\nimport { MovePath } from \"./Path/MovePath\";\nimport { MoveTrail } from \"./MoveTrail\";\nimport { OutModes } from \"./OutModes\";\nimport { Spin } from \"./Spin\";\nimport { setRangeValue } from \"../../../../Utils/NumberUtils\";\nexport class Move {\n  constructor() {\n    this.angle = new MoveAngle();\n    this.attract = new MoveAttract();\n    this.center = new MoveCenter();\n    this.decay = 0;\n    this.distance = {};\n    this.direction = \"none\";\n    this.drift = 0;\n    this.enable = false;\n    this.gravity = new MoveGravity();\n    this.path = new MovePath();\n    this.outModes = new OutModes();\n    this.random = false;\n    this.size = false;\n    this.speed = 2;\n    this.spin = new Spin();\n    this.straight = false;\n    this.trail = new MoveTrail();\n    this.vibrate = false;\n    this.warp = false;\n  }\n\n  get bounce() {\n    return this.collisions;\n  }\n\n  set bounce(value) {\n    this.collisions = value;\n  }\n\n  get collisions() {\n    return false;\n  }\n\n  set collisions(_) {}\n\n  get noise() {\n    return this.path;\n  }\n\n  set noise(value) {\n    this.path = value;\n  }\n\n  get outMode() {\n    return this.outModes.default;\n  }\n\n  set outMode(value) {\n    this.outModes.default = value;\n  }\n\n  get out_mode() {\n    return this.outMode;\n  }\n\n  set out_mode(value) {\n    this.outMode = value;\n  }\n\n  load(data) {\n    var _a, _b, _c;\n\n    if (!data) {\n      return;\n    }\n\n    this.angle.load(typeof data.angle === \"number\" ? {\n      value: data.angle\n    } : data.angle);\n    this.attract.load(data.attract);\n    this.center.load(data.center);\n\n    if (data.decay !== undefined) {\n      this.decay = setRangeValue(data.decay);\n    }\n\n    if (data.direction !== undefined) {\n      this.direction = data.direction;\n    }\n\n    if (data.distance !== undefined) {\n      this.distance = typeof data.distance === \"number\" ? {\n        horizontal: data.distance,\n        vertical: data.distance\n      } : Object.assign({}, data.distance);\n    }\n\n    if (data.drift !== undefined) {\n      this.drift = setRangeValue(data.drift);\n    }\n\n    if (data.enable !== undefined) {\n      this.enable = data.enable;\n    }\n\n    this.gravity.load(data.gravity);\n    const outModes = (_b = (_a = data.outModes) !== null && _a !== void 0 ? _a : data.outMode) !== null && _b !== void 0 ? _b : data.out_mode;\n\n    if (outModes !== undefined) {\n      if (typeof outModes === \"object\") {\n        this.outModes.load(outModes);\n      } else {\n        this.outModes.load({\n          default: outModes\n        });\n      }\n    }\n\n    this.path.load((_c = data.path) !== null && _c !== void 0 ? _c : data.noise);\n\n    if (data.random !== undefined) {\n      this.random = data.random;\n    }\n\n    if (data.size !== undefined) {\n      this.size = data.size;\n    }\n\n    if (data.speed !== undefined) {\n      this.speed = setRangeValue(data.speed);\n    }\n\n    this.spin.load(data.spin);\n\n    if (data.straight !== undefined) {\n      this.straight = data.straight;\n    }\n\n    this.trail.load(data.trail);\n\n    if (data.vibrate !== undefined) {\n      this.vibrate = data.vibrate;\n    }\n\n    if (data.warp !== undefined) {\n      this.warp = data.warp;\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/torea/Desktop/freelanceProject2/rise-consulting/node_modules/tsparticles-engine/esm/Options/Classes/Particles/Move/Move.js"],"names":["MoveAngle","MoveAttract","MoveCenter","MoveGravity","MovePath","MoveTrail","OutModes","Spin","setRangeValue","Move","constructor","angle","attract","center","decay","distance","direction","drift","enable","gravity","path","outModes","random","size","speed","spin","straight","trail","vibrate","warp","bounce","collisions","value","_","noise","outMode","default","out_mode","load","data","_a","_b","_c","undefined","horizontal","vertical","Object","assign"],"mappings":"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","sourcesContent":["import { MoveAngle } from \"./MoveAngle\";\nimport { MoveAttract } from \"./MoveAttract\";\nimport { MoveCenter } from \"./MoveCenter\";\nimport { MoveGravity } from \"./MoveGravity\";\nimport { MovePath } from \"./Path/MovePath\";\nimport { MoveTrail } from \"./MoveTrail\";\nimport { OutModes } from \"./OutModes\";\nimport { Spin } from \"./Spin\";\nimport { setRangeValue } from \"../../../../Utils/NumberUtils\";\nexport class Move {\n    constructor() {\n        this.angle = new MoveAngle();\n        this.attract = new MoveAttract();\n        this.center = new MoveCenter();\n        this.decay = 0;\n        this.distance = {};\n        this.direction = \"none\";\n        this.drift = 0;\n        this.enable = false;\n        this.gravity = new MoveGravity();\n        this.path = new MovePath();\n        this.outModes = new OutModes();\n        this.random = false;\n        this.size = false;\n        this.speed = 2;\n        this.spin = new Spin();\n        this.straight = false;\n        this.trail = new MoveTrail();\n        this.vibrate = false;\n        this.warp = false;\n    }\n    get bounce() {\n        return this.collisions;\n    }\n    set bounce(value) {\n        this.collisions = value;\n    }\n    get collisions() {\n        return false;\n    }\n    set collisions(_) {\n    }\n    get noise() {\n        return this.path;\n    }\n    set noise(value) {\n        this.path = value;\n    }\n    get outMode() {\n        return this.outModes.default;\n    }\n    set outMode(value) {\n        this.outModes.default = value;\n    }\n    get out_mode() {\n        return this.outMode;\n    }\n    set out_mode(value) {\n        this.outMode = value;\n    }\n    load(data) {\n        var _a, _b, _c;\n        if (!data) {\n            return;\n        }\n        this.angle.load(typeof data.angle === \"number\" ? { value: data.angle } : data.angle);\n        this.attract.load(data.attract);\n        this.center.load(data.center);\n        if (data.decay !== undefined) {\n            this.decay = setRangeValue(data.decay);\n        }\n        if (data.direction !== undefined) {\n            this.direction = data.direction;\n        }\n        if (data.distance !== undefined) {\n            this.distance =\n                typeof data.distance === \"number\"\n                    ? {\n                        horizontal: data.distance,\n                        vertical: data.distance,\n                    }\n                    : Object.assign({}, data.distance);\n        }\n        if (data.drift !== undefined) {\n            this.drift = setRangeValue(data.drift);\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        this.gravity.load(data.gravity);\n        const outModes = (_b = (_a = data.outModes) !== null && _a !== void 0 ? _a : data.outMode) !== null && _b !== void 0 ? _b : data.out_mode;\n        if (outModes !== undefined) {\n            if (typeof outModes === \"object\") {\n                this.outModes.load(outModes);\n            }\n            else {\n                this.outModes.load({\n                    default: outModes,\n                });\n            }\n        }\n        this.path.load((_c = data.path) !== null && _c !== void 0 ? _c : data.noise);\n        if (data.random !== undefined) {\n            this.random = data.random;\n        }\n        if (data.size !== undefined) {\n            this.size = data.size;\n        }\n        if (data.speed !== undefined) {\n            this.speed = setRangeValue(data.speed);\n        }\n        this.spin.load(data.spin);\n        if (data.straight !== undefined) {\n            this.straight = data.straight;\n        }\n        this.trail.load(data.trail);\n        if (data.vibrate !== undefined) {\n            this.vibrate = data.vibrate;\n        }\n        if (data.warp !== undefined) {\n            this.warp = data.warp;\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}