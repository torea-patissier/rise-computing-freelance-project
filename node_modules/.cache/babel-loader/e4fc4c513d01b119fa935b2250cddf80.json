{"ast":null,"code":"import { getRandom, getRangeValue } from \"tsparticles-engine\";\nimport { Tilt } from \"./Options/Classes/Tilt\";\n\nfunction updateTilt(particle, delta) {\n  var _a, _b;\n\n  if (!particle.tilt || !particle.options.tilt) {\n    return;\n  }\n\n  const tilt = particle.options.tilt,\n        tiltAnimation = tilt.animation,\n        speed = ((_a = particle.tilt.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor,\n        max = 2 * Math.PI,\n        decay = (_b = particle.tilt.decay) !== null && _b !== void 0 ? _b : 1;\n\n  if (!tiltAnimation.enable) {\n    return;\n  }\n\n  switch (particle.tilt.status) {\n    case \"increasing\":\n      particle.tilt.value += speed;\n\n      if (particle.tilt.value > max) {\n        particle.tilt.value -= max;\n      }\n\n      break;\n\n    case \"decreasing\":\n    default:\n      particle.tilt.value -= speed;\n\n      if (particle.tilt.value < 0) {\n        particle.tilt.value += max;\n      }\n\n      break;\n  }\n\n  if (particle.tilt.velocity && decay !== 1) {\n    particle.tilt.velocity *= decay;\n  }\n}\n\nexport class TiltUpdater {\n  constructor(container) {\n    this.container = container;\n  }\n\n  getTransformValues(particle) {\n    var _a;\n\n    const tilt = ((_a = particle.tilt) === null || _a === void 0 ? void 0 : _a.enable) && particle.tilt;\n    return {\n      b: tilt ? Math.cos(tilt.value) * tilt.cosDirection : undefined,\n      c: tilt ? Math.sin(tilt.value) * tilt.sinDirection : undefined\n    };\n  }\n\n  init(particle) {\n    var _a;\n\n    const tiltOptions = particle.options.tilt;\n\n    if (!tiltOptions) {\n      return;\n    }\n\n    particle.tilt = {\n      enable: tiltOptions.enable,\n      value: getRangeValue(tiltOptions.value) * Math.PI / 180,\n      sinDirection: getRandom() >= 0.5 ? 1 : -1,\n      cosDirection: getRandom() >= 0.5 ? 1 : -1\n    };\n    let tiltDirection = tiltOptions.direction;\n\n    if (tiltDirection === \"random\") {\n      const index = Math.floor(getRandom() * 2);\n      tiltDirection = index > 0 ? \"counter-clockwise\" : \"clockwise\";\n    }\n\n    switch (tiltDirection) {\n      case \"counter-clockwise\":\n      case \"counterClockwise\":\n        particle.tilt.status = \"decreasing\";\n        break;\n\n      case \"clockwise\":\n        particle.tilt.status = \"increasing\";\n        break;\n    }\n\n    const tiltAnimation = (_a = particle.options.tilt) === null || _a === void 0 ? void 0 : _a.animation;\n\n    if (tiltAnimation === null || tiltAnimation === void 0 ? void 0 : tiltAnimation.enable) {\n      particle.tilt.decay = 1 - getRangeValue(tiltAnimation.decay);\n      particle.tilt.velocity = getRangeValue(tiltAnimation.speed) / 360 * this.container.retina.reduceFactor;\n\n      if (!tiltAnimation.sync) {\n        particle.tilt.velocity *= getRandom();\n      }\n    }\n  }\n\n  isEnabled(particle) {\n    var _a;\n\n    const tiltAnimation = (_a = particle.options.tilt) === null || _a === void 0 ? void 0 : _a.animation;\n    return !particle.destroyed && !particle.spawning && !!(tiltAnimation === null || tiltAnimation === void 0 ? void 0 : tiltAnimation.enable);\n  }\n\n  loadOptions(options, ...sources) {\n    if (!options.tilt) {\n      options.tilt = new Tilt();\n    }\n\n    for (const source of sources) {\n      options.tilt.load(source === null || source === void 0 ? void 0 : source.tilt);\n    }\n  }\n\n  update(particle, delta) {\n    if (!this.isEnabled(particle)) {\n      return;\n    }\n\n    updateTilt(particle, delta);\n  }\n\n}","map":{"version":3,"sources":["/Users/torea/Desktop/freelanceProject2/rise-consulting/node_modules/tsparticles-updater-tilt/esm/TiltUpdater.js"],"names":["getRandom","getRangeValue","Tilt","updateTilt","particle","delta","_a","_b","tilt","options","tiltAnimation","animation","speed","velocity","factor","max","Math","PI","decay","enable","status","value","TiltUpdater","constructor","container","getTransformValues","b","cos","cosDirection","undefined","c","sin","sinDirection","init","tiltOptions","tiltDirection","direction","index","floor","retina","reduceFactor","sync","isEnabled","destroyed","spawning","loadOptions","sources","source","load","update"],"mappings":"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","sourcesContent":["import { getRandom, getRangeValue } from \"tsparticles-engine\";\nimport { Tilt } from \"./Options/Classes/Tilt\";\nfunction updateTilt(particle, delta) {\n    var _a, _b;\n    if (!particle.tilt || !particle.options.tilt) {\n        return;\n    }\n    const tilt = particle.options.tilt, tiltAnimation = tilt.animation, speed = ((_a = particle.tilt.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor, max = 2 * Math.PI, decay = (_b = particle.tilt.decay) !== null && _b !== void 0 ? _b : 1;\n    if (!tiltAnimation.enable) {\n        return;\n    }\n    switch (particle.tilt.status) {\n        case \"increasing\":\n            particle.tilt.value += speed;\n            if (particle.tilt.value > max) {\n                particle.tilt.value -= max;\n            }\n            break;\n        case \"decreasing\":\n        default:\n            particle.tilt.value -= speed;\n            if (particle.tilt.value < 0) {\n                particle.tilt.value += max;\n            }\n            break;\n    }\n    if (particle.tilt.velocity && decay !== 1) {\n        particle.tilt.velocity *= decay;\n    }\n}\nexport class TiltUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    getTransformValues(particle) {\n        var _a;\n        const tilt = ((_a = particle.tilt) === null || _a === void 0 ? void 0 : _a.enable) && particle.tilt;\n        return {\n            b: tilt ? Math.cos(tilt.value) * tilt.cosDirection : undefined,\n            c: tilt ? Math.sin(tilt.value) * tilt.sinDirection : undefined,\n        };\n    }\n    init(particle) {\n        var _a;\n        const tiltOptions = particle.options.tilt;\n        if (!tiltOptions) {\n            return;\n        }\n        particle.tilt = {\n            enable: tiltOptions.enable,\n            value: (getRangeValue(tiltOptions.value) * Math.PI) / 180,\n            sinDirection: getRandom() >= 0.5 ? 1 : -1,\n            cosDirection: getRandom() >= 0.5 ? 1 : -1,\n        };\n        let tiltDirection = tiltOptions.direction;\n        if (tiltDirection === \"random\") {\n            const index = Math.floor(getRandom() * 2);\n            tiltDirection = index > 0 ? \"counter-clockwise\" : \"clockwise\";\n        }\n        switch (tiltDirection) {\n            case \"counter-clockwise\":\n            case \"counterClockwise\":\n                particle.tilt.status = \"decreasing\";\n                break;\n            case \"clockwise\":\n                particle.tilt.status = \"increasing\";\n                break;\n        }\n        const tiltAnimation = (_a = particle.options.tilt) === null || _a === void 0 ? void 0 : _a.animation;\n        if (tiltAnimation === null || tiltAnimation === void 0 ? void 0 : tiltAnimation.enable) {\n            particle.tilt.decay = 1 - getRangeValue(tiltAnimation.decay);\n            particle.tilt.velocity = (getRangeValue(tiltAnimation.speed) / 360) * this.container.retina.reduceFactor;\n            if (!tiltAnimation.sync) {\n                particle.tilt.velocity *= getRandom();\n            }\n        }\n    }\n    isEnabled(particle) {\n        var _a;\n        const tiltAnimation = (_a = particle.options.tilt) === null || _a === void 0 ? void 0 : _a.animation;\n        return !particle.destroyed && !particle.spawning && !!(tiltAnimation === null || tiltAnimation === void 0 ? void 0 : tiltAnimation.enable);\n    }\n    loadOptions(options, ...sources) {\n        if (!options.tilt) {\n            options.tilt = new Tilt();\n        }\n        for (const source of sources) {\n            options.tilt.load(source === null || source === void 0 ? void 0 : source.tilt);\n        }\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateTilt(particle, delta);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}