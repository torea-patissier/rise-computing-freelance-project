{"ast":null,"code":"import _slicedToArray from \"/Users/torea/Desktop/freelanceProject2/open-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _createForOfIteratorHelper from \"/Users/torea/Desktop/freelanceProject2/open-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"/Users/torea/Desktop/freelanceProject2/open-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/torea/Desktop/freelanceProject2/open-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { calculateBounds } from \"tsparticles-engine\";\nimport { bounceHorizontal, bounceVertical } from \"./Utils\";\nexport var BounceOutMode = /*#__PURE__*/function () {\n  function BounceOutMode(container) {\n    _classCallCheck(this, BounceOutMode);\n\n    this.container = container;\n    this.modes = [\"bounce\", \"bounce-vertical\", \"bounce-horizontal\", \"bounceVertical\", \"bounceHorizontal\", \"split\"];\n  }\n\n  _createClass(BounceOutMode, [{\n    key: \"update\",\n    value: function update(particle, direction, delta, outMode) {\n      if (!this.modes.includes(outMode)) {\n        return;\n      }\n\n      var container = this.container;\n      var handled = false;\n\n      var _iterator = _createForOfIteratorHelper(container.plugins),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              plugin = _step$value[1];\n\n          if (plugin.particleBounce !== undefined) {\n            handled = plugin.particleBounce(particle, delta, direction);\n          }\n\n          if (handled) {\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (handled) {\n        return;\n      }\n\n      var pos = particle.getPosition(),\n          offset = particle.offset,\n          size = particle.getRadius(),\n          bounds = calculateBounds(pos, size),\n          canvasSize = container.canvas.size;\n      bounceHorizontal({\n        particle: particle,\n        outMode: outMode,\n        direction: direction,\n        bounds: bounds,\n        canvasSize: canvasSize,\n        offset: offset,\n        size: size\n      });\n      bounceVertical({\n        particle: particle,\n        outMode: outMode,\n        direction: direction,\n        bounds: bounds,\n        canvasSize: canvasSize,\n        offset: offset,\n        size: size\n      });\n    }\n  }]);\n\n  return BounceOutMode;\n}();","map":{"version":3,"sources":["/Users/torea/Desktop/freelanceProject2/open-react-template/node_modules/tsparticles-updater-out-modes/esm/BounceOutMode.js"],"names":["calculateBounds","bounceHorizontal","bounceVertical","BounceOutMode","container","modes","particle","direction","delta","outMode","includes","handled","plugins","plugin","particleBounce","undefined","pos","getPosition","offset","size","getRadius","bounds","canvasSize","canvas"],"mappings":";;;;AAAA,SAASA,eAAT,QAAgC,oBAAhC;AACA,SAASC,gBAAT,EAA2BC,cAA3B,QAAiD,SAAjD;AACA,WAAaC,aAAb;AACI,yBAAYC,SAAZ,EAAuB;AAAA;;AACnB,SAAKA,SAAL,GAAiBA,SAAjB;AACA,SAAKC,KAAL,GAAa,CACT,QADS,EAET,iBAFS,EAGT,mBAHS,EAIT,gBAJS,EAKT,kBALS,EAMT,OANS,CAAb;AAQH;;AAXL;AAAA;AAAA,2BAYWC,QAZX,EAYqBC,SAZrB,EAYgCC,KAZhC,EAYuCC,OAZvC,EAYgD;AACxC,UAAI,CAAC,KAAKJ,KAAL,CAAWK,QAAX,CAAoBD,OAApB,CAAL,EAAmC;AAC/B;AACH;;AACD,UAAML,SAAS,GAAG,KAAKA,SAAvB;AACA,UAAIO,OAAO,GAAG,KAAd;;AALwC,iDAMfP,SAAS,CAACQ,OANK;AAAA;;AAAA;AAMxC,4DAA4C;AAAA;AAAA,cAA9BC,MAA8B;;AACxC,cAAIA,MAAM,CAACC,cAAP,KAA0BC,SAA9B,EAAyC;AACrCJ,YAAAA,OAAO,GAAGE,MAAM,CAACC,cAAP,CAAsBR,QAAtB,EAAgCE,KAAhC,EAAuCD,SAAvC,CAAV;AACH;;AACD,cAAII,OAAJ,EAAa;AACT;AACH;AACJ;AAbuC;AAAA;AAAA;AAAA;AAAA;;AAcxC,UAAIA,OAAJ,EAAa;AACT;AACH;;AACD,UAAMK,GAAG,GAAGV,QAAQ,CAACW,WAAT,EAAZ;AAAA,UAAoCC,MAAM,GAAGZ,QAAQ,CAACY,MAAtD;AAAA,UAA8DC,IAAI,GAAGb,QAAQ,CAACc,SAAT,EAArE;AAAA,UAA2FC,MAAM,GAAGrB,eAAe,CAACgB,GAAD,EAAMG,IAAN,CAAnH;AAAA,UAAgIG,UAAU,GAAGlB,SAAS,CAACmB,MAAV,CAAiBJ,IAA9J;AACAlB,MAAAA,gBAAgB,CAAC;AAAEK,QAAAA,QAAQ,EAARA,QAAF;AAAYG,QAAAA,OAAO,EAAPA,OAAZ;AAAqBF,QAAAA,SAAS,EAATA,SAArB;AAAgCc,QAAAA,MAAM,EAANA,MAAhC;AAAwCC,QAAAA,UAAU,EAAVA,UAAxC;AAAoDJ,QAAAA,MAAM,EAANA,MAApD;AAA4DC,QAAAA,IAAI,EAAJA;AAA5D,OAAD,CAAhB;AACAjB,MAAAA,cAAc,CAAC;AAAEI,QAAAA,QAAQ,EAARA,QAAF;AAAYG,QAAAA,OAAO,EAAPA,OAAZ;AAAqBF,QAAAA,SAAS,EAATA,SAArB;AAAgCc,QAAAA,MAAM,EAANA,MAAhC;AAAwCC,QAAAA,UAAU,EAAVA,UAAxC;AAAoDJ,QAAAA,MAAM,EAANA,MAApD;AAA4DC,QAAAA,IAAI,EAAJA;AAA5D,OAAD,CAAd;AACH;AAhCL;;AAAA;AAAA","sourcesContent":["import { calculateBounds } from \"tsparticles-engine\";\nimport { bounceHorizontal, bounceVertical } from \"./Utils\";\nexport class BounceOutMode {\n    constructor(container) {\n        this.container = container;\n        this.modes = [\n            \"bounce\",\n            \"bounce-vertical\",\n            \"bounce-horizontal\",\n            \"bounceVertical\",\n            \"bounceHorizontal\",\n            \"split\",\n        ];\n    }\n    update(particle, direction, delta, outMode) {\n        if (!this.modes.includes(outMode)) {\n            return;\n        }\n        const container = this.container;\n        let handled = false;\n        for (const [, plugin] of container.plugins) {\n            if (plugin.particleBounce !== undefined) {\n                handled = plugin.particleBounce(particle, delta, direction);\n            }\n            if (handled) {\n                break;\n            }\n        }\n        if (handled) {\n            return;\n        }\n        const pos = particle.getPosition(), offset = particle.offset, size = particle.getRadius(), bounds = calculateBounds(pos, size), canvasSize = container.canvas.size;\n        bounceHorizontal({ particle, outMode, direction, bounds, canvasSize, offset, size });\n        bounceVertical({ particle, outMode, direction, bounds, canvasSize, offset, size });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}