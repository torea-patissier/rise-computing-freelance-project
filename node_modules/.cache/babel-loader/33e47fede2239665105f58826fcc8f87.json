{"ast":null,"code":"import _classCallCheck from \"/Users/torea/Desktop/freelanceProject2/open-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/torea/Desktop/freelanceProject2/open-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { getRangeValue } from \"tsparticles-engine\";\nexport var PolygonDrawerBase = /*#__PURE__*/function () {\n  function PolygonDrawerBase() {\n    _classCallCheck(this, PolygonDrawerBase);\n  }\n\n  _createClass(PolygonDrawerBase, [{\n    key: \"draw\",\n    value: function draw(context, particle, radius) {\n      var start = this.getCenter(particle, radius),\n          side = this.getSidesData(particle, radius),\n          sideCount = side.count.numerator * side.count.denominator,\n          decimalSides = side.count.numerator / side.count.denominator,\n          interiorAngleDegrees = 180 * (decimalSides - 2) / decimalSides,\n          interiorAngle = Math.PI - Math.PI * interiorAngleDegrees / 180;\n\n      if (!context) {\n        return;\n      }\n\n      context.beginPath();\n      context.translate(start.x, start.y);\n      context.moveTo(0, 0);\n\n      for (var i = 0; i < sideCount; i++) {\n        context.lineTo(side.length, 0);\n        context.translate(side.length, 0);\n        context.rotate(interiorAngle);\n      }\n    }\n  }, {\n    key: \"getSidesCount\",\n    value: function getSidesCount(particle) {\n      var _a, _b;\n\n      var polygon = particle.shapeData,\n          sides = Math.round(getRangeValue((_b = (_a = polygon === null || polygon === void 0 ? void 0 : polygon.sides) !== null && _a !== void 0 ? _a : polygon === null || polygon === void 0 ? void 0 : polygon.nb_sides) !== null && _b !== void 0 ? _b : 5));\n      return sides;\n    }\n  }]);\n\n  return PolygonDrawerBase;\n}();","map":{"version":3,"sources":["/Users/torea/Desktop/freelanceProject2/open-react-template/node_modules/tsparticles-shape-polygon/esm/PolygonDrawerBase.js"],"names":["getRangeValue","PolygonDrawerBase","context","particle","radius","start","getCenter","side","getSidesData","sideCount","count","numerator","denominator","decimalSides","interiorAngleDegrees","interiorAngle","Math","PI","beginPath","translate","x","y","moveTo","i","lineTo","length","rotate","_a","_b","polygon","shapeData","sides","round","nb_sides"],"mappings":";;AAAA,SAASA,aAAT,QAA8B,oBAA9B;AACA,WAAaC,iBAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,yBACSC,OADT,EACkBC,QADlB,EAC4BC,MAD5B,EACoC;AAC5B,UAAMC,KAAK,GAAG,KAAKC,SAAL,CAAeH,QAAf,EAAyBC,MAAzB,CAAd;AAAA,UAAgDG,IAAI,GAAG,KAAKC,YAAL,CAAkBL,QAAlB,EAA4BC,MAA5B,CAAvD;AAAA,UAA4FK,SAAS,GAAGF,IAAI,CAACG,KAAL,CAAWC,SAAX,GAAuBJ,IAAI,CAACG,KAAL,CAAWE,WAA1I;AAAA,UAAuJC,YAAY,GAAGN,IAAI,CAACG,KAAL,CAAWC,SAAX,GAAuBJ,IAAI,CAACG,KAAL,CAAWE,WAAxM;AAAA,UAAqNE,oBAAoB,GAAI,OAAOD,YAAY,GAAG,CAAtB,CAAD,GAA6BA,YAAzQ;AAAA,UAAuRE,aAAa,GAAGC,IAAI,CAACC,EAAL,GAAWD,IAAI,CAACC,EAAL,GAAUH,oBAAX,GAAmC,GAApV;;AACA,UAAI,CAACZ,OAAL,EAAc;AACV;AACH;;AACDA,MAAAA,OAAO,CAACgB,SAAR;AACAhB,MAAAA,OAAO,CAACiB,SAAR,CAAkBd,KAAK,CAACe,CAAxB,EAA2Bf,KAAK,CAACgB,CAAjC;AACAnB,MAAAA,OAAO,CAACoB,MAAR,CAAe,CAAf,EAAkB,CAAlB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGd,SAApB,EAA+Bc,CAAC,EAAhC,EAAoC;AAChCrB,QAAAA,OAAO,CAACsB,MAAR,CAAejB,IAAI,CAACkB,MAApB,EAA4B,CAA5B;AACAvB,QAAAA,OAAO,CAACiB,SAAR,CAAkBZ,IAAI,CAACkB,MAAvB,EAA+B,CAA/B;AACAvB,QAAAA,OAAO,CAACwB,MAAR,CAAeX,aAAf;AACH;AACJ;AAdL;AAAA;AAAA,kCAekBZ,QAflB,EAe4B;AACpB,UAAIwB,EAAJ,EAAQC,EAAR;;AACA,UAAMC,OAAO,GAAG1B,QAAQ,CAAC2B,SAAzB;AAAA,UAAoCC,KAAK,GAAGf,IAAI,CAACgB,KAAL,CAAWhC,aAAa,CAAC,CAAC4B,EAAE,GAAG,CAACD,EAAE,GAAGE,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACE,KAAhE,MAA2E,IAA3E,IAAmFJ,EAAE,KAAK,KAAK,CAA/F,GAAmGA,EAAnG,GAAwGE,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACI,QAAxK,MAAsL,IAAtL,IAA8LL,EAAE,KAAK,KAAK,CAA1M,GAA8MA,EAA9M,GAAmN,CAApN,CAAxB,CAA5C;AACA,aAAOG,KAAP;AACH;AAnBL;;AAAA;AAAA","sourcesContent":["import { getRangeValue } from \"tsparticles-engine\";\nexport class PolygonDrawerBase {\n    draw(context, particle, radius) {\n        const start = this.getCenter(particle, radius), side = this.getSidesData(particle, radius), sideCount = side.count.numerator * side.count.denominator, decimalSides = side.count.numerator / side.count.denominator, interiorAngleDegrees = (180 * (decimalSides - 2)) / decimalSides, interiorAngle = Math.PI - (Math.PI * interiorAngleDegrees) / 180;\n        if (!context) {\n            return;\n        }\n        context.beginPath();\n        context.translate(start.x, start.y);\n        context.moveTo(0, 0);\n        for (let i = 0; i < sideCount; i++) {\n            context.lineTo(side.length, 0);\n            context.translate(side.length, 0);\n            context.rotate(interiorAngle);\n        }\n    }\n    getSidesCount(particle) {\n        var _a, _b;\n        const polygon = particle.shapeData, sides = Math.round(getRangeValue((_b = (_a = polygon === null || polygon === void 0 ? void 0 : polygon.sides) !== null && _a !== void 0 ? _a : polygon === null || polygon === void 0 ? void 0 : polygon.nb_sides) !== null && _b !== void 0 ? _b : 5));\n        return sides;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}