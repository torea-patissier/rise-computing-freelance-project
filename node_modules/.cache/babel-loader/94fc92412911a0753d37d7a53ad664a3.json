{"ast":null,"code":"import Particles from\"react-tsparticles\";import{loadSlim}from\"tsparticles-slim\";// loads tsparticles-slim\n//import { loadFull } from \"tsparticles\"; // loads tsparticles\nimport React,{useCallback,useMemo}from\"react\";// tsParticles Repository: https://github.com/matteobruni/tsparticles\n// tsParticles Website: https://particles.js.org/\nvar ParticlesComponent=function ParticlesComponent(props){// using useMemo is not mandatory, but it's recommended since this value can be memoized if static\nvar options=useMemo(function(){// using an empty options object will load the default options, which are static particles with no background and 3px radius, opacity 100%, white color\n// all options can be found here: https://particles.js.org/docs/interfaces/Options_Interfaces_IOptions.IOptions.html\nreturn{background:{color:\"#000\"// this sets a background color for the canvas\n},fullScreen:{enable:true,// enabling this will make the canvas fill the entire screen, it's enabled by default\nzIndex:-1// this is the z-index value used when the fullScreen is enabled, it's 0 by default\n},interactivity:{events:{onClick:{enable:true,// enables the click event\nmode:\"push\"// adds the particles on click\n},onHover:{enable:true,// enables the hover event\nmode:\"repulse\"// make the particles run away from the cursor\n}},modes:{push:{quantity:10// number of particles to add on click\n},repulse:{distance:100// distance of the particles from the cursor\n}}},particles:{links:{enable:true,// enabling this will make particles linked together\ndistance:200// maximum distance for linking the particles\n},move:{enable:true,// enabling this will make particles move in the canvas\nspeed:{min:1,max:5}// using a range in speed value will make particles move in a random speed between min/max values, each particles have its own value, it won't change in time by default\n},opacity:{value:{min:0.3,max:0.7}// using a different opacity, to have some semitransparent effects\n},size:{value:{min:1,max:3}// let's randomize the particles size a bit\n}}};},[]);// useCallback is not mandatory, but it's recommended since this callback can be memoized if static\nvar particlesInit=useCallback(function(engine){loadSlim(engine);// loadFull(engine); // for this sample the slim version is enough, choose whatever you prefer, slim is smaller in size but doesn't have all the plugins and the mouse trail feature\n},[]);// setting an id can be useful for identifying the right particles component, this is useful for multiple instances or reusable components\nreturn/*#__PURE__*/React.createElement(Particles,{id:props.id,init:particlesInit,options:options});};export default ParticlesComponent;","map":{"version":3,"sources":["/Users/torea/Desktop/freelanceProject2/open-react-template/src/components/elements/Particles.js"],"names":["Particles","loadSlim","React","useCallback","useMemo","ParticlesComponent","props","options","background","color","fullScreen","enable","zIndex","interactivity","events","onClick","mode","onHover","modes","push","quantity","repulse","distance","particles","links","move","speed","min","max","opacity","value","size","particlesInit","engine","id"],"mappings":"AAAA,MAAOA,CAAAA,SAAP,KAAsB,mBAAtB,CACA,OAASC,QAAT,KAAyB,kBAAzB,CAA6C;AAC7C;AACA,MAAOC,CAAAA,KAAP,EAAeC,WAAf,CAA4BC,OAA5B,KAA2C,OAA3C,CAEA;AACA;AACA,GAAMC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACC,KAAD,CAAW,CACpC;AACA,GAAMC,CAAAA,OAAO,CAAGH,OAAO,CAAC,UAAM,CAC5B;AACA;AACA,MAAO,CACLI,UAAU,CAAE,CACVC,KAAK,CAAE,MAAQ;AADL,CADP,CAILC,UAAU,CAAE,CACVC,MAAM,CAAE,IADE,CACI;AACdC,MAAM,CAAE,CAAC,CAAG;AAFF,CAJP,CAQLC,aAAa,CAAE,CACbC,MAAM,CAAE,CACNC,OAAO,CAAE,CACPJ,MAAM,CAAE,IADD,CACO;AACdK,IAAI,CAAE,MAAQ;AAFP,CADH,CAKNC,OAAO,CAAE,CACPN,MAAM,CAAE,IADD,CACO;AACdK,IAAI,CAAE,SAAW;AAFV,CALH,CADK,CAWbE,KAAK,CAAE,CACLC,IAAI,CAAE,CACJC,QAAQ,CAAE,EAAI;AADV,CADD,CAILC,OAAO,CAAE,CACPC,QAAQ,CAAE,GAAK;AADR,CAJJ,CAXM,CARV,CA4BLC,SAAS,CAAE,CACTC,KAAK,CAAE,CACLb,MAAM,CAAE,IADH,CACS;AACdW,QAAQ,CAAE,GAAK;AAFV,CADE,CAKTG,IAAI,CAAE,CACJd,MAAM,CAAE,IADJ,CACU;AACde,KAAK,CAAE,CAAEC,GAAG,CAAE,CAAP,CAAUC,GAAG,CAAE,CAAf,CAAoB;AAFvB,CALG,CASTC,OAAO,CAAE,CACPC,KAAK,CAAE,CAAEH,GAAG,CAAE,GAAP,CAAYC,GAAG,CAAE,GAAjB,CAAwB;AADxB,CATA,CAYTG,IAAI,CAAE,CACJD,KAAK,CAAE,CAAEH,GAAG,CAAE,CAAP,CAAUC,GAAG,CAAE,CAAf,CAAoB;AADvB,CAZG,CA5BN,CAAP,CA6CD,CAhDsB,CAgDpB,EAhDoB,CAAvB,CAkDA;AACA,GAAMI,CAAAA,aAAa,CAAG7B,WAAW,CAAC,SAAC8B,MAAD,CAAY,CAC5ChC,QAAQ,CAACgC,MAAD,CAAR,CACA;AACD,CAHgC,CAG9B,EAH8B,CAAjC,CAKA;AACA,mBAAO,oBAAC,SAAD,EAAW,EAAE,CAAE3B,KAAK,CAAC4B,EAArB,CAAyB,IAAI,CAAEF,aAA/B,CAA8C,OAAO,CAAEzB,OAAvD,EAAP,CACD,CA5DD,CA8DA,cAAeF,CAAAA,kBAAf","sourcesContent":["import Particles from \"react-tsparticles\";\nimport { loadSlim } from \"tsparticles-slim\"; // loads tsparticles-slim\n//import { loadFull } from \"tsparticles\"; // loads tsparticles\nimport React,{ useCallback, useMemo } from \"react\";\n\n// tsParticles Repository: https://github.com/matteobruni/tsparticles\n// tsParticles Website: https://particles.js.org/\nconst ParticlesComponent = (props) => {\n  // using useMemo is not mandatory, but it's recommended since this value can be memoized if static\n  const options = useMemo(() => {\n    // using an empty options object will load the default options, which are static particles with no background and 3px radius, opacity 100%, white color\n    // all options can be found here: https://particles.js.org/docs/interfaces/Options_Interfaces_IOptions.IOptions.html\n    return {\n      background: {\n        color: \"#000\", // this sets a background color for the canvas\n      },\n      fullScreen: {\n        enable: true, // enabling this will make the canvas fill the entire screen, it's enabled by default\n        zIndex: -1, // this is the z-index value used when the fullScreen is enabled, it's 0 by default\n      },\n      interactivity: {\n        events: {\n          onClick: {\n            enable: true, // enables the click event\n            mode: \"push\", // adds the particles on click\n          },\n          onHover: {\n            enable: true, // enables the hover event\n            mode: \"repulse\", // make the particles run away from the cursor\n          },\n        },\n        modes: {\n          push: {\n            quantity: 10, // number of particles to add on click\n          },\n          repulse: {\n            distance: 100, // distance of the particles from the cursor\n          },\n        },\n      },\n      particles: {\n        links: {\n          enable: true, // enabling this will make particles linked together\n          distance: 200, // maximum distance for linking the particles\n        },\n        move: {\n          enable: true, // enabling this will make particles move in the canvas\n          speed: { min: 1, max: 5 }, // using a range in speed value will make particles move in a random speed between min/max values, each particles have its own value, it won't change in time by default\n        },\n        opacity: {\n          value: { min: 0.3, max: 0.7 }, // using a different opacity, to have some semitransparent effects\n        },\n        size: {\n          value: { min: 1, max: 3 }, // let's randomize the particles size a bit\n        },\n      },\n    };\n  }, []);\n\n  // useCallback is not mandatory, but it's recommended since this callback can be memoized if static\n  const particlesInit = useCallback((engine) => {\n    loadSlim(engine);\n    // loadFull(engine); // for this sample the slim version is enough, choose whatever you prefer, slim is smaller in size but doesn't have all the plugins and the mouse trail feature\n  }, []);\n\n  // setting an id can be useful for identifying the right particles component, this is useful for multiple instances or reusable components\n  return <Particles id={props.id} init={particlesInit} options={options} />;\n};\n\nexport default ParticlesComponent;\n"]},"metadata":{},"sourceType":"module"}