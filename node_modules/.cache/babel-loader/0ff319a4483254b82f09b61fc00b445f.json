{"ast":null,"code":"import { Circle, ExternalInteractorBase, Vector, clamp, getDistances, getEasing, isInArray, mouseMoveEvent } from \"tsparticles-engine\";\nimport { Attract } from \"./Options/Classes/Attract\";\nexport class Attractor extends ExternalInteractorBase {\n  constructor(engine, container) {\n    super(container);\n    this._engine = engine;\n\n    if (!container.attract) {\n      container.attract = {\n        particles: []\n      };\n    }\n\n    this.handleClickMode = mode => {\n      const options = this.container.actualOptions,\n            attract = options.interactivity.modes.attract;\n\n      if (!attract || mode !== \"attract\") {\n        return;\n      }\n\n      if (!container.attract) {\n        container.attract = {\n          particles: []\n        };\n      }\n\n      container.attract.clicking = true;\n      container.attract.count = 0;\n\n      for (const particle of container.attract.particles) {\n        if (!this.isEnabled(particle)) {\n          continue;\n        }\n\n        particle.velocity.setTo(particle.initialVelocity);\n      }\n\n      container.attract.particles = [];\n      container.attract.finish = false;\n      setTimeout(() => {\n        if (!container.destroyed) {\n          if (!container.attract) {\n            container.attract = {\n              particles: []\n            };\n          }\n\n          container.attract.clicking = false;\n        }\n      }, attract.duration * 1000);\n    };\n  }\n\n  clear() {}\n\n  init() {\n    const container = this.container,\n          attract = container.actualOptions.interactivity.modes.attract;\n\n    if (!attract) {\n      return;\n    }\n\n    container.retina.attractModeDistance = attract.distance * container.retina.pixelRatio;\n  }\n\n  async interact() {\n    const container = this.container,\n          options = container.actualOptions,\n          mouseMoveStatus = container.interactivity.status === mouseMoveEvent,\n          events = options.interactivity.events,\n          hoverEnabled = events.onHover.enable,\n          hoverMode = events.onHover.mode,\n          clickEnabled = events.onClick.enable,\n          clickMode = events.onClick.mode;\n\n    if (mouseMoveStatus && hoverEnabled && isInArray(\"attract\", hoverMode)) {\n      this.hoverAttract();\n    } else if (clickEnabled && isInArray(\"attract\", clickMode)) {\n      this.clickAttract();\n    }\n  }\n\n  isEnabled(particle) {\n    var _a;\n\n    const container = this.container,\n          options = container.actualOptions,\n          mouse = container.interactivity.mouse,\n          events = ((_a = particle === null || particle === void 0 ? void 0 : particle.interactivity) !== null && _a !== void 0 ? _a : options.interactivity).events;\n\n    if ((!mouse.position || !events.onHover.enable) && (!mouse.clickPosition || !events.onClick.enable)) {\n      return false;\n    }\n\n    const hoverMode = events.onHover.mode,\n          clickMode = events.onClick.mode;\n    return isInArray(\"attract\", hoverMode) || isInArray(\"attract\", clickMode);\n  }\n\n  loadModeOptions(options, ...sources) {\n    if (!options.attract) {\n      options.attract = new Attract();\n    }\n\n    for (const source of sources) {\n      options.attract.load(source === null || source === void 0 ? void 0 : source.attract);\n    }\n  }\n\n  reset() {}\n\n  clickAttract() {\n    const container = this.container;\n\n    if (!container.attract) {\n      container.attract = {\n        particles: []\n      };\n    }\n\n    if (!container.attract.finish) {\n      if (!container.attract.count) {\n        container.attract.count = 0;\n      }\n\n      container.attract.count++;\n\n      if (container.attract.count === container.particles.count) {\n        container.attract.finish = true;\n      }\n    }\n\n    if (container.attract.clicking) {\n      const mousePos = container.interactivity.mouse.clickPosition,\n            attractRadius = container.retina.attractModeDistance;\n\n      if (!attractRadius || attractRadius < 0 || !mousePos) {\n        return;\n      }\n\n      this.processAttract(mousePos, attractRadius, new Circle(mousePos.x, mousePos.y, attractRadius));\n    } else if (container.attract.clicking === false) {\n      container.attract.particles = [];\n    }\n\n    return;\n  }\n\n  hoverAttract() {\n    const container = this.container,\n          mousePos = container.interactivity.mouse.position,\n          attractRadius = container.retina.attractModeDistance;\n\n    if (!attractRadius || attractRadius < 0 || !mousePos) {\n      return;\n    }\n\n    this.processAttract(mousePos, attractRadius, new Circle(mousePos.x, mousePos.y, attractRadius));\n  }\n\n  processAttract(position, attractRadius, area) {\n    const container = this.container,\n          attractOptions = container.actualOptions.interactivity.modes.attract;\n\n    if (!attractOptions) {\n      return;\n    }\n\n    const query = container.particles.quadTree.query(area, p => this.isEnabled(p));\n\n    for (const particle of query) {\n      const {\n        dx,\n        dy,\n        distance\n      } = getDistances(particle.position, position);\n      const velocity = attractOptions.speed * attractOptions.factor;\n      const attractFactor = clamp(getEasing(attractOptions.easing)(1 - distance / attractRadius) * velocity, 0, attractOptions.maxSpeed);\n      const normVec = Vector.create(distance === 0 ? velocity : dx / distance * attractFactor, distance === 0 ? velocity : dy / distance * attractFactor);\n      particle.position.subFrom(normVec);\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/torea/Desktop/freelanceProject2/rise-consulting/node_modules/tsparticles-interaction-external-attract/esm/Attractor.js"],"names":["Circle","ExternalInteractorBase","Vector","clamp","getDistances","getEasing","isInArray","mouseMoveEvent","Attract","Attractor","constructor","engine","container","_engine","attract","particles","handleClickMode","mode","options","actualOptions","interactivity","modes","clicking","count","particle","isEnabled","velocity","setTo","initialVelocity","finish","setTimeout","destroyed","duration","clear","init","retina","attractModeDistance","distance","pixelRatio","interact","mouseMoveStatus","status","events","hoverEnabled","onHover","enable","hoverMode","clickEnabled","onClick","clickMode","hoverAttract","clickAttract","_a","mouse","position","clickPosition","loadModeOptions","sources","source","load","reset","mousePos","attractRadius","processAttract","x","y","area","attractOptions","query","quadTree","p","dx","dy","speed","factor","attractFactor","easing","maxSpeed","normVec","create","subFrom"],"mappings":"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","sourcesContent":["import { Circle, ExternalInteractorBase, Vector, clamp, getDistances, getEasing, isInArray, mouseMoveEvent, } from \"tsparticles-engine\";\nimport { Attract } from \"./Options/Classes/Attract\";\nexport class Attractor extends ExternalInteractorBase {\n    constructor(engine, container) {\n        super(container);\n        this._engine = engine;\n        if (!container.attract) {\n            container.attract = { particles: [] };\n        }\n        this.handleClickMode = (mode) => {\n            const options = this.container.actualOptions, attract = options.interactivity.modes.attract;\n            if (!attract || mode !== \"attract\") {\n                return;\n            }\n            if (!container.attract) {\n                container.attract = { particles: [] };\n            }\n            container.attract.clicking = true;\n            container.attract.count = 0;\n            for (const particle of container.attract.particles) {\n                if (!this.isEnabled(particle)) {\n                    continue;\n                }\n                particle.velocity.setTo(particle.initialVelocity);\n            }\n            container.attract.particles = [];\n            container.attract.finish = false;\n            setTimeout(() => {\n                if (!container.destroyed) {\n                    if (!container.attract) {\n                        container.attract = { particles: [] };\n                    }\n                    container.attract.clicking = false;\n                }\n            }, attract.duration * 1000);\n        };\n    }\n    clear() {\n    }\n    init() {\n        const container = this.container, attract = container.actualOptions.interactivity.modes.attract;\n        if (!attract) {\n            return;\n        }\n        container.retina.attractModeDistance = attract.distance * container.retina.pixelRatio;\n    }\n    async interact() {\n        const container = this.container, options = container.actualOptions, mouseMoveStatus = container.interactivity.status === mouseMoveEvent, events = options.interactivity.events, hoverEnabled = events.onHover.enable, hoverMode = events.onHover.mode, clickEnabled = events.onClick.enable, clickMode = events.onClick.mode;\n        if (mouseMoveStatus && hoverEnabled && isInArray(\"attract\", hoverMode)) {\n            this.hoverAttract();\n        }\n        else if (clickEnabled && isInArray(\"attract\", clickMode)) {\n            this.clickAttract();\n        }\n    }\n    isEnabled(particle) {\n        var _a;\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = ((_a = particle === null || particle === void 0 ? void 0 : particle.interactivity) !== null && _a !== void 0 ? _a : options.interactivity).events;\n        if ((!mouse.position || !events.onHover.enable) && (!mouse.clickPosition || !events.onClick.enable)) {\n            return false;\n        }\n        const hoverMode = events.onHover.mode, clickMode = events.onClick.mode;\n        return isInArray(\"attract\", hoverMode) || isInArray(\"attract\", clickMode);\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.attract) {\n            options.attract = new Attract();\n        }\n        for (const source of sources) {\n            options.attract.load(source === null || source === void 0 ? void 0 : source.attract);\n        }\n    }\n    reset() {\n    }\n    clickAttract() {\n        const container = this.container;\n        if (!container.attract) {\n            container.attract = { particles: [] };\n        }\n        if (!container.attract.finish) {\n            if (!container.attract.count) {\n                container.attract.count = 0;\n            }\n            container.attract.count++;\n            if (container.attract.count === container.particles.count) {\n                container.attract.finish = true;\n            }\n        }\n        if (container.attract.clicking) {\n            const mousePos = container.interactivity.mouse.clickPosition, attractRadius = container.retina.attractModeDistance;\n            if (!attractRadius || attractRadius < 0 || !mousePos) {\n                return;\n            }\n            this.processAttract(mousePos, attractRadius, new Circle(mousePos.x, mousePos.y, attractRadius));\n        }\n        else if (container.attract.clicking === false) {\n            container.attract.particles = [];\n        }\n        return;\n    }\n    hoverAttract() {\n        const container = this.container, mousePos = container.interactivity.mouse.position, attractRadius = container.retina.attractModeDistance;\n        if (!attractRadius || attractRadius < 0 || !mousePos) {\n            return;\n        }\n        this.processAttract(mousePos, attractRadius, new Circle(mousePos.x, mousePos.y, attractRadius));\n    }\n    processAttract(position, attractRadius, area) {\n        const container = this.container, attractOptions = container.actualOptions.interactivity.modes.attract;\n        if (!attractOptions) {\n            return;\n        }\n        const query = container.particles.quadTree.query(area, (p) => this.isEnabled(p));\n        for (const particle of query) {\n            const { dx, dy, distance } = getDistances(particle.position, position);\n            const velocity = attractOptions.speed * attractOptions.factor;\n            const attractFactor = clamp(getEasing(attractOptions.easing)(1 - distance / attractRadius) * velocity, 0, attractOptions.maxSpeed);\n            const normVec = Vector.create(distance === 0 ? velocity : (dx / distance) * attractFactor, distance === 0 ? velocity : (dy / distance) * attractFactor);\n            particle.position.subFrom(normVec);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}