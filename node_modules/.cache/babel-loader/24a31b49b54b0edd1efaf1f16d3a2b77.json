{"ast":null,"code":"import _regeneratorRuntime from \"/Users/torea/Desktop/freelanceProject2/open-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/torea/Desktop/freelanceProject2/open-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/torea/Desktop/freelanceProject2/open-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/torea/Desktop/freelanceProject2/open-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { downloadSvgImage, loadImage, replaceImageColor } from \"./Utils\";\nexport var ImageDrawer = /*#__PURE__*/function () {\n  function ImageDrawer() {\n    _classCallCheck(this, ImageDrawer);\n\n    this._images = [];\n  }\n\n  _createClass(ImageDrawer, [{\n    key: \"addImage\",\n    value: function addImage(container, image) {\n      var containerImages = this.getImages(container);\n      containerImages === null || containerImages === void 0 ? void 0 : containerImages.images.push(image);\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this._images = [];\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(context, particle, radius, opacity) {\n      var _a;\n\n      var image = particle.image,\n          element = image === null || image === void 0 ? void 0 : image.element;\n\n      if (!element) {\n        return;\n      }\n\n      var ratio = (_a = image === null || image === void 0 ? void 0 : image.ratio) !== null && _a !== void 0 ? _a : 1,\n          pos = {\n        x: -radius,\n        y: -radius\n      };\n      context.globalAlpha = opacity;\n      context.drawImage(element, pos.x, pos.y, radius * 2, radius * 2 / ratio);\n      context.globalAlpha = 1;\n    }\n  }, {\n    key: \"getImages\",\n    value: function getImages(container) {\n      var containerImages = this._images.find(function (t) {\n        return t.id === container.id;\n      });\n\n      if (!containerImages) {\n        this._images.push({\n          id: container.id,\n          images: []\n        });\n\n        return this.getImages(container);\n      } else {\n        return containerImages;\n      }\n    }\n  }, {\n    key: \"getSidesCount\",\n    value: function getSidesCount() {\n      return 12;\n    }\n  }, {\n    key: \"loadShape\",\n    value: function loadShape(particle) {\n      var _this = this;\n\n      if (particle.shape !== \"image\" && particle.shape !== \"images\") {\n        return;\n      }\n\n      var container = particle.container,\n          images = this.getImages(container).images,\n          imageData = particle.shapeData,\n          image = images.find(function (t) {\n        return t.source === imageData.src;\n      });\n\n      if (!image) {\n        this.loadImageShape(container, imageData).then(function () {\n          _this.loadShape(particle);\n        });\n      }\n    }\n  }, {\n    key: \"particleInit\",\n    value: function particleInit(container, particle) {\n      var _this2 = this;\n\n      var _a;\n\n      if (particle.shape !== \"image\" && particle.shape !== \"images\") {\n        return;\n      }\n\n      var images = this.getImages(container).images,\n          imageData = particle.shapeData,\n          color = particle.getFillColor(),\n          replaceColor = (_a = imageData.replaceColor) !== null && _a !== void 0 ? _a : imageData.replace_color,\n          image = images.find(function (t) {\n        return t.source === imageData.src;\n      });\n\n      if (!image) {\n        return;\n      }\n\n      if (image.loading) {\n        setTimeout(function () {\n          _this2.particleInit(container, particle);\n        });\n        return;\n      }\n\n      _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _a, _b, imageRes, fill, close, imageShape;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(image.svgData && color)) {\n                  _context.next = 6;\n                  break;\n                }\n\n                _context.next = 3;\n                return replaceImageColor(image, imageData, color, particle);\n\n              case 3:\n                imageRes = _context.sent;\n                _context.next = 7;\n                break;\n\n              case 6:\n                imageRes = {\n                  color: color,\n                  data: image,\n                  element: image.element,\n                  loaded: true,\n                  ratio: imageData.width / imageData.height,\n                  replaceColor: replaceColor,\n                  source: imageData.src\n                };\n\n              case 7:\n                if (!imageRes.ratio) {\n                  imageRes.ratio = 1;\n                }\n\n                fill = (_a = imageData.fill) !== null && _a !== void 0 ? _a : particle.fill, close = (_b = imageData.close) !== null && _b !== void 0 ? _b : particle.close, imageShape = {\n                  image: imageRes,\n                  fill: fill,\n                  close: close\n                };\n                particle.image = imageShape.image;\n                particle.fill = imageShape.fill;\n                particle.close = imageShape.close;\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    }\n  }, {\n    key: \"loadImageShape\",\n    value: function () {\n      var _loadImageShape = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(container, imageShape) {\n        var _a, source, image, imageFunc;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                source = imageShape.src;\n\n                if (source) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                throw new Error(\"Error tsParticles - No image.src\");\n\n              case 3:\n                _context2.prev = 3;\n                image = {\n                  source: source,\n                  type: source.substring(source.length - 3),\n                  error: false,\n                  loading: true\n                };\n                this.addImage(container, image);\n                imageFunc = ((_a = imageShape.replaceColor) !== null && _a !== void 0 ? _a : imageShape.replace_color) ? downloadSvgImage : loadImage;\n                _context2.next = 9;\n                return imageFunc(image);\n\n              case 9:\n                _context2.next = 14;\n                break;\n\n              case 11:\n                _context2.prev = 11;\n                _context2.t0 = _context2[\"catch\"](3);\n                throw new Error(\"tsParticles error - \".concat(imageShape.src, \" not found\"));\n\n              case 14:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[3, 11]]);\n      }));\n\n      function loadImageShape(_x, _x2) {\n        return _loadImageShape.apply(this, arguments);\n      }\n\n      return loadImageShape;\n    }()\n  }]);\n\n  return ImageDrawer;\n}();","map":{"version":3,"sources":["/Users/torea/Desktop/freelanceProject2/open-react-template/node_modules/tsparticles-shape-image/esm/ImageDrawer.js"],"names":["downloadSvgImage","loadImage","replaceImageColor","ImageDrawer","_images","container","image","containerImages","getImages","images","push","context","particle","radius","opacity","_a","element","ratio","pos","x","y","globalAlpha","drawImage","find","t","id","shape","imageData","shapeData","source","src","loadImageShape","then","loadShape","color","getFillColor","replaceColor","replace_color","loading","setTimeout","particleInit","svgData","imageRes","data","loaded","width","height","fill","close","_b","imageShape","Error","type","substring","length","error","addImage","imageFunc"],"mappings":"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","sourcesContent":["import { downloadSvgImage, loadImage, replaceImageColor } from \"./Utils\";\nexport class ImageDrawer {\n    constructor() {\n        this._images = [];\n    }\n    addImage(container, image) {\n        const containerImages = this.getImages(container);\n        containerImages === null || containerImages === void 0 ? void 0 : containerImages.images.push(image);\n    }\n    destroy() {\n        this._images = [];\n    }\n    draw(context, particle, radius, opacity) {\n        var _a;\n        const image = particle.image, element = image === null || image === void 0 ? void 0 : image.element;\n        if (!element) {\n            return;\n        }\n        const ratio = (_a = image === null || image === void 0 ? void 0 : image.ratio) !== null && _a !== void 0 ? _a : 1, pos = {\n            x: -radius,\n            y: -radius,\n        };\n        context.globalAlpha = opacity;\n        context.drawImage(element, pos.x, pos.y, radius * 2, (radius * 2) / ratio);\n        context.globalAlpha = 1;\n    }\n    getImages(container) {\n        const containerImages = this._images.find((t) => t.id === container.id);\n        if (!containerImages) {\n            this._images.push({\n                id: container.id,\n                images: [],\n            });\n            return this.getImages(container);\n        }\n        else {\n            return containerImages;\n        }\n    }\n    getSidesCount() {\n        return 12;\n    }\n    loadShape(particle) {\n        if (particle.shape !== \"image\" && particle.shape !== \"images\") {\n            return;\n        }\n        const container = particle.container, images = this.getImages(container).images, imageData = particle.shapeData, image = images.find((t) => t.source === imageData.src);\n        if (!image) {\n            this.loadImageShape(container, imageData).then(() => {\n                this.loadShape(particle);\n            });\n        }\n    }\n    particleInit(container, particle) {\n        var _a;\n        if (particle.shape !== \"image\" && particle.shape !== \"images\") {\n            return;\n        }\n        const images = this.getImages(container).images, imageData = particle.shapeData, color = particle.getFillColor(), replaceColor = (_a = imageData.replaceColor) !== null && _a !== void 0 ? _a : imageData.replace_color, image = images.find((t) => t.source === imageData.src);\n        if (!image) {\n            return;\n        }\n        if (image.loading) {\n            setTimeout(() => {\n                this.particleInit(container, particle);\n            });\n            return;\n        }\n        (async () => {\n            var _a, _b;\n            let imageRes;\n            if (image.svgData && color) {\n                imageRes = await replaceImageColor(image, imageData, color, particle);\n            }\n            else {\n                imageRes = {\n                    color,\n                    data: image,\n                    element: image.element,\n                    loaded: true,\n                    ratio: imageData.width / imageData.height,\n                    replaceColor: replaceColor,\n                    source: imageData.src,\n                };\n            }\n            if (!imageRes.ratio) {\n                imageRes.ratio = 1;\n            }\n            const fill = (_a = imageData.fill) !== null && _a !== void 0 ? _a : particle.fill, close = (_b = imageData.close) !== null && _b !== void 0 ? _b : particle.close, imageShape = {\n                image: imageRes,\n                fill,\n                close,\n            };\n            particle.image = imageShape.image;\n            particle.fill = imageShape.fill;\n            particle.close = imageShape.close;\n        })();\n    }\n    async loadImageShape(container, imageShape) {\n        var _a;\n        const source = imageShape.src;\n        if (!source) {\n            throw new Error(\"Error tsParticles - No image.src\");\n        }\n        try {\n            const image = {\n                source: source,\n                type: source.substring(source.length - 3),\n                error: false,\n                loading: true,\n            };\n            this.addImage(container, image);\n            const imageFunc = ((_a = imageShape.replaceColor) !== null && _a !== void 0 ? _a : imageShape.replace_color) ? downloadSvgImage : loadImage;\n            await imageFunc(image);\n        }\n        catch (_b) {\n            throw new Error(`tsParticles error - ${imageShape.src} not found`);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}