{"ast":null,"code":"import _regeneratorRuntime from \"/Users/torea/Desktop/freelanceProject2/open-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/torea/Desktop/freelanceProject2/open-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/torea/Desktop/freelanceProject2/open-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/torea/Desktop/freelanceProject2/open-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { executeOnSingleOrMultiple, isInArray } from \"tsparticles-engine\";\nimport { Absorber } from \"./Options/Classes/Absorber\";\nimport { Absorbers } from \"./Absorbers\";\n\nvar AbsorbersPlugin = /*#__PURE__*/function () {\n  function AbsorbersPlugin() {\n    _classCallCheck(this, AbsorbersPlugin);\n\n    this.id = \"absorbers\";\n  }\n\n  _createClass(AbsorbersPlugin, [{\n    key: \"getPlugin\",\n    value: function getPlugin(container) {\n      return new Absorbers(container);\n    }\n  }, {\n    key: \"loadOptions\",\n    value: function loadOptions(options, source) {\n      var _a, _b;\n\n      if (!this.needsPlugin(options) && !this.needsPlugin(source)) {\n        return;\n      }\n\n      if (source === null || source === void 0 ? void 0 : source.absorbers) {\n        options.absorbers = executeOnSingleOrMultiple(source.absorbers, function (absorber) {\n          var tmp = new Absorber();\n          tmp.load(absorber);\n          return tmp;\n        });\n      }\n\n      options.interactivity.modes.absorbers = executeOnSingleOrMultiple((_b = (_a = source === null || source === void 0 ? void 0 : source.interactivity) === null || _a === void 0 ? void 0 : _a.modes) === null || _b === void 0 ? void 0 : _b.absorbers, function (absorber) {\n        var tmp = new Absorber();\n        tmp.load(absorber);\n        return tmp;\n      });\n    }\n  }, {\n    key: \"needsPlugin\",\n    value: function needsPlugin(options) {\n      var _a, _b, _c;\n\n      if (!options) {\n        return false;\n      }\n\n      var absorbers = options.absorbers;\n\n      if (absorbers instanceof Array) {\n        return !!absorbers.length;\n      } else if (absorbers) {\n        return true;\n      } else if (((_c = (_b = (_a = options.interactivity) === null || _a === void 0 ? void 0 : _a.events) === null || _b === void 0 ? void 0 : _b.onClick) === null || _c === void 0 ? void 0 : _c.mode) && isInArray(\"absorber\", options.interactivity.events.onClick.mode)) {\n        return true;\n      }\n\n      return false;\n    }\n  }]);\n\n  return AbsorbersPlugin;\n}();\n\nexport function loadAbsorbersPlugin(_x) {\n  return _loadAbsorbersPlugin.apply(this, arguments);\n}\n\nfunction _loadAbsorbersPlugin() {\n  _loadAbsorbersPlugin = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(engine) {\n    var plugin;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            plugin = new AbsorbersPlugin();\n            _context.next = 3;\n            return engine.addPlugin(plugin);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _loadAbsorbersPlugin.apply(this, arguments);\n}\n\nexport * from \"./AbsorberContainer\";\nexport * from \"./Enums/AbsorberClickMode\";","map":{"version":3,"sources":["/Users/torea/Desktop/freelanceProject2/open-react-template/node_modules/tsparticles-plugin-absorbers/esm/index.js"],"names":["executeOnSingleOrMultiple","isInArray","Absorber","Absorbers","AbsorbersPlugin","id","container","options","source","_a","_b","needsPlugin","absorbers","absorber","tmp","load","interactivity","modes","_c","Array","length","events","onClick","mode","loadAbsorbersPlugin","engine","plugin","addPlugin"],"mappings":";;;;AAAA,SAASA,yBAAT,EAAoCC,SAApC,QAAqD,oBAArD;AACA,SAASC,QAAT,QAAyB,4BAAzB;AACA,SAASC,SAAT,QAA0B,aAA1B;;IACMC,e;AACF,6BAAc;AAAA;;AACV,SAAKC,EAAL,GAAU,WAAV;AACH;;;;8BACSC,S,EAAW;AACjB,aAAO,IAAIH,SAAJ,CAAcG,SAAd,CAAP;AACH;;;gCACWC,O,EAASC,M,EAAQ;AACzB,UAAIC,EAAJ,EAAQC,EAAR;;AACA,UAAI,CAAC,KAAKC,WAAL,CAAiBJ,OAAjB,CAAD,IAA8B,CAAC,KAAKI,WAAL,CAAiBH,MAAjB,CAAnC,EAA6D;AACzD;AACH;;AACD,UAAIA,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,GAAuC,KAAK,CAA5C,GAAgDA,MAAM,CAACI,SAA3D,EAAsE;AAClEL,QAAAA,OAAO,CAACK,SAAR,GAAoBZ,yBAAyB,CAACQ,MAAM,CAACI,SAAR,EAAmB,UAACC,QAAD,EAAc;AAC1E,cAAMC,GAAG,GAAG,IAAIZ,QAAJ,EAAZ;AACAY,UAAAA,GAAG,CAACC,IAAJ,CAASF,QAAT;AACA,iBAAOC,GAAP;AACH,SAJ4C,CAA7C;AAKH;;AACDP,MAAAA,OAAO,CAACS,aAAR,CAAsBC,KAAtB,CAA4BL,SAA5B,GAAwCZ,yBAAyB,CAAC,CAACU,EAAE,GAAG,CAACD,EAAE,GAAGD,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,GAAuC,KAAK,CAA5C,GAAgDA,MAAM,CAACQ,aAA7D,MAAgF,IAAhF,IAAwFP,EAAE,KAAK,KAAK,CAApG,GAAwG,KAAK,CAA7G,GAAiHA,EAAE,CAACQ,KAA1H,MAAqI,IAArI,IAA6IP,EAAE,KAAK,KAAK,CAAzJ,GAA6J,KAAK,CAAlK,GAAsKA,EAAE,CAACE,SAA1K,EAAqL,UAACC,QAAD,EAAc;AAChQ,YAAMC,GAAG,GAAG,IAAIZ,QAAJ,EAAZ;AACAY,QAAAA,GAAG,CAACC,IAAJ,CAASF,QAAT;AACA,eAAOC,GAAP;AACH,OAJgE,CAAjE;AAKH;;;gCACWP,O,EAAS;AACjB,UAAIE,EAAJ,EAAQC,EAAR,EAAYQ,EAAZ;;AACA,UAAI,CAACX,OAAL,EAAc;AACV,eAAO,KAAP;AACH;;AACD,UAAMK,SAAS,GAAGL,OAAO,CAACK,SAA1B;;AACA,UAAIA,SAAS,YAAYO,KAAzB,EAAgC;AAC5B,eAAO,CAAC,CAACP,SAAS,CAACQ,MAAnB;AACH,OAFD,MAGK,IAAIR,SAAJ,EAAe;AAChB,eAAO,IAAP;AACH,OAFI,MAGA,IAAI,CAAC,CAACM,EAAE,GAAG,CAACR,EAAE,GAAG,CAACD,EAAE,GAAGF,OAAO,CAACS,aAAd,MAAiC,IAAjC,IAAyCP,EAAE,KAAK,KAAK,CAArD,GAAyD,KAAK,CAA9D,GAAkEA,EAAE,CAACY,MAA3E,MAAuF,IAAvF,IAA+FX,EAAE,KAAK,KAAK,CAA3G,GAA+G,KAAK,CAApH,GAAwHA,EAAE,CAACY,OAAjI,MAA8I,IAA9I,IAAsJJ,EAAE,KAAK,KAAK,CAAlK,GAAsK,KAAK,CAA3K,GAA+KA,EAAE,CAACK,IAAnL,KACLtB,SAAS,CAAC,UAAD,EAAaM,OAAO,CAACS,aAAR,CAAsBK,MAAtB,CAA6BC,OAA7B,CAAqCC,IAAlD,CADR,EACiE;AAClE,eAAO,IAAP;AACH;;AACD,aAAO,KAAP;AACH;;;;;;AAEL,gBAAsBC,mBAAtB;AAAA;AAAA;;;kFAAO,iBAAmCC,MAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AACGC,YAAAA,MADH,GACY,IAAItB,eAAJ,EADZ;AAAA;AAAA,mBAEGqB,MAAM,CAACE,SAAP,CAAiBD,MAAjB,CAFH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAIP,cAAc,qBAAd;AACA,cAAc,2BAAd","sourcesContent":["import { executeOnSingleOrMultiple, isInArray } from \"tsparticles-engine\";\nimport { Absorber } from \"./Options/Classes/Absorber\";\nimport { Absorbers } from \"./Absorbers\";\nclass AbsorbersPlugin {\n    constructor() {\n        this.id = \"absorbers\";\n    }\n    getPlugin(container) {\n        return new Absorbers(container);\n    }\n    loadOptions(options, source) {\n        var _a, _b;\n        if (!this.needsPlugin(options) && !this.needsPlugin(source)) {\n            return;\n        }\n        if (source === null || source === void 0 ? void 0 : source.absorbers) {\n            options.absorbers = executeOnSingleOrMultiple(source.absorbers, (absorber) => {\n                const tmp = new Absorber();\n                tmp.load(absorber);\n                return tmp;\n            });\n        }\n        options.interactivity.modes.absorbers = executeOnSingleOrMultiple((_b = (_a = source === null || source === void 0 ? void 0 : source.interactivity) === null || _a === void 0 ? void 0 : _a.modes) === null || _b === void 0 ? void 0 : _b.absorbers, (absorber) => {\n            const tmp = new Absorber();\n            tmp.load(absorber);\n            return tmp;\n        });\n    }\n    needsPlugin(options) {\n        var _a, _b, _c;\n        if (!options) {\n            return false;\n        }\n        const absorbers = options.absorbers;\n        if (absorbers instanceof Array) {\n            return !!absorbers.length;\n        }\n        else if (absorbers) {\n            return true;\n        }\n        else if (((_c = (_b = (_a = options.interactivity) === null || _a === void 0 ? void 0 : _a.events) === null || _b === void 0 ? void 0 : _b.onClick) === null || _c === void 0 ? void 0 : _c.mode) &&\n            isInArray(\"absorber\", options.interactivity.events.onClick.mode)) {\n            return true;\n        }\n        return false;\n    }\n}\nexport async function loadAbsorbersPlugin(engine) {\n    const plugin = new AbsorbersPlugin();\n    await engine.addPlugin(plugin);\n}\nexport * from \"./AbsorberContainer\";\nexport * from \"./Enums/AbsorberClickMode\";\n"]},"metadata":{},"sourceType":"module"}