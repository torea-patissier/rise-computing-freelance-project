{"ast":null,"code":"import _classCallCheck from \"/Users/torea/Desktop/freelanceProject2/rise-consulting/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/torea/Desktop/freelanceProject2/rise-consulting/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { MoveAngle } from \"./MoveAngle\";\nimport { MoveAttract } from \"./MoveAttract\";\nimport { MoveCenter } from \"./MoveCenter\";\nimport { MoveGravity } from \"./MoveGravity\";\nimport { MovePath } from \"./Path/MovePath\";\nimport { MoveTrail } from \"./MoveTrail\";\nimport { OutModes } from \"./OutModes\";\nimport { Spin } from \"./Spin\";\nimport { setRangeValue } from \"../../../../Utils/NumberUtils\";\nexport var Move = /*#__PURE__*/function () {\n  function Move() {\n    _classCallCheck(this, Move);\n\n    this.angle = new MoveAngle();\n    this.attract = new MoveAttract();\n    this.center = new MoveCenter();\n    this.decay = 0;\n    this.distance = {};\n    this.direction = \"none\";\n    this.drift = 0;\n    this.enable = false;\n    this.gravity = new MoveGravity();\n    this.path = new MovePath();\n    this.outModes = new OutModes();\n    this.random = false;\n    this.size = false;\n    this.speed = 2;\n    this.spin = new Spin();\n    this.straight = false;\n    this.trail = new MoveTrail();\n    this.vibrate = false;\n    this.warp = false;\n  }\n\n  _createClass(Move, [{\n    key: \"load\",\n    value: function load(data) {\n      var _a, _b, _c;\n\n      if (!data) {\n        return;\n      }\n\n      this.angle.load(typeof data.angle === \"number\" ? {\n        value: data.angle\n      } : data.angle);\n      this.attract.load(data.attract);\n      this.center.load(data.center);\n\n      if (data.decay !== undefined) {\n        this.decay = setRangeValue(data.decay);\n      }\n\n      if (data.direction !== undefined) {\n        this.direction = data.direction;\n      }\n\n      if (data.distance !== undefined) {\n        this.distance = typeof data.distance === \"number\" ? {\n          horizontal: data.distance,\n          vertical: data.distance\n        } : Object.assign({}, data.distance);\n      }\n\n      if (data.drift !== undefined) {\n        this.drift = setRangeValue(data.drift);\n      }\n\n      if (data.enable !== undefined) {\n        this.enable = data.enable;\n      }\n\n      this.gravity.load(data.gravity);\n      var outModes = (_b = (_a = data.outModes) !== null && _a !== void 0 ? _a : data.outMode) !== null && _b !== void 0 ? _b : data.out_mode;\n\n      if (outModes !== undefined) {\n        if (typeof outModes === \"object\") {\n          this.outModes.load(outModes);\n        } else {\n          this.outModes.load({\n            default: outModes\n          });\n        }\n      }\n\n      this.path.load((_c = data.path) !== null && _c !== void 0 ? _c : data.noise);\n\n      if (data.random !== undefined) {\n        this.random = data.random;\n      }\n\n      if (data.size !== undefined) {\n        this.size = data.size;\n      }\n\n      if (data.speed !== undefined) {\n        this.speed = setRangeValue(data.speed);\n      }\n\n      this.spin.load(data.spin);\n\n      if (data.straight !== undefined) {\n        this.straight = data.straight;\n      }\n\n      this.trail.load(data.trail);\n\n      if (data.vibrate !== undefined) {\n        this.vibrate = data.vibrate;\n      }\n\n      if (data.warp !== undefined) {\n        this.warp = data.warp;\n      }\n    }\n  }, {\n    key: \"bounce\",\n    get: function get() {\n      return this.collisions;\n    },\n    set: function set(value) {\n      this.collisions = value;\n    }\n  }, {\n    key: \"collisions\",\n    get: function get() {\n      return false;\n    },\n    set: function set(_) {}\n  }, {\n    key: \"noise\",\n    get: function get() {\n      return this.path;\n    },\n    set: function set(value) {\n      this.path = value;\n    }\n  }, {\n    key: \"outMode\",\n    get: function get() {\n      return this.outModes.default;\n    },\n    set: function set(value) {\n      this.outModes.default = value;\n    }\n  }, {\n    key: \"out_mode\",\n    get: function get() {\n      return this.outMode;\n    },\n    set: function set(value) {\n      this.outMode = value;\n    }\n  }]);\n\n  return Move;\n}();","map":{"version":3,"sources":["/Users/torea/Desktop/freelanceProject2/rise-consulting/node_modules/tsparticles-engine/esm/Options/Classes/Particles/Move/Move.js"],"names":["MoveAngle","MoveAttract","MoveCenter","MoveGravity","MovePath","MoveTrail","OutModes","Spin","setRangeValue","Move","angle","attract","center","decay","distance","direction","drift","enable","gravity","path","outModes","random","size","speed","spin","straight","trail","vibrate","warp","data","_a","_b","_c","load","value","undefined","horizontal","vertical","Object","assign","outMode","out_mode","default","noise","collisions","_"],"mappings":"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","sourcesContent":["import { MoveAngle } from \"./MoveAngle\";\nimport { MoveAttract } from \"./MoveAttract\";\nimport { MoveCenter } from \"./MoveCenter\";\nimport { MoveGravity } from \"./MoveGravity\";\nimport { MovePath } from \"./Path/MovePath\";\nimport { MoveTrail } from \"./MoveTrail\";\nimport { OutModes } from \"./OutModes\";\nimport { Spin } from \"./Spin\";\nimport { setRangeValue } from \"../../../../Utils/NumberUtils\";\nexport class Move {\n    constructor() {\n        this.angle = new MoveAngle();\n        this.attract = new MoveAttract();\n        this.center = new MoveCenter();\n        this.decay = 0;\n        this.distance = {};\n        this.direction = \"none\";\n        this.drift = 0;\n        this.enable = false;\n        this.gravity = new MoveGravity();\n        this.path = new MovePath();\n        this.outModes = new OutModes();\n        this.random = false;\n        this.size = false;\n        this.speed = 2;\n        this.spin = new Spin();\n        this.straight = false;\n        this.trail = new MoveTrail();\n        this.vibrate = false;\n        this.warp = false;\n    }\n    get bounce() {\n        return this.collisions;\n    }\n    set bounce(value) {\n        this.collisions = value;\n    }\n    get collisions() {\n        return false;\n    }\n    set collisions(_) {\n    }\n    get noise() {\n        return this.path;\n    }\n    set noise(value) {\n        this.path = value;\n    }\n    get outMode() {\n        return this.outModes.default;\n    }\n    set outMode(value) {\n        this.outModes.default = value;\n    }\n    get out_mode() {\n        return this.outMode;\n    }\n    set out_mode(value) {\n        this.outMode = value;\n    }\n    load(data) {\n        var _a, _b, _c;\n        if (!data) {\n            return;\n        }\n        this.angle.load(typeof data.angle === \"number\" ? { value: data.angle } : data.angle);\n        this.attract.load(data.attract);\n        this.center.load(data.center);\n        if (data.decay !== undefined) {\n            this.decay = setRangeValue(data.decay);\n        }\n        if (data.direction !== undefined) {\n            this.direction = data.direction;\n        }\n        if (data.distance !== undefined) {\n            this.distance =\n                typeof data.distance === \"number\"\n                    ? {\n                        horizontal: data.distance,\n                        vertical: data.distance,\n                    }\n                    : Object.assign({}, data.distance);\n        }\n        if (data.drift !== undefined) {\n            this.drift = setRangeValue(data.drift);\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        this.gravity.load(data.gravity);\n        const outModes = (_b = (_a = data.outModes) !== null && _a !== void 0 ? _a : data.outMode) !== null && _b !== void 0 ? _b : data.out_mode;\n        if (outModes !== undefined) {\n            if (typeof outModes === \"object\") {\n                this.outModes.load(outModes);\n            }\n            else {\n                this.outModes.load({\n                    default: outModes,\n                });\n            }\n        }\n        this.path.load((_c = data.path) !== null && _c !== void 0 ? _c : data.noise);\n        if (data.random !== undefined) {\n            this.random = data.random;\n        }\n        if (data.size !== undefined) {\n            this.size = data.size;\n        }\n        if (data.speed !== undefined) {\n            this.speed = setRangeValue(data.speed);\n        }\n        this.spin.load(data.spin);\n        if (data.straight !== undefined) {\n            this.straight = data.straight;\n        }\n        this.trail.load(data.trail);\n        if (data.vibrate !== undefined) {\n            this.vibrate = data.vibrate;\n        }\n        if (data.warp !== undefined) {\n            this.warp = data.warp;\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}