{"ast":null,"code":"import { getHslAnimationFromHsl, randomInRange, rangeColorToHsl } from \"tsparticles-engine\";\n\nfunction updateColorValue(delta, value, valueAnimation, max, decrease) {\n  var _a, _b;\n\n  const colorValue = value;\n\n  if (!colorValue || !valueAnimation.enable || colorValue.loops !== undefined && colorValue.maxLoops !== undefined && colorValue.maxLoops > 0 && colorValue.loops >= colorValue.maxLoops) {\n    return;\n  }\n\n  const offset = randomInRange(valueAnimation.offset),\n        velocity = ((_a = value.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor + offset * 3.6,\n        decay = (_b = value.decay) !== null && _b !== void 0 ? _b : 1;\n\n  if (!decrease || colorValue.status === \"increasing\") {\n    colorValue.value += velocity;\n\n    if (colorValue.value > max) {\n      if (!colorValue.loops) {\n        colorValue.loops = 0;\n      }\n\n      colorValue.loops++;\n\n      if (decrease) {\n        colorValue.status = \"decreasing\";\n        colorValue.value -= colorValue.value % max;\n      }\n    }\n  } else {\n    colorValue.value -= velocity;\n\n    if (colorValue.value < 0) {\n      if (!colorValue.loops) {\n        colorValue.loops = 0;\n      }\n\n      colorValue.loops++;\n      colorValue.status = \"increasing\";\n      colorValue.value += colorValue.value;\n    }\n  }\n\n  if (colorValue.velocity && decay !== 1) {\n    colorValue.velocity *= decay;\n  }\n\n  if (colorValue.value > max) {\n    colorValue.value %= max;\n  }\n}\n\nfunction updateColor(particle, delta) {\n  var _a, _b, _c;\n\n  const animationOptions = particle.options.color.animation;\n  const h = (_a = particle.color) === null || _a === void 0 ? void 0 : _a.h,\n        s = (_b = particle.color) === null || _b === void 0 ? void 0 : _b.s,\n        l = (_c = particle.color) === null || _c === void 0 ? void 0 : _c.l;\n\n  if (h) {\n    updateColorValue(delta, h, animationOptions.h, 360, false);\n  }\n\n  if (s) {\n    updateColorValue(delta, s, animationOptions.s, 100, true);\n  }\n\n  if (l) {\n    updateColorValue(delta, l, animationOptions.l, 100, true);\n  }\n}\n\nexport class ColorUpdater {\n  constructor(container) {\n    this.container = container;\n  }\n\n  init(particle) {\n    const hslColor = rangeColorToHsl(particle.options.color, particle.id, particle.options.reduceDuplicates);\n\n    if (hslColor) {\n      particle.color = getHslAnimationFromHsl(hslColor, particle.options.color.animation, this.container.retina.reduceFactor);\n    }\n  }\n\n  isEnabled(particle) {\n    var _a, _b, _c;\n\n    const animationOptions = particle.options.color.animation;\n    return !particle.destroyed && !particle.spawning && (((_a = particle.color) === null || _a === void 0 ? void 0 : _a.h.value) !== undefined && animationOptions.h.enable || ((_b = particle.color) === null || _b === void 0 ? void 0 : _b.s.value) !== undefined && animationOptions.s.enable || ((_c = particle.color) === null || _c === void 0 ? void 0 : _c.l.value) !== undefined && animationOptions.l.enable);\n  }\n\n  update(particle, delta) {\n    updateColor(particle, delta);\n  }\n\n}","map":{"version":3,"sources":["/Users/torea/Desktop/freelanceProject2/open-react-template/node_modules/tsparticles-updater-color/esm/ColorUpdater.js"],"names":["getHslAnimationFromHsl","randomInRange","rangeColorToHsl","updateColorValue","delta","value","valueAnimation","max","decrease","_a","_b","colorValue","enable","loops","undefined","maxLoops","offset","velocity","factor","decay","status","updateColor","particle","_c","animationOptions","options","color","animation","h","s","l","ColorUpdater","constructor","container","init","hslColor","id","reduceDuplicates","retina","reduceFactor","isEnabled","destroyed","spawning","update"],"mappings":"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","sourcesContent":["import { getHslAnimationFromHsl, randomInRange, rangeColorToHsl } from \"tsparticles-engine\";\nfunction updateColorValue(delta, value, valueAnimation, max, decrease) {\n    var _a, _b;\n    const colorValue = value;\n    if (!colorValue ||\n        !valueAnimation.enable ||\n        (colorValue.loops !== undefined &&\n            colorValue.maxLoops !== undefined &&\n            colorValue.maxLoops > 0 &&\n            colorValue.loops >= colorValue.maxLoops)) {\n        return;\n    }\n    const offset = randomInRange(valueAnimation.offset), velocity = ((_a = value.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor + offset * 3.6, decay = (_b = value.decay) !== null && _b !== void 0 ? _b : 1;\n    if (!decrease || colorValue.status === \"increasing\") {\n        colorValue.value += velocity;\n        if (colorValue.value > max) {\n            if (!colorValue.loops) {\n                colorValue.loops = 0;\n            }\n            colorValue.loops++;\n            if (decrease) {\n                colorValue.status = \"decreasing\";\n                colorValue.value -= colorValue.value % max;\n            }\n        }\n    }\n    else {\n        colorValue.value -= velocity;\n        if (colorValue.value < 0) {\n            if (!colorValue.loops) {\n                colorValue.loops = 0;\n            }\n            colorValue.loops++;\n            colorValue.status = \"increasing\";\n            colorValue.value += colorValue.value;\n        }\n    }\n    if (colorValue.velocity && decay !== 1) {\n        colorValue.velocity *= decay;\n    }\n    if (colorValue.value > max) {\n        colorValue.value %= max;\n    }\n}\nfunction updateColor(particle, delta) {\n    var _a, _b, _c;\n    const animationOptions = particle.options.color.animation;\n    const h = (_a = particle.color) === null || _a === void 0 ? void 0 : _a.h, s = (_b = particle.color) === null || _b === void 0 ? void 0 : _b.s, l = (_c = particle.color) === null || _c === void 0 ? void 0 : _c.l;\n    if (h) {\n        updateColorValue(delta, h, animationOptions.h, 360, false);\n    }\n    if (s) {\n        updateColorValue(delta, s, animationOptions.s, 100, true);\n    }\n    if (l) {\n        updateColorValue(delta, l, animationOptions.l, 100, true);\n    }\n}\nexport class ColorUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    init(particle) {\n        const hslColor = rangeColorToHsl(particle.options.color, particle.id, particle.options.reduceDuplicates);\n        if (hslColor) {\n            particle.color = getHslAnimationFromHsl(hslColor, particle.options.color.animation, this.container.retina.reduceFactor);\n        }\n    }\n    isEnabled(particle) {\n        var _a, _b, _c;\n        const animationOptions = particle.options.color.animation;\n        return (!particle.destroyed &&\n            !particle.spawning &&\n            ((((_a = particle.color) === null || _a === void 0 ? void 0 : _a.h.value) !== undefined && animationOptions.h.enable) ||\n                (((_b = particle.color) === null || _b === void 0 ? void 0 : _b.s.value) !== undefined && animationOptions.s.enable) ||\n                (((_c = particle.color) === null || _c === void 0 ? void 0 : _c.l.value) !== undefined && animationOptions.l.enable)));\n    }\n    update(particle, delta) {\n        updateColor(particle, delta);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}