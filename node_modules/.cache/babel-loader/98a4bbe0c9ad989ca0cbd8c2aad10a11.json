{"ast":null,"code":"import { getRandom, getRangeValue } from \"tsparticles-engine\";\nimport { Rotate } from \"./Options/Classes/Rotate\";\n\nfunction updateAngle(particle, delta) {\n  var _a, _b;\n\n  const rotate = particle.rotate,\n        rotateOptions = particle.options.rotate;\n\n  if (!rotate || !rotateOptions) {\n    return;\n  }\n\n  const rotateAnimation = rotateOptions.animation,\n        speed = ((_a = rotate.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor,\n        max = 2 * Math.PI,\n        decay = (_b = rotate.decay) !== null && _b !== void 0 ? _b : 1;\n\n  if (!rotateAnimation.enable) {\n    return;\n  }\n\n  switch (rotate.status) {\n    case \"increasing\":\n      rotate.value += speed;\n\n      if (rotate.value > max) {\n        rotate.value -= max;\n      }\n\n      break;\n\n    case \"decreasing\":\n    default:\n      rotate.value -= speed;\n\n      if (rotate.value < 0) {\n        rotate.value += max;\n      }\n\n      break;\n  }\n\n  if (rotate.velocity && decay !== 1) {\n    rotate.velocity *= decay;\n  }\n}\n\nexport class RotateUpdater {\n  constructor(container) {\n    this.container = container;\n  }\n\n  init(particle) {\n    const rotateOptions = particle.options.rotate;\n\n    if (!rotateOptions) {\n      return;\n    }\n\n    particle.rotate = {\n      enable: rotateOptions.animation.enable,\n      value: getRangeValue(rotateOptions.value) * Math.PI / 180\n    };\n    particle.pathRotation = rotateOptions.path;\n    let rotateDirection = rotateOptions.direction;\n\n    if (rotateDirection === \"random\") {\n      const index = Math.floor(getRandom() * 2);\n      rotateDirection = index > 0 ? \"counter-clockwise\" : \"clockwise\";\n    }\n\n    switch (rotateDirection) {\n      case \"counter-clockwise\":\n      case \"counterClockwise\":\n        particle.rotate.status = \"decreasing\";\n        break;\n\n      case \"clockwise\":\n        particle.rotate.status = \"increasing\";\n        break;\n    }\n\n    const rotateAnimation = rotateOptions.animation;\n\n    if (rotateAnimation.enable) {\n      particle.rotate.decay = 1 - getRangeValue(rotateAnimation.decay);\n      particle.rotate.velocity = getRangeValue(rotateAnimation.speed) / 360 * this.container.retina.reduceFactor;\n\n      if (!rotateAnimation.sync) {\n        particle.rotate.velocity *= getRandom();\n      }\n    }\n\n    particle.rotation = particle.rotate.value;\n  }\n\n  isEnabled(particle) {\n    const rotate = particle.options.rotate;\n\n    if (!rotate) {\n      return false;\n    }\n\n    return !particle.destroyed && !particle.spawning && rotate.animation.enable && !rotate.path;\n  }\n\n  loadOptions(options, ...sources) {\n    if (!options.rotate) {\n      options.rotate = new Rotate();\n    }\n\n    for (const source of sources) {\n      options.rotate.load(source === null || source === void 0 ? void 0 : source.rotate);\n    }\n  }\n\n  update(particle, delta) {\n    var _a, _b;\n\n    if (!this.isEnabled(particle)) {\n      return;\n    }\n\n    updateAngle(particle, delta);\n    particle.rotation = (_b = (_a = particle.rotate) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : 0;\n  }\n\n}","map":{"version":3,"sources":["/Users/torea/Desktop/freelanceProject2/open-react-template/node_modules/tsparticles-updater-angle/esm/RotateUpdater.js"],"names":["getRandom","getRangeValue","Rotate","updateAngle","particle","delta","_a","_b","rotate","rotateOptions","options","rotateAnimation","animation","speed","velocity","factor","max","Math","PI","decay","enable","status","value","RotateUpdater","constructor","container","init","pathRotation","path","rotateDirection","direction","index","floor","retina","reduceFactor","sync","rotation","isEnabled","destroyed","spawning","loadOptions","sources","source","load","update"],"mappings":"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","sourcesContent":["import { getRandom, getRangeValue } from \"tsparticles-engine\";\nimport { Rotate } from \"./Options/Classes/Rotate\";\nfunction updateAngle(particle, delta) {\n    var _a, _b;\n    const rotate = particle.rotate, rotateOptions = particle.options.rotate;\n    if (!rotate || !rotateOptions) {\n        return;\n    }\n    const rotateAnimation = rotateOptions.animation, speed = ((_a = rotate.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor, max = 2 * Math.PI, decay = (_b = rotate.decay) !== null && _b !== void 0 ? _b : 1;\n    if (!rotateAnimation.enable) {\n        return;\n    }\n    switch (rotate.status) {\n        case \"increasing\":\n            rotate.value += speed;\n            if (rotate.value > max) {\n                rotate.value -= max;\n            }\n            break;\n        case \"decreasing\":\n        default:\n            rotate.value -= speed;\n            if (rotate.value < 0) {\n                rotate.value += max;\n            }\n            break;\n    }\n    if (rotate.velocity && decay !== 1) {\n        rotate.velocity *= decay;\n    }\n}\nexport class RotateUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    init(particle) {\n        const rotateOptions = particle.options.rotate;\n        if (!rotateOptions) {\n            return;\n        }\n        particle.rotate = {\n            enable: rotateOptions.animation.enable,\n            value: (getRangeValue(rotateOptions.value) * Math.PI) / 180,\n        };\n        particle.pathRotation = rotateOptions.path;\n        let rotateDirection = rotateOptions.direction;\n        if (rotateDirection === \"random\") {\n            const index = Math.floor(getRandom() * 2);\n            rotateDirection = index > 0 ? \"counter-clockwise\" : \"clockwise\";\n        }\n        switch (rotateDirection) {\n            case \"counter-clockwise\":\n            case \"counterClockwise\":\n                particle.rotate.status = \"decreasing\";\n                break;\n            case \"clockwise\":\n                particle.rotate.status = \"increasing\";\n                break;\n        }\n        const rotateAnimation = rotateOptions.animation;\n        if (rotateAnimation.enable) {\n            particle.rotate.decay = 1 - getRangeValue(rotateAnimation.decay);\n            particle.rotate.velocity =\n                (getRangeValue(rotateAnimation.speed) / 360) * this.container.retina.reduceFactor;\n            if (!rotateAnimation.sync) {\n                particle.rotate.velocity *= getRandom();\n            }\n        }\n        particle.rotation = particle.rotate.value;\n    }\n    isEnabled(particle) {\n        const rotate = particle.options.rotate;\n        if (!rotate) {\n            return false;\n        }\n        return !particle.destroyed && !particle.spawning && rotate.animation.enable && !rotate.path;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.rotate) {\n            options.rotate = new Rotate();\n        }\n        for (const source of sources) {\n            options.rotate.load(source === null || source === void 0 ? void 0 : source.rotate);\n        }\n    }\n    update(particle, delta) {\n        var _a, _b;\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateAngle(particle, delta);\n        particle.rotation = (_b = (_a = particle.rotate) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : 0;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}