{"ast":null,"code":"import _regeneratorRuntime from \"/Users/torea/Desktop/freelanceProject2/open-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _createForOfIteratorHelper from \"/Users/torea/Desktop/freelanceProject2/open-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _asyncToGenerator from \"/Users/torea/Desktop/freelanceProject2/open-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/torea/Desktop/freelanceProject2/open-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/torea/Desktop/freelanceProject2/open-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _createSuper from \"/Users/torea/Desktop/freelanceProject2/open-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _inherits from \"/Users/torea/Desktop/freelanceProject2/open-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { ExternalInteractorBase, colorMix, drawLine, getStyleFromHsl, getStyleFromRgb, isInArray } from \"tsparticles-engine\";\nimport { Connect } from \"./Options/Classes/Connect\";\n\nfunction gradient(context, p1, p2, opacity) {\n  var gradStop = Math.floor(p2.getRadius() / p1.getRadius()),\n      color1 = p1.getFillColor(),\n      color2 = p2.getFillColor();\n\n  if (!color1 || !color2) {\n    return;\n  }\n\n  var sourcePos = p1.getPosition(),\n      destPos = p2.getPosition(),\n      midRgb = colorMix(color1, color2, p1.getRadius(), p2.getRadius()),\n      grad = context.createLinearGradient(sourcePos.x, sourcePos.y, destPos.x, destPos.y);\n  grad.addColorStop(0, getStyleFromHsl(color1, opacity));\n  grad.addColorStop(gradStop > 1 ? 1 : gradStop, getStyleFromRgb(midRgb, opacity));\n  grad.addColorStop(1, getStyleFromHsl(color2, opacity));\n  return grad;\n}\n\nfunction drawConnectLine(context, width, lineStyle, begin, end) {\n  drawLine(context, begin, end);\n  context.lineWidth = width;\n  context.strokeStyle = lineStyle;\n  context.stroke();\n}\n\nfunction lineStyle(container, ctx, p1, p2) {\n  var options = container.actualOptions,\n      connectOptions = options.interactivity.modes.connect;\n\n  if (!connectOptions) {\n    return;\n  }\n\n  return gradient(ctx, p1, p2, connectOptions.links.opacity);\n}\n\nfunction drawConnection(container, p1, p2) {\n  container.canvas.draw(function (ctx) {\n    var _a;\n\n    var ls = lineStyle(container, ctx, p1, p2);\n\n    if (!ls) {\n      return;\n    }\n\n    var pos1 = p1.getPosition(),\n        pos2 = p2.getPosition();\n    drawConnectLine(ctx, (_a = p1.retina.linksWidth) !== null && _a !== void 0 ? _a : 0, ls, pos1, pos2);\n  });\n}\n\nexport var Connector = /*#__PURE__*/function (_ExternalInteractorBa) {\n  _inherits(Connector, _ExternalInteractorBa);\n\n  var _super = _createSuper(Connector);\n\n  function Connector(container) {\n    _classCallCheck(this, Connector);\n\n    return _super.call(this, container);\n  }\n\n  _createClass(Connector, [{\n    key: \"clear\",\n    value: function clear() {}\n  }, {\n    key: \"init\",\n    value: function init() {\n      var container = this.container,\n          connect = container.actualOptions.interactivity.modes.connect;\n\n      if (!connect) {\n        return;\n      }\n\n      container.retina.connectModeDistance = connect.distance * container.retina.pixelRatio;\n      container.retina.connectModeRadius = connect.radius * container.retina.pixelRatio;\n    }\n  }, {\n    key: \"interact\",\n    value: function () {\n      var _interact = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _this = this;\n\n        var container, options, mousePos, distance, query, i, _iterator, _step, p1, pos1, _iterator2, _step2, p2, pos2, distMax, xDiff, yDiff;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                container = this.container, options = container.actualOptions;\n\n                if (!(options.interactivity.events.onHover.enable && container.interactivity.status === \"pointermove\")) {\n                  _context.next = 9;\n                  break;\n                }\n\n                mousePos = container.interactivity.mouse.position;\n\n                if (!(!container.retina.connectModeDistance || container.retina.connectModeDistance < 0 || !container.retina.connectModeRadius || container.retina.connectModeRadius < 0 || !mousePos)) {\n                  _context.next = 5;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 5:\n                distance = Math.abs(container.retina.connectModeRadius), query = container.particles.quadTree.queryCircle(mousePos, distance, function (p) {\n                  return _this.isEnabled(p);\n                });\n                i = 0;\n                _iterator = _createForOfIteratorHelper(query);\n\n                try {\n                  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                    p1 = _step.value;\n                    pos1 = p1.getPosition();\n                    _iterator2 = _createForOfIteratorHelper(query.slice(i + 1));\n\n                    try {\n                      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                        p2 = _step2.value;\n                        pos2 = p2.getPosition(), distMax = Math.abs(container.retina.connectModeDistance), xDiff = Math.abs(pos1.x - pos2.x), yDiff = Math.abs(pos1.y - pos2.y);\n\n                        if (xDiff < distMax && yDiff < distMax) {\n                          drawConnection(container, p1, p2);\n                        }\n                      }\n                    } catch (err) {\n                      _iterator2.e(err);\n                    } finally {\n                      _iterator2.f();\n                    }\n\n                    ++i;\n                  }\n                } catch (err) {\n                  _iterator.e(err);\n                } finally {\n                  _iterator.f();\n                }\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function interact() {\n        return _interact.apply(this, arguments);\n      }\n\n      return interact;\n    }()\n  }, {\n    key: \"isEnabled\",\n    value: function isEnabled(particle) {\n      var _a;\n\n      var container = this.container,\n          mouse = container.interactivity.mouse,\n          events = ((_a = particle === null || particle === void 0 ? void 0 : particle.interactivity) !== null && _a !== void 0 ? _a : container.actualOptions.interactivity).events;\n\n      if (!(events.onHover.enable && mouse.position)) {\n        return false;\n      }\n\n      return isInArray(\"connect\", events.onHover.mode);\n    }\n  }, {\n    key: \"loadModeOptions\",\n    value: function loadModeOptions(options) {\n      if (!options.connect) {\n        options.connect = new Connect();\n      }\n\n      for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        sources[_key - 1] = arguments[_key];\n      }\n\n      for (var _i = 0, _sources = sources; _i < _sources.length; _i++) {\n        var source = _sources[_i];\n        options.connect.load(source === null || source === void 0 ? void 0 : source.connect);\n      }\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {}\n  }]);\n\n  return Connector;\n}(ExternalInteractorBase);","map":{"version":3,"sources":["/Users/torea/Desktop/freelanceProject2/open-react-template/node_modules/tsparticles-interaction-external-connect/esm/Connector.js"],"names":["ExternalInteractorBase","colorMix","drawLine","getStyleFromHsl","getStyleFromRgb","isInArray","Connect","gradient","context","p1","p2","opacity","gradStop","Math","floor","getRadius","color1","getFillColor","color2","sourcePos","getPosition","destPos","midRgb","grad","createLinearGradient","x","y","addColorStop","drawConnectLine","width","lineStyle","begin","end","lineWidth","strokeStyle","stroke","container","ctx","options","actualOptions","connectOptions","interactivity","modes","connect","links","drawConnection","canvas","draw","_a","ls","pos1","pos2","retina","linksWidth","Connector","connectModeDistance","distance","pixelRatio","connectModeRadius","radius","events","onHover","enable","status","mousePos","mouse","position","abs","query","particles","quadTree","queryCircle","p","isEnabled","i","slice","distMax","xDiff","yDiff","particle","mode","sources","source","load"],"mappings":"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","sourcesContent":["import { ExternalInteractorBase, colorMix, drawLine, getStyleFromHsl, getStyleFromRgb, isInArray, } from \"tsparticles-engine\";\nimport { Connect } from \"./Options/Classes/Connect\";\nfunction gradient(context, p1, p2, opacity) {\n    const gradStop = Math.floor(p2.getRadius() / p1.getRadius()), color1 = p1.getFillColor(), color2 = p2.getFillColor();\n    if (!color1 || !color2) {\n        return;\n    }\n    const sourcePos = p1.getPosition(), destPos = p2.getPosition(), midRgb = colorMix(color1, color2, p1.getRadius(), p2.getRadius()), grad = context.createLinearGradient(sourcePos.x, sourcePos.y, destPos.x, destPos.y);\n    grad.addColorStop(0, getStyleFromHsl(color1, opacity));\n    grad.addColorStop(gradStop > 1 ? 1 : gradStop, getStyleFromRgb(midRgb, opacity));\n    grad.addColorStop(1, getStyleFromHsl(color2, opacity));\n    return grad;\n}\nfunction drawConnectLine(context, width, lineStyle, begin, end) {\n    drawLine(context, begin, end);\n    context.lineWidth = width;\n    context.strokeStyle = lineStyle;\n    context.stroke();\n}\nfunction lineStyle(container, ctx, p1, p2) {\n    const options = container.actualOptions, connectOptions = options.interactivity.modes.connect;\n    if (!connectOptions) {\n        return;\n    }\n    return gradient(ctx, p1, p2, connectOptions.links.opacity);\n}\nfunction drawConnection(container, p1, p2) {\n    container.canvas.draw((ctx) => {\n        var _a;\n        const ls = lineStyle(container, ctx, p1, p2);\n        if (!ls) {\n            return;\n        }\n        const pos1 = p1.getPosition(), pos2 = p2.getPosition();\n        drawConnectLine(ctx, (_a = p1.retina.linksWidth) !== null && _a !== void 0 ? _a : 0, ls, pos1, pos2);\n    });\n}\nexport class Connector extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    clear() {\n    }\n    init() {\n        const container = this.container, connect = container.actualOptions.interactivity.modes.connect;\n        if (!connect) {\n            return;\n        }\n        container.retina.connectModeDistance = connect.distance * container.retina.pixelRatio;\n        container.retina.connectModeRadius = connect.radius * container.retina.pixelRatio;\n    }\n    async interact() {\n        const container = this.container, options = container.actualOptions;\n        if (options.interactivity.events.onHover.enable && container.interactivity.status === \"pointermove\") {\n            const mousePos = container.interactivity.mouse.position;\n            if (!container.retina.connectModeDistance ||\n                container.retina.connectModeDistance < 0 ||\n                !container.retina.connectModeRadius ||\n                container.retina.connectModeRadius < 0 ||\n                !mousePos) {\n                return;\n            }\n            const distance = Math.abs(container.retina.connectModeRadius), query = container.particles.quadTree.queryCircle(mousePos, distance, (p) => this.isEnabled(p));\n            let i = 0;\n            for (const p1 of query) {\n                const pos1 = p1.getPosition();\n                for (const p2 of query.slice(i + 1)) {\n                    const pos2 = p2.getPosition(), distMax = Math.abs(container.retina.connectModeDistance), xDiff = Math.abs(pos1.x - pos2.x), yDiff = Math.abs(pos1.y - pos2.y);\n                    if (xDiff < distMax && yDiff < distMax) {\n                        drawConnection(container, p1, p2);\n                    }\n                }\n                ++i;\n            }\n        }\n    }\n    isEnabled(particle) {\n        var _a;\n        const container = this.container, mouse = container.interactivity.mouse, events = ((_a = particle === null || particle === void 0 ? void 0 : particle.interactivity) !== null && _a !== void 0 ? _a : container.actualOptions.interactivity).events;\n        if (!(events.onHover.enable && mouse.position)) {\n            return false;\n        }\n        return isInArray(\"connect\", events.onHover.mode);\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.connect) {\n            options.connect = new Connect();\n        }\n        for (const source of sources) {\n            options.connect.load(source === null || source === void 0 ? void 0 : source.connect);\n        }\n    }\n    reset() {\n    }\n}\n"]},"metadata":{},"sourceType":"module"}