{"ast":null,"code":"import { getRangeValue, getValue, itemFromSingleOrMultiple, loadParticlesOptions, randomInRange, setRangeValue } from \"tsparticles-engine\";\nimport { Destroy } from \"./Options/Classes/Destroy\";\nexport class DestroyUpdater {\n  constructor(engine, container) {\n    this.engine = engine;\n    this.container = container;\n  }\n\n  init(particle) {\n    const container = this.container,\n          particlesOptions = particle.options,\n          destroyOptions = particlesOptions.destroy;\n\n    if (!destroyOptions) {\n      return;\n    }\n\n    particle.splitCount = 0;\n    const destroyBounds = destroyOptions.bounds;\n\n    if (!particle.destroyBounds) {\n      particle.destroyBounds = {};\n    }\n\n    if (destroyBounds.bottom) {\n      particle.destroyBounds.bottom = getRangeValue(destroyBounds.bottom) * container.canvas.size.height / 100;\n    }\n\n    if (destroyBounds.left) {\n      particle.destroyBounds.left = getRangeValue(destroyBounds.left) * container.canvas.size.width / 100;\n    }\n\n    if (destroyBounds.right) {\n      particle.destroyBounds.right = getRangeValue(destroyBounds.right) * container.canvas.size.width / 100;\n    }\n\n    if (destroyBounds.top) {\n      particle.destroyBounds.top = getRangeValue(destroyBounds.top) * container.canvas.size.height / 100;\n    }\n  }\n\n  isEnabled(particle) {\n    return !particle.destroyed;\n  }\n\n  loadOptions(options, ...sources) {\n    if (!options.destroy) {\n      options.destroy = new Destroy();\n    }\n\n    for (const source of sources) {\n      options.destroy.load(source === null || source === void 0 ? void 0 : source.destroy);\n    }\n  }\n\n  particleDestroyed(particle, override) {\n    if (override) {\n      return;\n    }\n\n    const destroyOptions = particle.options.destroy;\n\n    if (destroyOptions && destroyOptions.mode === \"split\") {\n      this.split(particle);\n    }\n  }\n\n  update(particle) {\n    if (!this.isEnabled(particle)) {\n      return;\n    }\n\n    const position = particle.getPosition(),\n          bounds = particle.destroyBounds;\n\n    if (!bounds) {\n      return;\n    }\n\n    if (bounds.bottom !== undefined && position.y >= bounds.bottom || bounds.left !== undefined && position.x <= bounds.left || bounds.right !== undefined && position.x >= bounds.right || bounds.top !== undefined && position.y <= bounds.top) {\n      particle.destroy();\n    }\n  }\n\n  addSplitParticle(parent, splitParticlesOptions) {\n    var _a, _b, _c;\n\n    const destroyOptions = parent.options.destroy;\n\n    if (!destroyOptions) {\n      return;\n    }\n\n    const splitOptions = destroyOptions.split,\n          options = loadParticlesOptions(this.engine, this.container, parent.options),\n          factor = getValue(splitOptions.factor),\n          parentColor = parent.getFillColor();\n\n    if (splitOptions.color) {\n      options.color.load(splitOptions.color);\n    } else if (splitOptions.colorOffset && parentColor) {\n      options.color.load({\n        value: {\n          hsl: {\n            h: parentColor.h + getRangeValue((_a = splitOptions.colorOffset.h) !== null && _a !== void 0 ? _a : 0),\n            s: parentColor.s + getRangeValue((_b = splitOptions.colorOffset.s) !== null && _b !== void 0 ? _b : 0),\n            l: parentColor.l + getRangeValue((_c = splitOptions.colorOffset.l) !== null && _c !== void 0 ? _c : 0)\n          }\n        }\n      });\n    } else {\n      options.color.load({\n        value: {\n          hsl: parent.getFillColor()\n        }\n      });\n    }\n\n    options.move.load({\n      center: {\n        x: parent.position.x,\n        y: parent.position.y,\n        mode: \"precise\"\n      }\n    });\n\n    if (typeof options.size.value === \"number\") {\n      options.size.value /= factor;\n    } else {\n      options.size.value.min /= factor;\n      options.size.value.max /= factor;\n    }\n\n    options.load(splitParticlesOptions);\n    const offset = splitOptions.sizeOffset ? setRangeValue(-parent.size.value, parent.size.value) : 0,\n          position = {\n      x: parent.position.x + randomInRange(offset),\n      y: parent.position.y + randomInRange(offset)\n    };\n    return this.container.particles.addParticle(position, options, parent.group, particle => {\n      var _a;\n\n      if (particle.size.value < 0.5) {\n        return false;\n      }\n\n      particle.velocity.length = randomInRange(setRangeValue(parent.velocity.length, particle.velocity.length));\n      particle.splitCount = ((_a = parent.splitCount) !== null && _a !== void 0 ? _a : 0) + 1;\n      particle.unbreakable = true;\n      setTimeout(() => {\n        particle.unbreakable = false;\n      }, 500);\n      return true;\n    });\n  }\n\n  split(particle) {\n    const destroyOptions = particle.options.destroy;\n\n    if (!destroyOptions) {\n      return;\n    }\n\n    const splitOptions = destroyOptions.split;\n\n    if (splitOptions.count >= 0 && (particle.splitCount === undefined || particle.splitCount++ > splitOptions.count)) {\n      return;\n    }\n\n    const rate = getValue(splitOptions.rate),\n          particlesSplitOptions = itemFromSingleOrMultiple(splitOptions.particles);\n\n    for (let i = 0; i < rate; i++) {\n      this.addSplitParticle(particle, particlesSplitOptions);\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/torea/Desktop/freelanceProject2/rise-consulting/node_modules/tsparticles-updater-destroy/esm/DestroyUpdater.js"],"names":["getRangeValue","getValue","itemFromSingleOrMultiple","loadParticlesOptions","randomInRange","setRangeValue","Destroy","DestroyUpdater","constructor","engine","container","init","particle","particlesOptions","options","destroyOptions","destroy","splitCount","destroyBounds","bounds","bottom","canvas","size","height","left","width","right","top","isEnabled","destroyed","loadOptions","sources","source","load","particleDestroyed","override","mode","split","update","position","getPosition","undefined","y","x","addSplitParticle","parent","splitParticlesOptions","_a","_b","_c","splitOptions","factor","parentColor","getFillColor","color","colorOffset","value","hsl","h","s","l","move","center","min","max","offset","sizeOffset","particles","addParticle","group","velocity","length","unbreakable","setTimeout","count","rate","particlesSplitOptions","i"],"mappings":"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","sourcesContent":["import { getRangeValue, getValue, itemFromSingleOrMultiple, loadParticlesOptions, randomInRange, setRangeValue, } from \"tsparticles-engine\";\nimport { Destroy } from \"./Options/Classes/Destroy\";\nexport class DestroyUpdater {\n    constructor(engine, container) {\n        this.engine = engine;\n        this.container = container;\n    }\n    init(particle) {\n        const container = this.container, particlesOptions = particle.options, destroyOptions = particlesOptions.destroy;\n        if (!destroyOptions) {\n            return;\n        }\n        particle.splitCount = 0;\n        const destroyBounds = destroyOptions.bounds;\n        if (!particle.destroyBounds) {\n            particle.destroyBounds = {};\n        }\n        if (destroyBounds.bottom) {\n            particle.destroyBounds.bottom = (getRangeValue(destroyBounds.bottom) * container.canvas.size.height) / 100;\n        }\n        if (destroyBounds.left) {\n            particle.destroyBounds.left = (getRangeValue(destroyBounds.left) * container.canvas.size.width) / 100;\n        }\n        if (destroyBounds.right) {\n            particle.destroyBounds.right = (getRangeValue(destroyBounds.right) * container.canvas.size.width) / 100;\n        }\n        if (destroyBounds.top) {\n            particle.destroyBounds.top = (getRangeValue(destroyBounds.top) * container.canvas.size.height) / 100;\n        }\n    }\n    isEnabled(particle) {\n        return !particle.destroyed;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.destroy) {\n            options.destroy = new Destroy();\n        }\n        for (const source of sources) {\n            options.destroy.load(source === null || source === void 0 ? void 0 : source.destroy);\n        }\n    }\n    particleDestroyed(particle, override) {\n        if (override) {\n            return;\n        }\n        const destroyOptions = particle.options.destroy;\n        if (destroyOptions && destroyOptions.mode === \"split\") {\n            this.split(particle);\n        }\n    }\n    update(particle) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        const position = particle.getPosition(), bounds = particle.destroyBounds;\n        if (!bounds) {\n            return;\n        }\n        if ((bounds.bottom !== undefined && position.y >= bounds.bottom) ||\n            (bounds.left !== undefined && position.x <= bounds.left) ||\n            (bounds.right !== undefined && position.x >= bounds.right) ||\n            (bounds.top !== undefined && position.y <= bounds.top)) {\n            particle.destroy();\n        }\n    }\n    addSplitParticle(parent, splitParticlesOptions) {\n        var _a, _b, _c;\n        const destroyOptions = parent.options.destroy;\n        if (!destroyOptions) {\n            return;\n        }\n        const splitOptions = destroyOptions.split, options = loadParticlesOptions(this.engine, this.container, parent.options), factor = getValue(splitOptions.factor), parentColor = parent.getFillColor();\n        if (splitOptions.color) {\n            options.color.load(splitOptions.color);\n        }\n        else if (splitOptions.colorOffset && parentColor) {\n            options.color.load({\n                value: {\n                    hsl: {\n                        h: parentColor.h + getRangeValue((_a = splitOptions.colorOffset.h) !== null && _a !== void 0 ? _a : 0),\n                        s: parentColor.s + getRangeValue((_b = splitOptions.colorOffset.s) !== null && _b !== void 0 ? _b : 0),\n                        l: parentColor.l + getRangeValue((_c = splitOptions.colorOffset.l) !== null && _c !== void 0 ? _c : 0),\n                    },\n                },\n            });\n        }\n        else {\n            options.color.load({\n                value: {\n                    hsl: parent.getFillColor(),\n                },\n            });\n        }\n        options.move.load({\n            center: {\n                x: parent.position.x,\n                y: parent.position.y,\n                mode: \"precise\",\n            },\n        });\n        if (typeof options.size.value === \"number\") {\n            options.size.value /= factor;\n        }\n        else {\n            options.size.value.min /= factor;\n            options.size.value.max /= factor;\n        }\n        options.load(splitParticlesOptions);\n        const offset = splitOptions.sizeOffset ? setRangeValue(-parent.size.value, parent.size.value) : 0, position = {\n            x: parent.position.x + randomInRange(offset),\n            y: parent.position.y + randomInRange(offset),\n        };\n        return this.container.particles.addParticle(position, options, parent.group, (particle) => {\n            var _a;\n            if (particle.size.value < 0.5) {\n                return false;\n            }\n            particle.velocity.length = randomInRange(setRangeValue(parent.velocity.length, particle.velocity.length));\n            particle.splitCount = ((_a = parent.splitCount) !== null && _a !== void 0 ? _a : 0) + 1;\n            particle.unbreakable = true;\n            setTimeout(() => {\n                particle.unbreakable = false;\n            }, 500);\n            return true;\n        });\n    }\n    split(particle) {\n        const destroyOptions = particle.options.destroy;\n        if (!destroyOptions) {\n            return;\n        }\n        const splitOptions = destroyOptions.split;\n        if (splitOptions.count >= 0 &&\n            (particle.splitCount === undefined || particle.splitCount++ > splitOptions.count)) {\n            return;\n        }\n        const rate = getValue(splitOptions.rate), particlesSplitOptions = itemFromSingleOrMultiple(splitOptions.particles);\n        for (let i = 0; i < rate; i++) {\n            this.addSplitParticle(particle, particlesSplitOptions);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}