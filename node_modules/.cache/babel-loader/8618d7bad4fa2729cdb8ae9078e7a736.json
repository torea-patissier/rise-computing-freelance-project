{"ast":null,"code":"export class InteractionManager {\n  constructor(engine, container) {\n    this.container = container;\n    this._engine = engine;\n    this._interactors = this._engine.plugins.getInteractors(this.container, true);\n    this._externalInteractors = [];\n    this._particleInteractors = [];\n  }\n\n  async externalInteract(delta) {\n    for (const interactor of this._externalInteractors) {\n      if (interactor.isEnabled()) {\n        await interactor.interact(delta);\n      }\n    }\n  }\n\n  handleClickMode(mode) {\n    for (const interactor of this._externalInteractors) {\n      if (interactor.handleClickMode) {\n        interactor.handleClickMode(mode);\n      }\n    }\n  }\n\n  init() {\n    this._externalInteractors = [];\n    this._particleInteractors = [];\n\n    for (const interactor of this._interactors) {\n      switch (interactor.type) {\n        case \"external\":\n          this._externalInteractors.push(interactor);\n\n          break;\n\n        case \"particles\":\n          this._particleInteractors.push(interactor);\n\n          break;\n      }\n\n      interactor.init();\n    }\n  }\n\n  async particlesInteract(particle, delta) {\n    for (const interactor of this._externalInteractors) {\n      interactor.clear(particle, delta);\n    }\n\n    for (const interactor of this._particleInteractors) {\n      if (interactor.isEnabled(particle)) {\n        await interactor.interact(particle, delta);\n      }\n    }\n  }\n\n  async reset(particle) {\n    for (const interactor of this._externalInteractors) {\n      if (interactor.isEnabled()) {\n        await interactor.reset(particle);\n      }\n    }\n\n    for (const interactor of this._particleInteractors) {\n      if (interactor.isEnabled(particle)) {\n        await interactor.reset(particle);\n      }\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/torea/Desktop/freelanceProject2/open-react-template/node_modules/tsparticles-engine/esm/Core/Utils/InteractionManager.js"],"names":["InteractionManager","constructor","engine","container","_engine","_interactors","plugins","getInteractors","_externalInteractors","_particleInteractors","externalInteract","delta","interactor","isEnabled","interact","handleClickMode","mode","init","type","push","particlesInteract","particle","clear","reset"],"mappings":"AAAA,OAAO,MAAMA,kBAAN,CAAyB;AAC5BC,EAAAA,WAAW,CAACC,MAAD,EAASC,SAAT,EAAoB;AAC3B,SAAKA,SAAL,GAAiBA,SAAjB;AACA,SAAKC,OAAL,GAAeF,MAAf;AACA,SAAKG,YAAL,GAAoB,KAAKD,OAAL,CAAaE,OAAb,CAAqBC,cAArB,CAAoC,KAAKJ,SAAzC,EAAoD,IAApD,CAApB;AACA,SAAKK,oBAAL,GAA4B,EAA5B;AACA,SAAKC,oBAAL,GAA4B,EAA5B;AACH;;AACD,QAAMC,gBAAN,CAAuBC,KAAvB,EAA8B;AAC1B,SAAK,MAAMC,UAAX,IAAyB,KAAKJ,oBAA9B,EAAoD;AAChD,UAAII,UAAU,CAACC,SAAX,EAAJ,EAA4B;AACxB,cAAMD,UAAU,CAACE,QAAX,CAAoBH,KAApB,CAAN;AACH;AACJ;AACJ;;AACDI,EAAAA,eAAe,CAACC,IAAD,EAAO;AAClB,SAAK,MAAMJ,UAAX,IAAyB,KAAKJ,oBAA9B,EAAoD;AAChD,UAAII,UAAU,CAACG,eAAf,EAAgC;AAC5BH,QAAAA,UAAU,CAACG,eAAX,CAA2BC,IAA3B;AACH;AACJ;AACJ;;AACDC,EAAAA,IAAI,GAAG;AACH,SAAKT,oBAAL,GAA4B,EAA5B;AACA,SAAKC,oBAAL,GAA4B,EAA5B;;AACA,SAAK,MAAMG,UAAX,IAAyB,KAAKP,YAA9B,EAA4C;AACxC,cAAQO,UAAU,CAACM,IAAnB;AACI,aAAK,UAAL;AACI,eAAKV,oBAAL,CAA0BW,IAA1B,CAA+BP,UAA/B;;AACA;;AACJ,aAAK,WAAL;AACI,eAAKH,oBAAL,CAA0BU,IAA1B,CAA+BP,UAA/B;;AACA;AANR;;AAQAA,MAAAA,UAAU,CAACK,IAAX;AACH;AACJ;;AACD,QAAMG,iBAAN,CAAwBC,QAAxB,EAAkCV,KAAlC,EAAyC;AACrC,SAAK,MAAMC,UAAX,IAAyB,KAAKJ,oBAA9B,EAAoD;AAChDI,MAAAA,UAAU,CAACU,KAAX,CAAiBD,QAAjB,EAA2BV,KAA3B;AACH;;AACD,SAAK,MAAMC,UAAX,IAAyB,KAAKH,oBAA9B,EAAoD;AAChD,UAAIG,UAAU,CAACC,SAAX,CAAqBQ,QAArB,CAAJ,EAAoC;AAChC,cAAMT,UAAU,CAACE,QAAX,CAAoBO,QAApB,EAA8BV,KAA9B,CAAN;AACH;AACJ;AACJ;;AACD,QAAMY,KAAN,CAAYF,QAAZ,EAAsB;AAClB,SAAK,MAAMT,UAAX,IAAyB,KAAKJ,oBAA9B,EAAoD;AAChD,UAAII,UAAU,CAACC,SAAX,EAAJ,EAA4B;AACxB,cAAMD,UAAU,CAACW,KAAX,CAAiBF,QAAjB,CAAN;AACH;AACJ;;AACD,SAAK,MAAMT,UAAX,IAAyB,KAAKH,oBAA9B,EAAoD;AAChD,UAAIG,UAAU,CAACC,SAAX,CAAqBQ,QAArB,CAAJ,EAAoC;AAChC,cAAMT,UAAU,CAACW,KAAX,CAAiBF,QAAjB,CAAN;AACH;AACJ;AACJ;;AA1D2B","sourcesContent":["export class InteractionManager {\n    constructor(engine, container) {\n        this.container = container;\n        this._engine = engine;\n        this._interactors = this._engine.plugins.getInteractors(this.container, true);\n        this._externalInteractors = [];\n        this._particleInteractors = [];\n    }\n    async externalInteract(delta) {\n        for (const interactor of this._externalInteractors) {\n            if (interactor.isEnabled()) {\n                await interactor.interact(delta);\n            }\n        }\n    }\n    handleClickMode(mode) {\n        for (const interactor of this._externalInteractors) {\n            if (interactor.handleClickMode) {\n                interactor.handleClickMode(mode);\n            }\n        }\n    }\n    init() {\n        this._externalInteractors = [];\n        this._particleInteractors = [];\n        for (const interactor of this._interactors) {\n            switch (interactor.type) {\n                case \"external\":\n                    this._externalInteractors.push(interactor);\n                    break;\n                case \"particles\":\n                    this._particleInteractors.push(interactor);\n                    break;\n            }\n            interactor.init();\n        }\n    }\n    async particlesInteract(particle, delta) {\n        for (const interactor of this._externalInteractors) {\n            interactor.clear(particle, delta);\n        }\n        for (const interactor of this._particleInteractors) {\n            if (interactor.isEnabled(particle)) {\n                await interactor.interact(particle, delta);\n            }\n        }\n    }\n    async reset(particle) {\n        for (const interactor of this._externalInteractors) {\n            if (interactor.isEnabled()) {\n                await interactor.reset(particle);\n            }\n        }\n        for (const interactor of this._particleInteractors) {\n            if (interactor.isEnabled(particle)) {\n                await interactor.reset(particle);\n            }\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}