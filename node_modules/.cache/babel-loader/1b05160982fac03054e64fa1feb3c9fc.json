{"ast":null,"code":"import { ExternalInteractorBase, colorMix, drawLine, getStyleFromHsl, getStyleFromRgb, isInArray } from \"tsparticles-engine\";\nimport { Connect } from \"./Options/Classes/Connect\";\n\nfunction gradient(context, p1, p2, opacity) {\n  const gradStop = Math.floor(p2.getRadius() / p1.getRadius()),\n        color1 = p1.getFillColor(),\n        color2 = p2.getFillColor();\n\n  if (!color1 || !color2) {\n    return;\n  }\n\n  const sourcePos = p1.getPosition(),\n        destPos = p2.getPosition(),\n        midRgb = colorMix(color1, color2, p1.getRadius(), p2.getRadius()),\n        grad = context.createLinearGradient(sourcePos.x, sourcePos.y, destPos.x, destPos.y);\n  grad.addColorStop(0, getStyleFromHsl(color1, opacity));\n  grad.addColorStop(gradStop > 1 ? 1 : gradStop, getStyleFromRgb(midRgb, opacity));\n  grad.addColorStop(1, getStyleFromHsl(color2, opacity));\n  return grad;\n}\n\nfunction drawConnectLine(context, width, lineStyle, begin, end) {\n  drawLine(context, begin, end);\n  context.lineWidth = width;\n  context.strokeStyle = lineStyle;\n  context.stroke();\n}\n\nfunction lineStyle(container, ctx, p1, p2) {\n  const options = container.actualOptions,\n        connectOptions = options.interactivity.modes.connect;\n\n  if (!connectOptions) {\n    return;\n  }\n\n  return gradient(ctx, p1, p2, connectOptions.links.opacity);\n}\n\nfunction drawConnection(container, p1, p2) {\n  container.canvas.draw(ctx => {\n    var _a;\n\n    const ls = lineStyle(container, ctx, p1, p2);\n\n    if (!ls) {\n      return;\n    }\n\n    const pos1 = p1.getPosition(),\n          pos2 = p2.getPosition();\n    drawConnectLine(ctx, (_a = p1.retina.linksWidth) !== null && _a !== void 0 ? _a : 0, ls, pos1, pos2);\n  });\n}\n\nexport class Connector extends ExternalInteractorBase {\n  constructor(container) {\n    super(container);\n  }\n\n  clear() {}\n\n  init() {\n    const container = this.container,\n          connect = container.actualOptions.interactivity.modes.connect;\n\n    if (!connect) {\n      return;\n    }\n\n    container.retina.connectModeDistance = connect.distance * container.retina.pixelRatio;\n    container.retina.connectModeRadius = connect.radius * container.retina.pixelRatio;\n  }\n\n  async interact() {\n    const container = this.container,\n          options = container.actualOptions;\n\n    if (options.interactivity.events.onHover.enable && container.interactivity.status === \"pointermove\") {\n      const mousePos = container.interactivity.mouse.position;\n\n      if (!container.retina.connectModeDistance || container.retina.connectModeDistance < 0 || !container.retina.connectModeRadius || container.retina.connectModeRadius < 0 || !mousePos) {\n        return;\n      }\n\n      const distance = Math.abs(container.retina.connectModeRadius),\n            query = container.particles.quadTree.queryCircle(mousePos, distance, p => this.isEnabled(p));\n      let i = 0;\n\n      for (const p1 of query) {\n        const pos1 = p1.getPosition();\n\n        for (const p2 of query.slice(i + 1)) {\n          const pos2 = p2.getPosition(),\n                distMax = Math.abs(container.retina.connectModeDistance),\n                xDiff = Math.abs(pos1.x - pos2.x),\n                yDiff = Math.abs(pos1.y - pos2.y);\n\n          if (xDiff < distMax && yDiff < distMax) {\n            drawConnection(container, p1, p2);\n          }\n        }\n\n        ++i;\n      }\n    }\n  }\n\n  isEnabled(particle) {\n    var _a;\n\n    const container = this.container,\n          mouse = container.interactivity.mouse,\n          events = ((_a = particle === null || particle === void 0 ? void 0 : particle.interactivity) !== null && _a !== void 0 ? _a : container.actualOptions.interactivity).events;\n\n    if (!(events.onHover.enable && mouse.position)) {\n      return false;\n    }\n\n    return isInArray(\"connect\", events.onHover.mode);\n  }\n\n  loadModeOptions(options, ...sources) {\n    if (!options.connect) {\n      options.connect = new Connect();\n    }\n\n    for (const source of sources) {\n      options.connect.load(source === null || source === void 0 ? void 0 : source.connect);\n    }\n  }\n\n  reset() {}\n\n}","map":{"version":3,"sources":["/Users/torea/Desktop/freelanceProject2/open-react-template/node_modules/tsparticles-interaction-external-connect/esm/Connector.js"],"names":["ExternalInteractorBase","colorMix","drawLine","getStyleFromHsl","getStyleFromRgb","isInArray","Connect","gradient","context","p1","p2","opacity","gradStop","Math","floor","getRadius","color1","getFillColor","color2","sourcePos","getPosition","destPos","midRgb","grad","createLinearGradient","x","y","addColorStop","drawConnectLine","width","lineStyle","begin","end","lineWidth","strokeStyle","stroke","container","ctx","options","actualOptions","connectOptions","interactivity","modes","connect","links","drawConnection","canvas","draw","_a","ls","pos1","pos2","retina","linksWidth","Connector","constructor","clear","init","connectModeDistance","distance","pixelRatio","connectModeRadius","radius","interact","events","onHover","enable","status","mousePos","mouse","position","abs","query","particles","quadTree","queryCircle","p","isEnabled","i","slice","distMax","xDiff","yDiff","particle","mode","loadModeOptions","sources","source","load","reset"],"mappings":"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","sourcesContent":["import { ExternalInteractorBase, colorMix, drawLine, getStyleFromHsl, getStyleFromRgb, isInArray, } from \"tsparticles-engine\";\nimport { Connect } from \"./Options/Classes/Connect\";\nfunction gradient(context, p1, p2, opacity) {\n    const gradStop = Math.floor(p2.getRadius() / p1.getRadius()), color1 = p1.getFillColor(), color2 = p2.getFillColor();\n    if (!color1 || !color2) {\n        return;\n    }\n    const sourcePos = p1.getPosition(), destPos = p2.getPosition(), midRgb = colorMix(color1, color2, p1.getRadius(), p2.getRadius()), grad = context.createLinearGradient(sourcePos.x, sourcePos.y, destPos.x, destPos.y);\n    grad.addColorStop(0, getStyleFromHsl(color1, opacity));\n    grad.addColorStop(gradStop > 1 ? 1 : gradStop, getStyleFromRgb(midRgb, opacity));\n    grad.addColorStop(1, getStyleFromHsl(color2, opacity));\n    return grad;\n}\nfunction drawConnectLine(context, width, lineStyle, begin, end) {\n    drawLine(context, begin, end);\n    context.lineWidth = width;\n    context.strokeStyle = lineStyle;\n    context.stroke();\n}\nfunction lineStyle(container, ctx, p1, p2) {\n    const options = container.actualOptions, connectOptions = options.interactivity.modes.connect;\n    if (!connectOptions) {\n        return;\n    }\n    return gradient(ctx, p1, p2, connectOptions.links.opacity);\n}\nfunction drawConnection(container, p1, p2) {\n    container.canvas.draw((ctx) => {\n        var _a;\n        const ls = lineStyle(container, ctx, p1, p2);\n        if (!ls) {\n            return;\n        }\n        const pos1 = p1.getPosition(), pos2 = p2.getPosition();\n        drawConnectLine(ctx, (_a = p1.retina.linksWidth) !== null && _a !== void 0 ? _a : 0, ls, pos1, pos2);\n    });\n}\nexport class Connector extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    clear() {\n    }\n    init() {\n        const container = this.container, connect = container.actualOptions.interactivity.modes.connect;\n        if (!connect) {\n            return;\n        }\n        container.retina.connectModeDistance = connect.distance * container.retina.pixelRatio;\n        container.retina.connectModeRadius = connect.radius * container.retina.pixelRatio;\n    }\n    async interact() {\n        const container = this.container, options = container.actualOptions;\n        if (options.interactivity.events.onHover.enable && container.interactivity.status === \"pointermove\") {\n            const mousePos = container.interactivity.mouse.position;\n            if (!container.retina.connectModeDistance ||\n                container.retina.connectModeDistance < 0 ||\n                !container.retina.connectModeRadius ||\n                container.retina.connectModeRadius < 0 ||\n                !mousePos) {\n                return;\n            }\n            const distance = Math.abs(container.retina.connectModeRadius), query = container.particles.quadTree.queryCircle(mousePos, distance, (p) => this.isEnabled(p));\n            let i = 0;\n            for (const p1 of query) {\n                const pos1 = p1.getPosition();\n                for (const p2 of query.slice(i + 1)) {\n                    const pos2 = p2.getPosition(), distMax = Math.abs(container.retina.connectModeDistance), xDiff = Math.abs(pos1.x - pos2.x), yDiff = Math.abs(pos1.y - pos2.y);\n                    if (xDiff < distMax && yDiff < distMax) {\n                        drawConnection(container, p1, p2);\n                    }\n                }\n                ++i;\n            }\n        }\n    }\n    isEnabled(particle) {\n        var _a;\n        const container = this.container, mouse = container.interactivity.mouse, events = ((_a = particle === null || particle === void 0 ? void 0 : particle.interactivity) !== null && _a !== void 0 ? _a : container.actualOptions.interactivity).events;\n        if (!(events.onHover.enable && mouse.position)) {\n            return false;\n        }\n        return isInArray(\"connect\", events.onHover.mode);\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.connect) {\n            options.connect = new Connect();\n        }\n        for (const source of sources) {\n            options.connect.load(source === null || source === void 0 ? void 0 : source.connect);\n        }\n    }\n    reset() {\n    }\n}\n"]},"metadata":{},"sourceType":"module"}