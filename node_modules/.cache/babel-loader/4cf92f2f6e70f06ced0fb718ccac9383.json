{"ast":null,"code":"import { deepExtend } from \"../../../../Utils/Utils\";\nconst charKey = \"character\",\n      charAltKey = \"char\",\n      imageKey = \"image\",\n      imageAltKey = \"images\",\n      polygonKey = \"polygon\",\n      polygonAltKey = \"star\";\nexport class Shape {\n  constructor() {\n    this.options = {};\n    this.type = \"circle\";\n  }\n\n  get character() {\n    var _a;\n\n    return (_a = this.options[charKey]) !== null && _a !== void 0 ? _a : this.options[charAltKey];\n  }\n\n  set character(value) {\n    this.options[charAltKey] = this.options[charKey] = value;\n  }\n\n  get custom() {\n    return this.options;\n  }\n\n  set custom(value) {\n    this.options = value;\n  }\n\n  get image() {\n    var _a;\n\n    return (_a = this.options[imageKey]) !== null && _a !== void 0 ? _a : this.options[imageAltKey];\n  }\n\n  set image(value) {\n    this.options[imageAltKey] = this.options[imageKey] = value;\n  }\n\n  get images() {\n    return this.image;\n  }\n\n  set images(value) {\n    this.image = value;\n  }\n\n  get polygon() {\n    var _a;\n\n    return (_a = this.options[polygonKey]) !== null && _a !== void 0 ? _a : this.options[polygonAltKey];\n  }\n\n  set polygon(value) {\n    this.options[polygonAltKey] = this.options[polygonKey] = value;\n  }\n\n  get stroke() {\n    return [];\n  }\n\n  set stroke(_value) {}\n\n  load(data) {\n    var _a, _b, _c;\n\n    if (!data) {\n      return;\n    }\n\n    const options = (_a = data.options) !== null && _a !== void 0 ? _a : data.custom;\n\n    if (options !== undefined) {\n      for (const shape in options) {\n        const item = options[shape];\n\n        if (item) {\n          this.options[shape] = deepExtend((_b = this.options[shape]) !== null && _b !== void 0 ? _b : {}, item);\n        }\n      }\n    }\n\n    this.loadShape(data.character, charKey, charAltKey, true);\n    this.loadShape(data.polygon, polygonKey, polygonAltKey, false);\n    this.loadShape((_c = data.image) !== null && _c !== void 0 ? _c : data.images, imageKey, imageAltKey, true);\n\n    if (data.type !== undefined) {\n      this.type = data.type;\n    }\n  }\n\n  loadShape(item, mainKey, altKey, altOverride) {\n    var _a, _b;\n\n    if (!item) {\n      return;\n    }\n\n    const isArray = item instanceof Array;\n    const emptyValue = isArray ? [] : {},\n          mainDifferentValues = isArray !== this.options[mainKey] instanceof Array,\n          altDifferentValues = isArray !== this.options[altKey] instanceof Array;\n\n    if (mainDifferentValues) {\n      this.options[mainKey] = emptyValue;\n    }\n\n    if (altDifferentValues && altOverride) {\n      this.options[altKey] = emptyValue;\n    }\n\n    this.options[mainKey] = deepExtend((_a = this.options[mainKey]) !== null && _a !== void 0 ? _a : emptyValue, item);\n\n    if (!this.options[altKey] || altOverride) {\n      this.options[altKey] = deepExtend((_b = this.options[altKey]) !== null && _b !== void 0 ? _b : emptyValue, item);\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/torea/Desktop/freelanceProject2/open-react-template/node_modules/tsparticles-engine/esm/Options/Classes/Particles/Shape/Shape.js"],"names":["deepExtend","charKey","charAltKey","imageKey","imageAltKey","polygonKey","polygonAltKey","Shape","constructor","options","type","character","_a","value","custom","image","images","polygon","stroke","_value","load","data","_b","_c","undefined","shape","item","loadShape","mainKey","altKey","altOverride","isArray","Array","emptyValue","mainDifferentValues","altDifferentValues"],"mappings":"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","sourcesContent":["import { deepExtend } from \"../../../../Utils/Utils\";\nconst charKey = \"character\", charAltKey = \"char\", imageKey = \"image\", imageAltKey = \"images\", polygonKey = \"polygon\", polygonAltKey = \"star\";\nexport class Shape {\n    constructor() {\n        this.options = {};\n        this.type = \"circle\";\n    }\n    get character() {\n        var _a;\n        return ((_a = this.options[charKey]) !== null && _a !== void 0 ? _a : this.options[charAltKey]);\n    }\n    set character(value) {\n        this.options[charAltKey] = this.options[charKey] = value;\n    }\n    get custom() {\n        return this.options;\n    }\n    set custom(value) {\n        this.options = value;\n    }\n    get image() {\n        var _a;\n        return ((_a = this.options[imageKey]) !== null && _a !== void 0 ? _a : this.options[imageAltKey]);\n    }\n    set image(value) {\n        this.options[imageAltKey] = this.options[imageKey] = value;\n    }\n    get images() {\n        return this.image;\n    }\n    set images(value) {\n        this.image = value;\n    }\n    get polygon() {\n        var _a;\n        return ((_a = this.options[polygonKey]) !== null && _a !== void 0 ? _a : this.options[polygonAltKey]);\n    }\n    set polygon(value) {\n        this.options[polygonAltKey] = this.options[polygonKey] = value;\n    }\n    get stroke() {\n        return [];\n    }\n    set stroke(_value) {\n    }\n    load(data) {\n        var _a, _b, _c;\n        if (!data) {\n            return;\n        }\n        const options = (_a = data.options) !== null && _a !== void 0 ? _a : data.custom;\n        if (options !== undefined) {\n            for (const shape in options) {\n                const item = options[shape];\n                if (item) {\n                    this.options[shape] = deepExtend((_b = this.options[shape]) !== null && _b !== void 0 ? _b : {}, item);\n                }\n            }\n        }\n        this.loadShape(data.character, charKey, charAltKey, true);\n        this.loadShape(data.polygon, polygonKey, polygonAltKey, false);\n        this.loadShape((_c = data.image) !== null && _c !== void 0 ? _c : data.images, imageKey, imageAltKey, true);\n        if (data.type !== undefined) {\n            this.type = data.type;\n        }\n    }\n    loadShape(item, mainKey, altKey, altOverride) {\n        var _a, _b;\n        if (!item) {\n            return;\n        }\n        const isArray = item instanceof Array;\n        const emptyValue = isArray ? [] : {}, mainDifferentValues = isArray !== this.options[mainKey] instanceof Array, altDifferentValues = isArray !== this.options[altKey] instanceof Array;\n        if (mainDifferentValues) {\n            this.options[mainKey] = emptyValue;\n        }\n        if (altDifferentValues && altOverride) {\n            this.options[altKey] = emptyValue;\n        }\n        this.options[mainKey] = deepExtend((_a = this.options[mainKey]) !== null && _a !== void 0 ? _a : emptyValue, item);\n        if (!this.options[altKey] || altOverride) {\n            this.options[altKey] = deepExtend((_b = this.options[altKey]) !== null && _b !== void 0 ? _b : emptyValue, item);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}