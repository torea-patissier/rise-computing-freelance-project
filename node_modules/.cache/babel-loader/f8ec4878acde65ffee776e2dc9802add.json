{"ast":null,"code":"import _regeneratorRuntime from \"/Users/torea/Desktop/freelanceProject2/open-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/torea/Desktop/freelanceProject2/open-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _createForOfIteratorHelper from \"/Users/torea/Desktop/freelanceProject2/open-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"/Users/torea/Desktop/freelanceProject2/open-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/torea/Desktop/freelanceProject2/open-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { drawLinkLine as _drawLinkLine, drawLinkTriangle as _drawLinkTriangle } from \"./Utils\";\nimport { getDistance, getLinkColor, getRandom, getRangeValue, rangeColorToRgb } from \"tsparticles-engine\";\n\nfunction getLinkKey(ids) {\n  ids.sort(function (a, b) {\n    return a - b;\n  });\n  return ids.join(\"_\");\n}\n\nfunction setLinkFrequency(particles, dictionary) {\n  var key = getLinkKey(particles.map(function (t) {\n    return t.id;\n  }));\n  var res = dictionary.get(key);\n\n  if (res === undefined) {\n    res = getRandom();\n    dictionary.set(key, res);\n  }\n\n  return res;\n}\n\nexport var LinkInstance = /*#__PURE__*/function () {\n  function LinkInstance(container) {\n    _classCallCheck(this, LinkInstance);\n\n    this.container = container;\n    this._freqs = {\n      links: new Map(),\n      triangles: new Map()\n    };\n  }\n\n  _createClass(LinkInstance, [{\n    key: \"drawParticle\",\n    value: function drawParticle(context, particle) {\n      var _this = this;\n\n      var _a;\n\n      var pOptions = particle.options;\n\n      if (!particle.links || particle.links.length <= 0) {\n        return;\n      }\n\n      var p1Links = particle.links.filter(function (l) {\n        return pOptions.links && _this.getLinkFrequency(particle, l.destination) <= pOptions.links.frequency;\n      });\n\n      var _iterator = _createForOfIteratorHelper(p1Links),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var link = _step.value;\n          this.drawTriangles(pOptions, particle, link, p1Links);\n\n          if (link.opacity > 0 && ((_a = particle.retina.linksWidth) !== null && _a !== void 0 ? _a : 0) > 0) {\n            this.drawLinkLine(particle, link);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"init\",\n    value: function () {\n      var _init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this._freqs.links = new Map();\n                this._freqs.triangles = new Map();\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function init() {\n        return _init.apply(this, arguments);\n      }\n\n      return init;\n    }()\n  }, {\n    key: \"particleCreated\",\n    value: function particleCreated(particle) {\n      particle.links = [];\n\n      if (!particle.options.links) {\n        return;\n      }\n\n      var ratio = this.container.retina.pixelRatio;\n      particle.retina.linksDistance = particle.options.links.distance * ratio;\n      particle.retina.linksWidth = particle.options.links.width * ratio;\n    }\n  }, {\n    key: \"particleDestroyed\",\n    value: function particleDestroyed(particle) {\n      particle.links = [];\n    }\n  }, {\n    key: \"drawLinkLine\",\n    value: function drawLinkLine(p1, link) {\n      var container = this.container,\n          options = container.actualOptions,\n          p2 = link.destination,\n          pos1 = p1.getPosition(),\n          pos2 = p2.getPosition();\n      var opacity = link.opacity;\n      container.canvas.draw(function (ctx) {\n        var _a, _b, _c;\n\n        if (!p1.options.links) {\n          return;\n        }\n\n        var colorLine;\n        var twinkle = (_a = p1.options.twinkle) === null || _a === void 0 ? void 0 : _a.lines;\n\n        if (twinkle === null || twinkle === void 0 ? void 0 : twinkle.enable) {\n          var twinkleFreq = twinkle.frequency,\n              twinkleRgb = rangeColorToRgb(twinkle.color),\n              twinkling = getRandom() < twinkleFreq;\n\n          if (twinkling && twinkleRgb) {\n            colorLine = twinkleRgb;\n            opacity = getRangeValue(twinkle.opacity);\n          }\n        }\n\n        if (!colorLine) {\n          var linksOptions = p1.options.links,\n              linkColor = (linksOptions === null || linksOptions === void 0 ? void 0 : linksOptions.id) !== undefined ? container.particles.linksColors.get(linksOptions.id) : container.particles.linksColor;\n          colorLine = getLinkColor(p1, p2, linkColor);\n        }\n\n        if (!colorLine) {\n          return;\n        }\n\n        var width = (_b = p1.retina.linksWidth) !== null && _b !== void 0 ? _b : 0,\n            maxDistance = (_c = p1.retina.linksDistance) !== null && _c !== void 0 ? _c : 0;\n\n        _drawLinkLine(ctx, width, pos1, pos2, maxDistance, container.canvas.size, p1.options.links.warp, options.backgroundMask.enable, options.backgroundMask.composite, colorLine, opacity, p1.options.links.shadow);\n      });\n    }\n  }, {\n    key: \"drawLinkTriangle\",\n    value: function drawLinkTriangle(p1, link1, link2) {\n      var _a;\n\n      if (!p1.options.links) {\n        return;\n      }\n\n      var container = this.container,\n          options = container.actualOptions,\n          p2 = link1.destination,\n          p3 = link2.destination,\n          triangleOptions = p1.options.links.triangles,\n          opacityTriangle = (_a = triangleOptions.opacity) !== null && _a !== void 0 ? _a : (link1.opacity + link2.opacity) / 2;\n\n      if (opacityTriangle <= 0) {\n        return;\n      }\n\n      container.canvas.draw(function (ctx) {\n        var _a;\n\n        var pos1 = p1.getPosition(),\n            pos2 = p2.getPosition(),\n            pos3 = p3.getPosition(),\n            linksDistance = (_a = p1.retina.linksDistance) !== null && _a !== void 0 ? _a : 0;\n\n        if (getDistance(pos1, pos2) > linksDistance || getDistance(pos3, pos2) > linksDistance || getDistance(pos3, pos1) > linksDistance) {\n          return;\n        }\n\n        var colorTriangle = rangeColorToRgb(triangleOptions.color);\n\n        if (!colorTriangle) {\n          var linksOptions = p1.options.links,\n              linkColor = (linksOptions === null || linksOptions === void 0 ? void 0 : linksOptions.id) !== undefined ? container.particles.linksColors.get(linksOptions.id) : container.particles.linksColor;\n          colorTriangle = getLinkColor(p1, p2, linkColor);\n        }\n\n        if (!colorTriangle) {\n          return;\n        }\n\n        _drawLinkTriangle(ctx, pos1, pos2, pos3, options.backgroundMask.enable, options.backgroundMask.composite, colorTriangle, opacityTriangle);\n      });\n    }\n  }, {\n    key: \"drawTriangles\",\n    value: function drawTriangles(options, p1, link, p1Links) {\n      var _this2 = this;\n\n      var _a, _b, _c;\n\n      var p2 = link.destination;\n\n      if (!(((_a = options.links) === null || _a === void 0 ? void 0 : _a.triangles.enable) && ((_b = p2.options.links) === null || _b === void 0 ? void 0 : _b.triangles.enable))) {\n        return;\n      }\n\n      var vertices = (_c = p2.links) === null || _c === void 0 ? void 0 : _c.filter(function (t) {\n        var linkFreq = _this2.getLinkFrequency(p2, t.destination);\n\n        return p2.options.links && linkFreq <= p2.options.links.frequency && p1Links.findIndex(function (l) {\n          return l.destination === t.destination;\n        }) >= 0;\n      });\n\n      if (!(vertices === null || vertices === void 0 ? void 0 : vertices.length)) {\n        return;\n      }\n\n      var _iterator2 = _createForOfIteratorHelper(vertices),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var vertex = _step2.value;\n          var p3 = vertex.destination,\n              triangleFreq = this.getTriangleFrequency(p1, p2, p3);\n\n          if (triangleFreq > options.links.triangles.frequency) {\n            continue;\n          }\n\n          this.drawLinkTriangle(p1, link, vertex);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }, {\n    key: \"getLinkFrequency\",\n    value: function getLinkFrequency(p1, p2) {\n      return setLinkFrequency([p1, p2], this._freqs.links);\n    }\n  }, {\n    key: \"getTriangleFrequency\",\n    value: function getTriangleFrequency(p1, p2, p3) {\n      return setLinkFrequency([p1, p2, p3], this._freqs.triangles);\n    }\n  }]);\n\n  return LinkInstance;\n}();","map":{"version":3,"sources":["/Users/torea/Desktop/freelanceProject2/open-react-template/node_modules/tsparticles-interaction-particles-links/esm/LinkInstance.js"],"names":["drawLinkLine","drawLinkTriangle","getDistance","getLinkColor","getRandom","getRangeValue","rangeColorToRgb","getLinkKey","ids","sort","a","b","join","setLinkFrequency","particles","dictionary","key","map","t","id","res","get","undefined","set","LinkInstance","container","_freqs","links","Map","triangles","context","particle","_a","pOptions","options","length","p1Links","filter","l","getLinkFrequency","destination","frequency","link","drawTriangles","opacity","retina","linksWidth","ratio","pixelRatio","linksDistance","distance","width","p1","actualOptions","p2","pos1","getPosition","pos2","canvas","draw","ctx","_b","_c","colorLine","twinkle","lines","enable","twinkleFreq","twinkleRgb","color","twinkling","linksOptions","linkColor","linksColors","linksColor","maxDistance","size","warp","backgroundMask","composite","shadow","link1","link2","p3","triangleOptions","opacityTriangle","pos3","colorTriangle","vertices","linkFreq","findIndex","vertex","triangleFreq","getTriangleFrequency"],"mappings":";;;;;AAAA,SAASA,YAAY,IAAZA,aAAT,EAAuBC,gBAAgB,IAAhBA,iBAAvB,QAA+C,SAA/C;AACA,SAASC,WAAT,EAAsBC,YAAtB,EAAoCC,SAApC,EAA+CC,aAA/C,EAA8DC,eAA9D,QAAqF,oBAArF;;AACA,SAASC,UAAT,CAAoBC,GAApB,EAAyB;AACrBA,EAAAA,GAAG,CAACC,IAAJ,CAAS,UAACC,CAAD,EAAIC,CAAJ;AAAA,WAAUD,CAAC,GAAGC,CAAd;AAAA,GAAT;AACA,SAAOH,GAAG,CAACI,IAAJ,CAAS,GAAT,CAAP;AACH;;AACD,SAASC,gBAAT,CAA0BC,SAA1B,EAAqCC,UAArC,EAAiD;AAC7C,MAAMC,GAAG,GAAGT,UAAU,CAACO,SAAS,CAACG,GAAV,CAAc,UAACC,CAAD;AAAA,WAAOA,CAAC,CAACC,EAAT;AAAA,GAAd,CAAD,CAAtB;AACA,MAAIC,GAAG,GAAGL,UAAU,CAACM,GAAX,CAAeL,GAAf,CAAV;;AACA,MAAII,GAAG,KAAKE,SAAZ,EAAuB;AACnBF,IAAAA,GAAG,GAAGhB,SAAS,EAAf;AACAW,IAAAA,UAAU,CAACQ,GAAX,CAAeP,GAAf,EAAoBI,GAApB;AACH;;AACD,SAAOA,GAAP;AACH;;AACD,WAAaI,YAAb;AACI,wBAAYC,SAAZ,EAAuB;AAAA;;AACnB,SAAKA,SAAL,GAAiBA,SAAjB;AACA,SAAKC,MAAL,GAAc;AACVC,MAAAA,KAAK,EAAE,IAAIC,GAAJ,EADG;AAEVC,MAAAA,SAAS,EAAE,IAAID,GAAJ;AAFD,KAAd;AAIH;;AAPL;AAAA;AAAA,iCAQiBE,OARjB,EAQ0BC,QAR1B,EAQoC;AAAA;;AAC5B,UAAIC,EAAJ;;AACA,UAAMC,QAAQ,GAAGF,QAAQ,CAACG,OAA1B;;AACA,UAAI,CAACH,QAAQ,CAACJ,KAAV,IAAmBI,QAAQ,CAACJ,KAAT,CAAeQ,MAAf,IAAyB,CAAhD,EAAmD;AAC/C;AACH;;AACD,UAAMC,OAAO,GAAGL,QAAQ,CAACJ,KAAT,CAAeU,MAAf,CAAsB,UAACC,CAAD;AAAA,eAAOL,QAAQ,CAACN,KAAT,IAAkB,KAAI,CAACY,gBAAL,CAAsBR,QAAtB,EAAgCO,CAAC,CAACE,WAAlC,KAAkDP,QAAQ,CAACN,KAAT,CAAec,SAA1F;AAAA,OAAtB,CAAhB;;AAN4B,iDAOTL,OAPS;AAAA;;AAAA;AAO5B,4DAA4B;AAAA,cAAjBM,IAAiB;AACxB,eAAKC,aAAL,CAAmBV,QAAnB,EAA6BF,QAA7B,EAAuCW,IAAvC,EAA6CN,OAA7C;;AACA,cAAIM,IAAI,CAACE,OAAL,GAAe,CAAf,IAAoB,CAAC,CAACZ,EAAE,GAAGD,QAAQ,CAACc,MAAT,CAAgBC,UAAtB,MAAsC,IAAtC,IAA8Cd,EAAE,KAAK,KAAK,CAA1D,GAA8DA,EAA9D,GAAmE,CAApE,IAAyE,CAAjG,EAAoG;AAChG,iBAAKhC,YAAL,CAAkB+B,QAAlB,EAA4BW,IAA5B;AACH;AACJ;AAZ2B;AAAA;AAAA;AAAA;AAAA;AAa/B;AArBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuBQ,qBAAKhB,MAAL,CAAYC,KAAZ,GAAoB,IAAIC,GAAJ,EAApB;AACA,qBAAKF,MAAL,CAAYG,SAAZ,GAAwB,IAAID,GAAJ,EAAxB;;AAxBR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,oCA0BoBG,QA1BpB,EA0B8B;AACtBA,MAAAA,QAAQ,CAACJ,KAAT,GAAiB,EAAjB;;AACA,UAAI,CAACI,QAAQ,CAACG,OAAT,CAAiBP,KAAtB,EAA6B;AACzB;AACH;;AACD,UAAMoB,KAAK,GAAG,KAAKtB,SAAL,CAAeoB,MAAf,CAAsBG,UAApC;AACAjB,MAAAA,QAAQ,CAACc,MAAT,CAAgBI,aAAhB,GAAgClB,QAAQ,CAACG,OAAT,CAAiBP,KAAjB,CAAuBuB,QAAvB,GAAkCH,KAAlE;AACAhB,MAAAA,QAAQ,CAACc,MAAT,CAAgBC,UAAhB,GAA6Bf,QAAQ,CAACG,OAAT,CAAiBP,KAAjB,CAAuBwB,KAAvB,GAA+BJ,KAA5D;AACH;AAlCL;AAAA;AAAA,sCAmCsBhB,QAnCtB,EAmCgC;AACxBA,MAAAA,QAAQ,CAACJ,KAAT,GAAiB,EAAjB;AACH;AArCL;AAAA;AAAA,iCAsCiByB,EAtCjB,EAsCqBV,IAtCrB,EAsC2B;AACnB,UAAMjB,SAAS,GAAG,KAAKA,SAAvB;AAAA,UAAkCS,OAAO,GAAGT,SAAS,CAAC4B,aAAtD;AAAA,UAAqEC,EAAE,GAAGZ,IAAI,CAACF,WAA/E;AAAA,UAA4Fe,IAAI,GAAGH,EAAE,CAACI,WAAH,EAAnG;AAAA,UAAqHC,IAAI,GAAGH,EAAE,CAACE,WAAH,EAA5H;AACA,UAAIZ,OAAO,GAAGF,IAAI,CAACE,OAAnB;AACAnB,MAAAA,SAAS,CAACiC,MAAV,CAAiBC,IAAjB,CAAsB,UAACC,GAAD,EAAS;AAC3B,YAAI5B,EAAJ,EAAQ6B,EAAR,EAAYC,EAAZ;;AACA,YAAI,CAACV,EAAE,CAAClB,OAAH,CAAWP,KAAhB,EAAuB;AACnB;AACH;;AACD,YAAIoC,SAAJ;AACA,YAAMC,OAAO,GAAG,CAAChC,EAAE,GAAGoB,EAAE,CAAClB,OAAH,CAAW8B,OAAjB,MAA8B,IAA9B,IAAsChC,EAAE,KAAK,KAAK,CAAlD,GAAsD,KAAK,CAA3D,GAA+DA,EAAE,CAACiC,KAAlF;;AACA,YAAID,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACE,MAA9D,EAAsE;AAClE,cAAMC,WAAW,GAAGH,OAAO,CAACvB,SAA5B;AAAA,cAAuC2B,UAAU,GAAG9D,eAAe,CAAC0D,OAAO,CAACK,KAAT,CAAnE;AAAA,cAAoFC,SAAS,GAAGlE,SAAS,KAAK+D,WAA9G;;AACA,cAAIG,SAAS,IAAIF,UAAjB,EAA6B;AACzBL,YAAAA,SAAS,GAAGK,UAAZ;AACAxB,YAAAA,OAAO,GAAGvC,aAAa,CAAC2D,OAAO,CAACpB,OAAT,CAAvB;AACH;AACJ;;AACD,YAAI,CAACmB,SAAL,EAAgB;AACZ,cAAMQ,YAAY,GAAGnB,EAAE,CAAClB,OAAH,CAAWP,KAAhC;AAAA,cAAuC6C,SAAS,GAAG,CAACD,YAAY,KAAK,IAAjB,IAAyBA,YAAY,KAAK,KAAK,CAA/C,GAAmD,KAAK,CAAxD,GAA4DA,YAAY,CAACpD,EAA1E,MAAkFG,SAAlF,GAC7CG,SAAS,CAACX,SAAV,CAAoB2D,WAApB,CAAgCpD,GAAhC,CAAoCkD,YAAY,CAACpD,EAAjD,CAD6C,GAE7CM,SAAS,CAACX,SAAV,CAAoB4D,UAF1B;AAGAX,UAAAA,SAAS,GAAG5D,YAAY,CAACiD,EAAD,EAAKE,EAAL,EAASkB,SAAT,CAAxB;AACH;;AACD,YAAI,CAACT,SAAL,EAAgB;AACZ;AACH;;AACD,YAAMZ,KAAK,GAAG,CAACU,EAAE,GAAGT,EAAE,CAACP,MAAH,CAAUC,UAAhB,MAAgC,IAAhC,IAAwCe,EAAE,KAAK,KAAK,CAApD,GAAwDA,EAAxD,GAA6D,CAA3E;AAAA,YAA8Ec,WAAW,GAAG,CAACb,EAAE,GAAGV,EAAE,CAACP,MAAH,CAAUI,aAAhB,MAAmC,IAAnC,IAA2Ca,EAAE,KAAK,KAAK,CAAvD,GAA2DA,EAA3D,GAAgE,CAA5J;;AACA9D,QAAAA,aAAY,CAAC4D,GAAD,EAAMT,KAAN,EAAaI,IAAb,EAAmBE,IAAnB,EAAyBkB,WAAzB,EAAsClD,SAAS,CAACiC,MAAV,CAAiBkB,IAAvD,EAA6DxB,EAAE,CAAClB,OAAH,CAAWP,KAAX,CAAiBkD,IAA9E,EAAoF3C,OAAO,CAAC4C,cAAR,CAAuBZ,MAA3G,EAAmHhC,OAAO,CAAC4C,cAAR,CAAuBC,SAA1I,EAAqJhB,SAArJ,EAAgKnB,OAAhK,EAAyKQ,EAAE,CAAClB,OAAH,CAAWP,KAAX,CAAiBqD,MAA1L,CAAZ;AACH,OAzBD;AA0BH;AAnEL;AAAA;AAAA,qCAoEqB5B,EApErB,EAoEyB6B,KApEzB,EAoEgCC,KApEhC,EAoEuC;AAC/B,UAAIlD,EAAJ;;AACA,UAAI,CAACoB,EAAE,CAAClB,OAAH,CAAWP,KAAhB,EAAuB;AACnB;AACH;;AACD,UAAMF,SAAS,GAAG,KAAKA,SAAvB;AAAA,UAAkCS,OAAO,GAAGT,SAAS,CAAC4B,aAAtD;AAAA,UAAqEC,EAAE,GAAG2B,KAAK,CAACzC,WAAhF;AAAA,UAA6F2C,EAAE,GAAGD,KAAK,CAAC1C,WAAxG;AAAA,UAAqH4C,eAAe,GAAGhC,EAAE,CAAClB,OAAH,CAAWP,KAAX,CAAiBE,SAAxJ;AAAA,UAAmKwD,eAAe,GAAG,CAACrD,EAAE,GAAGoD,eAAe,CAACxC,OAAtB,MAAmC,IAAnC,IAA2CZ,EAAE,KAAK,KAAK,CAAvD,GAA2DA,EAA3D,GAAgE,CAACiD,KAAK,CAACrC,OAAN,GAAgBsC,KAAK,CAACtC,OAAvB,IAAkC,CAAvR;;AACA,UAAIyC,eAAe,IAAI,CAAvB,EAA0B;AACtB;AACH;;AACD5D,MAAAA,SAAS,CAACiC,MAAV,CAAiBC,IAAjB,CAAsB,UAACC,GAAD,EAAS;AAC3B,YAAI5B,EAAJ;;AACA,YAAMuB,IAAI,GAAGH,EAAE,CAACI,WAAH,EAAb;AAAA,YAA+BC,IAAI,GAAGH,EAAE,CAACE,WAAH,EAAtC;AAAA,YAAwD8B,IAAI,GAAGH,EAAE,CAAC3B,WAAH,EAA/D;AAAA,YAAiFP,aAAa,GAAG,CAACjB,EAAE,GAAGoB,EAAE,CAACP,MAAH,CAAUI,aAAhB,MAAmC,IAAnC,IAA2CjB,EAAE,KAAK,KAAK,CAAvD,GAA2DA,EAA3D,GAAgE,CAAjK;;AACA,YAAI9B,WAAW,CAACqD,IAAD,EAAOE,IAAP,CAAX,GAA0BR,aAA1B,IACA/C,WAAW,CAACoF,IAAD,EAAO7B,IAAP,CAAX,GAA0BR,aAD1B,IAEA/C,WAAW,CAACoF,IAAD,EAAO/B,IAAP,CAAX,GAA0BN,aAF9B,EAE6C;AACzC;AACH;;AACD,YAAIsC,aAAa,GAAGjF,eAAe,CAAC8E,eAAe,CAACf,KAAjB,CAAnC;;AACA,YAAI,CAACkB,aAAL,EAAoB;AAChB,cAAMhB,YAAY,GAAGnB,EAAE,CAAClB,OAAH,CAAWP,KAAhC;AAAA,cAAuC6C,SAAS,GAAG,CAACD,YAAY,KAAK,IAAjB,IAAyBA,YAAY,KAAK,KAAK,CAA/C,GAAmD,KAAK,CAAxD,GAA4DA,YAAY,CAACpD,EAA1E,MAAkFG,SAAlF,GAC7CG,SAAS,CAACX,SAAV,CAAoB2D,WAApB,CAAgCpD,GAAhC,CAAoCkD,YAAY,CAACpD,EAAjD,CAD6C,GAE7CM,SAAS,CAACX,SAAV,CAAoB4D,UAF1B;AAGAa,UAAAA,aAAa,GAAGpF,YAAY,CAACiD,EAAD,EAAKE,EAAL,EAASkB,SAAT,CAA5B;AACH;;AACD,YAAI,CAACe,aAAL,EAAoB;AAChB;AACH;;AACDtF,QAAAA,iBAAgB,CAAC2D,GAAD,EAAML,IAAN,EAAYE,IAAZ,EAAkB6B,IAAlB,EAAwBpD,OAAO,CAAC4C,cAAR,CAAuBZ,MAA/C,EAAuDhC,OAAO,CAAC4C,cAAR,CAAuBC,SAA9E,EAAyFQ,aAAzF,EAAwGF,eAAxG,CAAhB;AACH,OAnBD;AAoBH;AAjGL;AAAA;AAAA,kCAkGkBnD,OAlGlB,EAkG2BkB,EAlG3B,EAkG+BV,IAlG/B,EAkGqCN,OAlGrC,EAkG8C;AAAA;;AACtC,UAAIJ,EAAJ,EAAQ6B,EAAR,EAAYC,EAAZ;;AACA,UAAMR,EAAE,GAAGZ,IAAI,CAACF,WAAhB;;AACA,UAAI,EAAE,CAAC,CAACR,EAAE,GAAGE,OAAO,CAACP,KAAd,MAAyB,IAAzB,IAAiCK,EAAE,KAAK,KAAK,CAA7C,GAAiD,KAAK,CAAtD,GAA0DA,EAAE,CAACH,SAAH,CAAaqC,MAAxE,MAAoF,CAACL,EAAE,GAAGP,EAAE,CAACpB,OAAH,CAAWP,KAAjB,MAA4B,IAA5B,IAAoCkC,EAAE,KAAK,KAAK,CAAhD,GAAoD,KAAK,CAAzD,GAA6DA,EAAE,CAAChC,SAAH,CAAaqC,MAA9J,CAAF,CAAJ,EAA8K;AAC1K;AACH;;AACD,UAAMsB,QAAQ,GAAG,CAAC1B,EAAE,GAAGR,EAAE,CAAC3B,KAAT,MAAoB,IAApB,IAA4BmC,EAAE,KAAK,KAAK,CAAxC,GAA4C,KAAK,CAAjD,GAAqDA,EAAE,CAACzB,MAAH,CAAU,UAACnB,CAAD,EAAO;AACnF,YAAMuE,QAAQ,GAAG,MAAI,CAAClD,gBAAL,CAAsBe,EAAtB,EAA0BpC,CAAC,CAACsB,WAA5B,CAAjB;;AACA,eAAQc,EAAE,CAACpB,OAAH,CAAWP,KAAX,IACJ8D,QAAQ,IAAInC,EAAE,CAACpB,OAAH,CAAWP,KAAX,CAAiBc,SADzB,IAEJL,OAAO,CAACsD,SAAR,CAAkB,UAACpD,CAAD;AAAA,iBAAOA,CAAC,CAACE,WAAF,KAAkBtB,CAAC,CAACsB,WAA3B;AAAA,SAAlB,KAA6D,CAFjE;AAGH,OALqE,CAAtE;;AAMA,UAAI,EAAEgD,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,KAAK,CAAvC,GAA2C,KAAK,CAAhD,GAAoDA,QAAQ,CAACrD,MAA/D,CAAJ,EAA4E;AACxE;AACH;;AAdqC,kDAejBqD,QAfiB;AAAA;;AAAA;AAetC,+DAA+B;AAAA,cAApBG,MAAoB;AAC3B,cAAMR,EAAE,GAAGQ,MAAM,CAACnD,WAAlB;AAAA,cAA+BoD,YAAY,GAAG,KAAKC,oBAAL,CAA0BzC,EAA1B,EAA8BE,EAA9B,EAAkC6B,EAAlC,CAA9C;;AACA,cAAIS,YAAY,GAAG1D,OAAO,CAACP,KAAR,CAAcE,SAAd,CAAwBY,SAA3C,EAAsD;AAClD;AACH;;AACD,eAAKxC,gBAAL,CAAsBmD,EAAtB,EAA0BV,IAA1B,EAAgCiD,MAAhC;AACH;AArBqC;AAAA;AAAA;AAAA;AAAA;AAsBzC;AAxHL;AAAA;AAAA,qCAyHqBvC,EAzHrB,EAyHyBE,EAzHzB,EAyH6B;AACrB,aAAOzC,gBAAgB,CAAC,CAACuC,EAAD,EAAKE,EAAL,CAAD,EAAW,KAAK5B,MAAL,CAAYC,KAAvB,CAAvB;AACH;AA3HL;AAAA;AAAA,yCA4HyByB,EA5HzB,EA4H6BE,EA5H7B,EA4HiC6B,EA5HjC,EA4HqC;AAC7B,aAAOtE,gBAAgB,CAAC,CAACuC,EAAD,EAAKE,EAAL,EAAS6B,EAAT,CAAD,EAAe,KAAKzD,MAAL,CAAYG,SAA3B,CAAvB;AACH;AA9HL;;AAAA;AAAA","sourcesContent":["import { drawLinkLine, drawLinkTriangle } from \"./Utils\";\nimport { getDistance, getLinkColor, getRandom, getRangeValue, rangeColorToRgb } from \"tsparticles-engine\";\nfunction getLinkKey(ids) {\n    ids.sort((a, b) => a - b);\n    return ids.join(\"_\");\n}\nfunction setLinkFrequency(particles, dictionary) {\n    const key = getLinkKey(particles.map((t) => t.id));\n    let res = dictionary.get(key);\n    if (res === undefined) {\n        res = getRandom();\n        dictionary.set(key, res);\n    }\n    return res;\n}\nexport class LinkInstance {\n    constructor(container) {\n        this.container = container;\n        this._freqs = {\n            links: new Map(),\n            triangles: new Map(),\n        };\n    }\n    drawParticle(context, particle) {\n        var _a;\n        const pOptions = particle.options;\n        if (!particle.links || particle.links.length <= 0) {\n            return;\n        }\n        const p1Links = particle.links.filter((l) => pOptions.links && this.getLinkFrequency(particle, l.destination) <= pOptions.links.frequency);\n        for (const link of p1Links) {\n            this.drawTriangles(pOptions, particle, link, p1Links);\n            if (link.opacity > 0 && ((_a = particle.retina.linksWidth) !== null && _a !== void 0 ? _a : 0) > 0) {\n                this.drawLinkLine(particle, link);\n            }\n        }\n    }\n    async init() {\n        this._freqs.links = new Map();\n        this._freqs.triangles = new Map();\n    }\n    particleCreated(particle) {\n        particle.links = [];\n        if (!particle.options.links) {\n            return;\n        }\n        const ratio = this.container.retina.pixelRatio;\n        particle.retina.linksDistance = particle.options.links.distance * ratio;\n        particle.retina.linksWidth = particle.options.links.width * ratio;\n    }\n    particleDestroyed(particle) {\n        particle.links = [];\n    }\n    drawLinkLine(p1, link) {\n        const container = this.container, options = container.actualOptions, p2 = link.destination, pos1 = p1.getPosition(), pos2 = p2.getPosition();\n        let opacity = link.opacity;\n        container.canvas.draw((ctx) => {\n            var _a, _b, _c;\n            if (!p1.options.links) {\n                return;\n            }\n            let colorLine;\n            const twinkle = (_a = p1.options.twinkle) === null || _a === void 0 ? void 0 : _a.lines;\n            if (twinkle === null || twinkle === void 0 ? void 0 : twinkle.enable) {\n                const twinkleFreq = twinkle.frequency, twinkleRgb = rangeColorToRgb(twinkle.color), twinkling = getRandom() < twinkleFreq;\n                if (twinkling && twinkleRgb) {\n                    colorLine = twinkleRgb;\n                    opacity = getRangeValue(twinkle.opacity);\n                }\n            }\n            if (!colorLine) {\n                const linksOptions = p1.options.links, linkColor = (linksOptions === null || linksOptions === void 0 ? void 0 : linksOptions.id) !== undefined\n                    ? container.particles.linksColors.get(linksOptions.id)\n                    : container.particles.linksColor;\n                colorLine = getLinkColor(p1, p2, linkColor);\n            }\n            if (!colorLine) {\n                return;\n            }\n            const width = (_b = p1.retina.linksWidth) !== null && _b !== void 0 ? _b : 0, maxDistance = (_c = p1.retina.linksDistance) !== null && _c !== void 0 ? _c : 0;\n            drawLinkLine(ctx, width, pos1, pos2, maxDistance, container.canvas.size, p1.options.links.warp, options.backgroundMask.enable, options.backgroundMask.composite, colorLine, opacity, p1.options.links.shadow);\n        });\n    }\n    drawLinkTriangle(p1, link1, link2) {\n        var _a;\n        if (!p1.options.links) {\n            return;\n        }\n        const container = this.container, options = container.actualOptions, p2 = link1.destination, p3 = link2.destination, triangleOptions = p1.options.links.triangles, opacityTriangle = (_a = triangleOptions.opacity) !== null && _a !== void 0 ? _a : (link1.opacity + link2.opacity) / 2;\n        if (opacityTriangle <= 0) {\n            return;\n        }\n        container.canvas.draw((ctx) => {\n            var _a;\n            const pos1 = p1.getPosition(), pos2 = p2.getPosition(), pos3 = p3.getPosition(), linksDistance = (_a = p1.retina.linksDistance) !== null && _a !== void 0 ? _a : 0;\n            if (getDistance(pos1, pos2) > linksDistance ||\n                getDistance(pos3, pos2) > linksDistance ||\n                getDistance(pos3, pos1) > linksDistance) {\n                return;\n            }\n            let colorTriangle = rangeColorToRgb(triangleOptions.color);\n            if (!colorTriangle) {\n                const linksOptions = p1.options.links, linkColor = (linksOptions === null || linksOptions === void 0 ? void 0 : linksOptions.id) !== undefined\n                    ? container.particles.linksColors.get(linksOptions.id)\n                    : container.particles.linksColor;\n                colorTriangle = getLinkColor(p1, p2, linkColor);\n            }\n            if (!colorTriangle) {\n                return;\n            }\n            drawLinkTriangle(ctx, pos1, pos2, pos3, options.backgroundMask.enable, options.backgroundMask.composite, colorTriangle, opacityTriangle);\n        });\n    }\n    drawTriangles(options, p1, link, p1Links) {\n        var _a, _b, _c;\n        const p2 = link.destination;\n        if (!(((_a = options.links) === null || _a === void 0 ? void 0 : _a.triangles.enable) && ((_b = p2.options.links) === null || _b === void 0 ? void 0 : _b.triangles.enable))) {\n            return;\n        }\n        const vertices = (_c = p2.links) === null || _c === void 0 ? void 0 : _c.filter((t) => {\n            const linkFreq = this.getLinkFrequency(p2, t.destination);\n            return (p2.options.links &&\n                linkFreq <= p2.options.links.frequency &&\n                p1Links.findIndex((l) => l.destination === t.destination) >= 0);\n        });\n        if (!(vertices === null || vertices === void 0 ? void 0 : vertices.length)) {\n            return;\n        }\n        for (const vertex of vertices) {\n            const p3 = vertex.destination, triangleFreq = this.getTriangleFrequency(p1, p2, p3);\n            if (triangleFreq > options.links.triangles.frequency) {\n                continue;\n            }\n            this.drawLinkTriangle(p1, link, vertex);\n        }\n    }\n    getLinkFrequency(p1, p2) {\n        return setLinkFrequency([p1, p2], this._freqs.links);\n    }\n    getTriangleFrequency(p1, p2, p3) {\n        return setLinkFrequency([p1, p2, p3], this._freqs.triangles);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}