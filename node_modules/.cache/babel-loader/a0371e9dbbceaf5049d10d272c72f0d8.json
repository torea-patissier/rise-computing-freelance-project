{"ast":null,"code":"import { InteractionManager } from \"./Utils/InteractionManager\";\nimport { Particle } from \"./Particle\";\nimport { Point } from \"./Utils/Point\";\nimport { QuadTree } from \"./Utils/QuadTree\";\nimport { Rectangle } from \"./Utils/Rectangle\";\nimport { calcPositionFromSize } from \"../Utils/NumberUtils\";\nexport class Particles {\n  constructor(engine, container) {\n    this.container = container;\n    this._engine = engine;\n    this.nextId = 0;\n    this.array = [];\n    this.zArray = [];\n    this.pool = [];\n    this.limit = 0;\n    this.needsSort = false;\n    this.lastZIndex = 0;\n    this.interactionManager = new InteractionManager(this._engine, container);\n    const canvasSize = this.container.canvas.size;\n    this.quadTree = new QuadTree(new Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, canvasSize.width * 3 / 2, canvasSize.height * 3 / 2), 4);\n    this.movers = this._engine.plugins.getMovers(container, true);\n    this.updaters = this._engine.plugins.getUpdaters(container, true);\n  }\n\n  get count() {\n    return this.array.length;\n  }\n\n  addManualParticles() {\n    const container = this.container,\n          options = container.actualOptions;\n\n    for (const particle of options.manualParticles) {\n      this.addParticle(calcPositionFromSize({\n        size: container.canvas.size,\n        position: particle.position\n      }), particle.options);\n    }\n  }\n\n  addParticle(position, overrideOptions, group, initializer) {\n    const container = this.container,\n          options = container.actualOptions,\n          limit = options.particles.number.limit;\n\n    if (limit > 0) {\n      const countToRemove = this.count + 1 - limit;\n\n      if (countToRemove > 0) {\n        this.removeQuantity(countToRemove);\n      }\n    }\n\n    return this._pushParticle(position, overrideOptions, group, initializer);\n  }\n\n  clear() {\n    this.array = [];\n    this.zArray = [];\n  }\n\n  destroy() {\n    this.array = [];\n    this.zArray = [];\n    this.movers = [];\n    this.updaters = [];\n  }\n\n  async draw(delta) {\n    const container = this.container,\n          canvasSize = this.container.canvas.size;\n    this.quadTree = new QuadTree(new Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, canvasSize.width * 3 / 2, canvasSize.height * 3 / 2), 4);\n    container.canvas.clear();\n    await this.update(delta);\n\n    if (this.needsSort) {\n      this.zArray.sort((a, b) => b.position.z - a.position.z || a.id - b.id);\n      this.lastZIndex = this.zArray[this.zArray.length - 1].position.z;\n      this.needsSort = false;\n    }\n\n    for (const [, plugin] of container.plugins) {\n      container.canvas.drawPlugin(plugin, delta);\n    }\n\n    for (const p of this.zArray) {\n      p.draw(delta);\n    }\n  }\n\n  handleClickMode(mode) {\n    this.interactionManager.handleClickMode(mode);\n  }\n\n  init() {\n    var _a;\n\n    const container = this.container,\n          options = container.actualOptions;\n    this.lastZIndex = 0;\n    this.needsSort = false;\n    let handled = false;\n    this.updaters = this._engine.plugins.getUpdaters(container, true);\n    this.interactionManager.init();\n\n    for (const [, plugin] of container.plugins) {\n      if (plugin.particlesInitialization !== undefined) {\n        handled = plugin.particlesInitialization();\n      }\n\n      if (handled) {\n        break;\n      }\n    }\n\n    this.interactionManager.init();\n\n    for (const [, pathGenerator] of container.pathGenerators) {\n      pathGenerator.init(container);\n    }\n\n    this.addManualParticles();\n\n    if (!handled) {\n      for (const group in options.particles.groups) {\n        const groupOptions = options.particles.groups[group];\n\n        for (let i = this.count, j = 0; j < ((_a = groupOptions.number) === null || _a === void 0 ? void 0 : _a.value) && i < options.particles.number.value; i++, j++) {\n          this.addParticle(undefined, groupOptions, group);\n        }\n      }\n\n      for (let i = this.count; i < options.particles.number.value; i++) {\n        this.addParticle();\n      }\n    }\n  }\n\n  push(nb, mouse, overrideOptions, group) {\n    this.pushing = true;\n\n    for (let i = 0; i < nb; i++) {\n      this.addParticle(mouse === null || mouse === void 0 ? void 0 : mouse.position, overrideOptions, group);\n    }\n\n    this.pushing = false;\n  }\n\n  async redraw() {\n    this.clear();\n    this.init();\n    await this.draw({\n      value: 0,\n      factor: 0\n    });\n  }\n\n  remove(particle, group, override) {\n    this.removeAt(this.array.indexOf(particle), undefined, group, override);\n  }\n\n  removeAt(index, quantity = 1, group, override) {\n    if (index < 0 || index > this.count) {\n      return;\n    }\n\n    let deleted = 0;\n\n    for (let i = index; deleted < quantity && i < this.count; i++) {\n      const particle = this.array[i];\n\n      if (!particle || particle.group !== group) {\n        continue;\n      }\n\n      particle.destroy(override);\n      this.array.splice(i--, 1);\n      const zIdx = this.zArray.indexOf(particle);\n      this.zArray.splice(zIdx, 1);\n      this.pool.push(particle);\n      deleted++;\n\n      this._engine.dispatchEvent(\"particleRemoved\", {\n        container: this.container,\n        data: {\n          particle\n        }\n      });\n    }\n  }\n\n  removeQuantity(quantity, group) {\n    this.removeAt(0, quantity, group);\n  }\n\n  setDensity() {\n    const options = this.container.actualOptions;\n\n    for (const group in options.particles.groups) {\n      this._applyDensity(options.particles.groups[group], 0, group);\n    }\n\n    this._applyDensity(options.particles, options.manualParticles.length);\n  }\n\n  async update(delta) {\n    var _a, _b;\n\n    const container = this.container,\n          particlesToDelete = [];\n\n    for (const [, pathGenerator] of container.pathGenerators) {\n      pathGenerator.update();\n    }\n\n    for (const [, plugin] of container.plugins) {\n      (_a = plugin.update) === null || _a === void 0 ? void 0 : _a.call(plugin, delta);\n    }\n\n    for (const particle of this.array) {\n      const resizeFactor = container.canvas.resizeFactor;\n\n      if (resizeFactor && !particle.ignoresResizeRatio) {\n        particle.position.x *= resizeFactor.width;\n        particle.position.y *= resizeFactor.height;\n        particle.initialPosition.x *= resizeFactor.width;\n        particle.initialPosition.y *= resizeFactor.height;\n      }\n\n      particle.ignoresResizeRatio = false;\n      await this.interactionManager.reset(particle);\n\n      for (const [, plugin] of this.container.plugins) {\n        if (particle.destroyed) {\n          break;\n        }\n\n        (_b = plugin.particleUpdate) === null || _b === void 0 ? void 0 : _b.call(plugin, particle, delta);\n      }\n\n      for (const mover of this.movers) {\n        if (mover.isEnabled(particle)) {\n          mover.move(particle, delta);\n        }\n      }\n\n      if (particle.destroyed) {\n        particlesToDelete.push(particle);\n        continue;\n      }\n\n      this.quadTree.insert(new Point(particle.getPosition(), particle));\n    }\n\n    for (const particle of particlesToDelete) {\n      this.remove(particle);\n    }\n\n    await this.interactionManager.externalInteract(delta);\n\n    for (const particle of this.array) {\n      for (const updater of this.updaters) {\n        updater.update(particle, delta);\n      }\n\n      if (!particle.destroyed && !particle.spawning) {\n        await this.interactionManager.particlesInteract(particle, delta);\n      }\n    }\n\n    delete container.canvas.resizeFactor;\n  }\n\n  _applyDensity(options, manualCount, group) {\n    var _a;\n\n    if (!((_a = options.number.density) === null || _a === void 0 ? void 0 : _a.enable)) {\n      return;\n    }\n\n    const numberOptions = options.number,\n          densityFactor = this._initDensityFactor(numberOptions.density),\n          optParticlesNumber = numberOptions.value,\n          optParticlesLimit = numberOptions.limit > 0 ? numberOptions.limit : optParticlesNumber,\n          particlesNumber = Math.min(optParticlesNumber, optParticlesLimit) * densityFactor + manualCount,\n          particlesCount = Math.min(this.count, this.array.filter(t => t.group === group).length);\n\n    this.limit = numberOptions.limit * densityFactor;\n\n    if (particlesCount < particlesNumber) {\n      this.push(Math.abs(particlesNumber - particlesCount), undefined, options, group);\n    } else if (particlesCount > particlesNumber) {\n      this.removeQuantity(particlesCount - particlesNumber, group);\n    }\n  }\n\n  _initDensityFactor(densityOptions) {\n    const container = this.container;\n\n    if (!container.canvas.element || !densityOptions.enable) {\n      return 1;\n    }\n\n    const canvas = container.canvas.element,\n          pxRatio = container.retina.pixelRatio;\n    return canvas.width * canvas.height / (densityOptions.factor * pxRatio ** 2 * densityOptions.area);\n  }\n\n  _pushParticle(position, overrideOptions, group, initializer) {\n    try {\n      let particle = this.pool.pop();\n\n      if (particle) {\n        particle.init(this.nextId, position, overrideOptions, group);\n      } else {\n        particle = new Particle(this._engine, this.nextId, this.container, position, overrideOptions, group);\n      }\n\n      let canAdd = true;\n\n      if (initializer) {\n        canAdd = initializer(particle);\n      }\n\n      if (!canAdd) {\n        return;\n      }\n\n      this.array.push(particle);\n      this.zArray.push(particle);\n      this.nextId++;\n\n      this._engine.dispatchEvent(\"particleAdded\", {\n        container: this.container,\n        data: {\n          particle\n        }\n      });\n\n      return particle;\n    } catch (e) {\n      console.warn(`error adding particle: ${e}`);\n      return;\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/torea/Desktop/freelanceProject2/open-react-template/node_modules/tsparticles-engine/esm/Core/Particles.js"],"names":["InteractionManager","Particle","Point","QuadTree","Rectangle","calcPositionFromSize","Particles","constructor","engine","container","_engine","nextId","array","zArray","pool","limit","needsSort","lastZIndex","interactionManager","canvasSize","canvas","size","quadTree","width","height","movers","plugins","getMovers","updaters","getUpdaters","count","length","addManualParticles","options","actualOptions","particle","manualParticles","addParticle","position","overrideOptions","group","initializer","particles","number","countToRemove","removeQuantity","_pushParticle","clear","destroy","draw","delta","update","sort","a","b","z","id","plugin","drawPlugin","p","handleClickMode","mode","init","_a","handled","particlesInitialization","undefined","pathGenerator","pathGenerators","groups","groupOptions","i","j","value","push","nb","mouse","pushing","redraw","factor","remove","override","removeAt","indexOf","index","quantity","deleted","splice","zIdx","dispatchEvent","data","setDensity","_applyDensity","_b","particlesToDelete","call","resizeFactor","ignoresResizeRatio","x","y","initialPosition","reset","destroyed","particleUpdate","mover","isEnabled","move","insert","getPosition","externalInteract","updater","spawning","particlesInteract","manualCount","density","enable","numberOptions","densityFactor","_initDensityFactor","optParticlesNumber","optParticlesLimit","particlesNumber","Math","min","particlesCount","filter","t","abs","densityOptions","element","pxRatio","retina","pixelRatio","area","pop","canAdd","e","console","warn"],"mappings":"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","sourcesContent":["import { InteractionManager } from \"./Utils/InteractionManager\";\nimport { Particle } from \"./Particle\";\nimport { Point } from \"./Utils/Point\";\nimport { QuadTree } from \"./Utils/QuadTree\";\nimport { Rectangle } from \"./Utils/Rectangle\";\nimport { calcPositionFromSize } from \"../Utils/NumberUtils\";\nexport class Particles {\n    constructor(engine, container) {\n        this.container = container;\n        this._engine = engine;\n        this.nextId = 0;\n        this.array = [];\n        this.zArray = [];\n        this.pool = [];\n        this.limit = 0;\n        this.needsSort = false;\n        this.lastZIndex = 0;\n        this.interactionManager = new InteractionManager(this._engine, container);\n        const canvasSize = this.container.canvas.size;\n        this.quadTree = new QuadTree(new Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, (canvasSize.width * 3) / 2, (canvasSize.height * 3) / 2), 4);\n        this.movers = this._engine.plugins.getMovers(container, true);\n        this.updaters = this._engine.plugins.getUpdaters(container, true);\n    }\n    get count() {\n        return this.array.length;\n    }\n    addManualParticles() {\n        const container = this.container, options = container.actualOptions;\n        for (const particle of options.manualParticles) {\n            this.addParticle(calcPositionFromSize({\n                size: container.canvas.size,\n                position: particle.position,\n            }), particle.options);\n        }\n    }\n    addParticle(position, overrideOptions, group, initializer) {\n        const container = this.container, options = container.actualOptions, limit = options.particles.number.limit;\n        if (limit > 0) {\n            const countToRemove = this.count + 1 - limit;\n            if (countToRemove > 0) {\n                this.removeQuantity(countToRemove);\n            }\n        }\n        return this._pushParticle(position, overrideOptions, group, initializer);\n    }\n    clear() {\n        this.array = [];\n        this.zArray = [];\n    }\n    destroy() {\n        this.array = [];\n        this.zArray = [];\n        this.movers = [];\n        this.updaters = [];\n    }\n    async draw(delta) {\n        const container = this.container, canvasSize = this.container.canvas.size;\n        this.quadTree = new QuadTree(new Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, (canvasSize.width * 3) / 2, (canvasSize.height * 3) / 2), 4);\n        container.canvas.clear();\n        await this.update(delta);\n        if (this.needsSort) {\n            this.zArray.sort((a, b) => b.position.z - a.position.z || a.id - b.id);\n            this.lastZIndex = this.zArray[this.zArray.length - 1].position.z;\n            this.needsSort = false;\n        }\n        for (const [, plugin] of container.plugins) {\n            container.canvas.drawPlugin(plugin, delta);\n        }\n        for (const p of this.zArray) {\n            p.draw(delta);\n        }\n    }\n    handleClickMode(mode) {\n        this.interactionManager.handleClickMode(mode);\n    }\n    init() {\n        var _a;\n        const container = this.container, options = container.actualOptions;\n        this.lastZIndex = 0;\n        this.needsSort = false;\n        let handled = false;\n        this.updaters = this._engine.plugins.getUpdaters(container, true);\n        this.interactionManager.init();\n        for (const [, plugin] of container.plugins) {\n            if (plugin.particlesInitialization !== undefined) {\n                handled = plugin.particlesInitialization();\n            }\n            if (handled) {\n                break;\n            }\n        }\n        this.interactionManager.init();\n        for (const [, pathGenerator] of container.pathGenerators) {\n            pathGenerator.init(container);\n        }\n        this.addManualParticles();\n        if (!handled) {\n            for (const group in options.particles.groups) {\n                const groupOptions = options.particles.groups[group];\n                for (let i = this.count, j = 0; j < ((_a = groupOptions.number) === null || _a === void 0 ? void 0 : _a.value) && i < options.particles.number.value; i++, j++) {\n                    this.addParticle(undefined, groupOptions, group);\n                }\n            }\n            for (let i = this.count; i < options.particles.number.value; i++) {\n                this.addParticle();\n            }\n        }\n    }\n    push(nb, mouse, overrideOptions, group) {\n        this.pushing = true;\n        for (let i = 0; i < nb; i++) {\n            this.addParticle(mouse === null || mouse === void 0 ? void 0 : mouse.position, overrideOptions, group);\n        }\n        this.pushing = false;\n    }\n    async redraw() {\n        this.clear();\n        this.init();\n        await this.draw({ value: 0, factor: 0 });\n    }\n    remove(particle, group, override) {\n        this.removeAt(this.array.indexOf(particle), undefined, group, override);\n    }\n    removeAt(index, quantity = 1, group, override) {\n        if (index < 0 || index > this.count) {\n            return;\n        }\n        let deleted = 0;\n        for (let i = index; deleted < quantity && i < this.count; i++) {\n            const particle = this.array[i];\n            if (!particle || particle.group !== group) {\n                continue;\n            }\n            particle.destroy(override);\n            this.array.splice(i--, 1);\n            const zIdx = this.zArray.indexOf(particle);\n            this.zArray.splice(zIdx, 1);\n            this.pool.push(particle);\n            deleted++;\n            this._engine.dispatchEvent(\"particleRemoved\", {\n                container: this.container,\n                data: {\n                    particle,\n                },\n            });\n        }\n    }\n    removeQuantity(quantity, group) {\n        this.removeAt(0, quantity, group);\n    }\n    setDensity() {\n        const options = this.container.actualOptions;\n        for (const group in options.particles.groups) {\n            this._applyDensity(options.particles.groups[group], 0, group);\n        }\n        this._applyDensity(options.particles, options.manualParticles.length);\n    }\n    async update(delta) {\n        var _a, _b;\n        const container = this.container, particlesToDelete = [];\n        for (const [, pathGenerator] of container.pathGenerators) {\n            pathGenerator.update();\n        }\n        for (const [, plugin] of container.plugins) {\n            (_a = plugin.update) === null || _a === void 0 ? void 0 : _a.call(plugin, delta);\n        }\n        for (const particle of this.array) {\n            const resizeFactor = container.canvas.resizeFactor;\n            if (resizeFactor && !particle.ignoresResizeRatio) {\n                particle.position.x *= resizeFactor.width;\n                particle.position.y *= resizeFactor.height;\n                particle.initialPosition.x *= resizeFactor.width;\n                particle.initialPosition.y *= resizeFactor.height;\n            }\n            particle.ignoresResizeRatio = false;\n            await this.interactionManager.reset(particle);\n            for (const [, plugin] of this.container.plugins) {\n                if (particle.destroyed) {\n                    break;\n                }\n                (_b = plugin.particleUpdate) === null || _b === void 0 ? void 0 : _b.call(plugin, particle, delta);\n            }\n            for (const mover of this.movers) {\n                if (mover.isEnabled(particle)) {\n                    mover.move(particle, delta);\n                }\n            }\n            if (particle.destroyed) {\n                particlesToDelete.push(particle);\n                continue;\n            }\n            this.quadTree.insert(new Point(particle.getPosition(), particle));\n        }\n        for (const particle of particlesToDelete) {\n            this.remove(particle);\n        }\n        await this.interactionManager.externalInteract(delta);\n        for (const particle of this.array) {\n            for (const updater of this.updaters) {\n                updater.update(particle, delta);\n            }\n            if (!particle.destroyed && !particle.spawning) {\n                await this.interactionManager.particlesInteract(particle, delta);\n            }\n        }\n        delete container.canvas.resizeFactor;\n    }\n    _applyDensity(options, manualCount, group) {\n        var _a;\n        if (!((_a = options.number.density) === null || _a === void 0 ? void 0 : _a.enable)) {\n            return;\n        }\n        const numberOptions = options.number, densityFactor = this._initDensityFactor(numberOptions.density), optParticlesNumber = numberOptions.value, optParticlesLimit = numberOptions.limit > 0 ? numberOptions.limit : optParticlesNumber, particlesNumber = Math.min(optParticlesNumber, optParticlesLimit) * densityFactor + manualCount, particlesCount = Math.min(this.count, this.array.filter((t) => t.group === group).length);\n        this.limit = numberOptions.limit * densityFactor;\n        if (particlesCount < particlesNumber) {\n            this.push(Math.abs(particlesNumber - particlesCount), undefined, options, group);\n        }\n        else if (particlesCount > particlesNumber) {\n            this.removeQuantity(particlesCount - particlesNumber, group);\n        }\n    }\n    _initDensityFactor(densityOptions) {\n        const container = this.container;\n        if (!container.canvas.element || !densityOptions.enable) {\n            return 1;\n        }\n        const canvas = container.canvas.element, pxRatio = container.retina.pixelRatio;\n        return (canvas.width * canvas.height) / (densityOptions.factor * pxRatio ** 2 * densityOptions.area);\n    }\n    _pushParticle(position, overrideOptions, group, initializer) {\n        try {\n            let particle = this.pool.pop();\n            if (particle) {\n                particle.init(this.nextId, position, overrideOptions, group);\n            }\n            else {\n                particle = new Particle(this._engine, this.nextId, this.container, position, overrideOptions, group);\n            }\n            let canAdd = true;\n            if (initializer) {\n                canAdd = initializer(particle);\n            }\n            if (!canAdd) {\n                return;\n            }\n            this.array.push(particle);\n            this.zArray.push(particle);\n            this.nextId++;\n            this._engine.dispatchEvent(\"particleAdded\", {\n                container: this.container,\n                data: {\n                    particle,\n                },\n            });\n            return particle;\n        }\n        catch (e) {\n            console.warn(`error adding particle: ${e}`);\n            return;\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}