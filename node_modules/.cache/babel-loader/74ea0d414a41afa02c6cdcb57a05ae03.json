{"ast":null,"code":"import { getRangeValue, parseAlpha } from \"./NumberUtils\";\nexport class RgbColorManager {\n  constructor() {\n    this.key = \"rgb\";\n    this.stringPrefix = \"rgb\";\n  }\n\n  handleColor(color) {\n    var _a;\n\n    const colorValue = color.value,\n          rgbColor = (_a = colorValue.rgb) !== null && _a !== void 0 ? _a : color.value;\n\n    if (rgbColor.r !== undefined) {\n      return rgbColor;\n    }\n  }\n\n  handleRangeColor(color) {\n    var _a;\n\n    const colorValue = color.value,\n          rgbColor = (_a = colorValue.rgb) !== null && _a !== void 0 ? _a : color.value;\n\n    if (rgbColor.r !== undefined) {\n      return {\n        r: getRangeValue(rgbColor.r),\n        g: getRangeValue(rgbColor.g),\n        b: getRangeValue(rgbColor.b)\n      };\n    }\n  }\n\n  parseString(input) {\n    if (!input.startsWith(this.stringPrefix)) {\n      return;\n    }\n\n    const regex = /rgba?\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([\\d.%]+)\\s*)?\\)/i,\n          result = regex.exec(input);\n    return result ? {\n      a: result.length > 4 ? parseAlpha(result[5]) : 1,\n      b: parseInt(result[3], 10),\n      g: parseInt(result[2], 10),\n      r: parseInt(result[1], 10)\n    } : undefined;\n  }\n\n}","map":{"version":3,"sources":["/Users/torea/Desktop/freelanceProject2/rise-consulting/node_modules/tsparticles-engine/esm/Utils/RgbColorManager.js"],"names":["getRangeValue","parseAlpha","RgbColorManager","constructor","key","stringPrefix","handleColor","color","_a","colorValue","value","rgbColor","rgb","r","undefined","handleRangeColor","g","b","parseString","input","startsWith","regex","result","exec","a","length","parseInt"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,UAAxB,QAA0C,eAA1C;AACA,OAAO,MAAMC,eAAN,CAAsB;AACzBC,EAAAA,WAAW,GAAG;AACV,SAAKC,GAAL,GAAW,KAAX;AACA,SAAKC,YAAL,GAAoB,KAApB;AACH;;AACDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,QAAIC,EAAJ;;AACA,UAAMC,UAAU,GAAGF,KAAK,CAACG,KAAzB;AAAA,UAAgCC,QAAQ,GAAG,CAACH,EAAE,GAAGC,UAAU,CAACG,GAAjB,MAA0B,IAA1B,IAAkCJ,EAAE,KAAK,KAAK,CAA9C,GAAkDA,EAAlD,GAAuDD,KAAK,CAACG,KAAxG;;AACA,QAAIC,QAAQ,CAACE,CAAT,KAAeC,SAAnB,EAA8B;AAC1B,aAAOH,QAAP;AACH;AACJ;;AACDI,EAAAA,gBAAgB,CAACR,KAAD,EAAQ;AACpB,QAAIC,EAAJ;;AACA,UAAMC,UAAU,GAAGF,KAAK,CAACG,KAAzB;AAAA,UAAgCC,QAAQ,GAAG,CAACH,EAAE,GAAGC,UAAU,CAACG,GAAjB,MAA0B,IAA1B,IAAkCJ,EAAE,KAAK,KAAK,CAA9C,GAAkDA,EAAlD,GAAuDD,KAAK,CAACG,KAAxG;;AACA,QAAIC,QAAQ,CAACE,CAAT,KAAeC,SAAnB,EAA8B;AAC1B,aAAO;AACHD,QAAAA,CAAC,EAAEb,aAAa,CAACW,QAAQ,CAACE,CAAV,CADb;AAEHG,QAAAA,CAAC,EAAEhB,aAAa,CAACW,QAAQ,CAACK,CAAV,CAFb;AAGHC,QAAAA,CAAC,EAAEjB,aAAa,CAACW,QAAQ,CAACM,CAAV;AAHb,OAAP;AAKH;AACJ;;AACDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,QAAI,CAACA,KAAK,CAACC,UAAN,CAAiB,KAAKf,YAAtB,CAAL,EAA0C;AACtC;AACH;;AACD,UAAMgB,KAAK,GAAG,kEAAd;AAAA,UAAkFC,MAAM,GAAGD,KAAK,CAACE,IAAN,CAAWJ,KAAX,CAA3F;AACA,WAAOG,MAAM,GACP;AACEE,MAAAA,CAAC,EAAEF,MAAM,CAACG,MAAP,GAAgB,CAAhB,GAAoBxB,UAAU,CAACqB,MAAM,CAAC,CAAD,CAAP,CAA9B,GAA4C,CADjD;AAEEL,MAAAA,CAAC,EAAES,QAAQ,CAACJ,MAAM,CAAC,CAAD,CAAP,EAAY,EAAZ,CAFb;AAGEN,MAAAA,CAAC,EAAEU,QAAQ,CAACJ,MAAM,CAAC,CAAD,CAAP,EAAY,EAAZ,CAHb;AAIET,MAAAA,CAAC,EAAEa,QAAQ,CAACJ,MAAM,CAAC,CAAD,CAAP,EAAY,EAAZ;AAJb,KADO,GAOPR,SAPN;AAQH;;AApCwB","sourcesContent":["import { getRangeValue, parseAlpha } from \"./NumberUtils\";\nexport class RgbColorManager {\n    constructor() {\n        this.key = \"rgb\";\n        this.stringPrefix = \"rgb\";\n    }\n    handleColor(color) {\n        var _a;\n        const colorValue = color.value, rgbColor = (_a = colorValue.rgb) !== null && _a !== void 0 ? _a : color.value;\n        if (rgbColor.r !== undefined) {\n            return rgbColor;\n        }\n    }\n    handleRangeColor(color) {\n        var _a;\n        const colorValue = color.value, rgbColor = (_a = colorValue.rgb) !== null && _a !== void 0 ? _a : color.value;\n        if (rgbColor.r !== undefined) {\n            return {\n                r: getRangeValue(rgbColor.r),\n                g: getRangeValue(rgbColor.g),\n                b: getRangeValue(rgbColor.b),\n            };\n        }\n    }\n    parseString(input) {\n        if (!input.startsWith(this.stringPrefix)) {\n            return;\n        }\n        const regex = /rgba?\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([\\d.%]+)\\s*)?\\)/i, result = regex.exec(input);\n        return result\n            ? {\n                a: result.length > 4 ? parseAlpha(result[5]) : 1,\n                b: parseInt(result[3], 10),\n                g: parseInt(result[2], 10),\n                r: parseInt(result[1], 10),\n            }\n            : undefined;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}