{"ast":null,"code":"import _classCallCheck from \"/Users/torea/Desktop/freelanceProject2/rise-consulting/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/torea/Desktop/freelanceProject2/rise-consulting/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { getHslAnimationFromHsl, getRangeValue, itemFromSingleOrMultiple, randomInRange, rangeColorToHsl } from \"tsparticles-engine\";\n\nfunction updateColorValue(delta, value, valueAnimation, max, decrease) {\n  var _a, _b;\n\n  var colorValue = value;\n\n  if (!colorValue || !colorValue.enable || colorValue.loops !== undefined && colorValue.maxLoops !== undefined && colorValue.maxLoops > 0 && colorValue.loops >= colorValue.maxLoops) {\n    return;\n  }\n\n  var offset = randomInRange(valueAnimation.offset),\n      velocity = ((_a = value.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor + offset * 3.6,\n      decay = (_b = value.decay) !== null && _b !== void 0 ? _b : 1;\n\n  if (!decrease || colorValue.status === \"increasing\") {\n    colorValue.value += velocity;\n\n    if (colorValue.value > max) {\n      if (!colorValue.loops) {\n        colorValue.loops = 0;\n      }\n\n      colorValue.loops++;\n\n      if (decrease) {\n        colorValue.status = \"decreasing\";\n        colorValue.value -= colorValue.value % max;\n      }\n    }\n  } else {\n    colorValue.value -= velocity;\n\n    if (colorValue.value < 0) {\n      if (!colorValue.loops) {\n        colorValue.loops = 0;\n      }\n\n      colorValue.loops++;\n      colorValue.status = \"increasing\";\n      colorValue.value += colorValue.value;\n    }\n  }\n\n  if (colorValue.velocity && decay !== 1) {\n    colorValue.velocity *= decay;\n  }\n\n  if (colorValue.value > max) {\n    colorValue.value %= max;\n  }\n}\n\nfunction updateStrokeColor(particle, delta) {\n  if (!particle.strokeColor || !particle.strokeAnimation) {\n    return;\n  }\n\n  var h = particle.strokeColor.h;\n\n  if (h) {\n    updateColorValue(delta, h, particle.strokeAnimation.h, 360, false);\n  }\n\n  var s = particle.strokeColor.s;\n\n  if (s) {\n    updateColorValue(delta, s, particle.strokeAnimation.s, 100, true);\n  }\n\n  var l = particle.strokeColor.l;\n\n  if (l) {\n    updateColorValue(delta, l, particle.strokeAnimation.l, 100, true);\n  }\n}\n\nexport var StrokeColorUpdater = /*#__PURE__*/function () {\n  function StrokeColorUpdater(container) {\n    _classCallCheck(this, StrokeColorUpdater);\n\n    this.container = container;\n  }\n\n  _createClass(StrokeColorUpdater, [{\n    key: \"init\",\n    value: function init(particle) {\n      var _a, _b, _c;\n\n      var container = this.container;\n      var stroke = itemFromSingleOrMultiple(particle.options.stroke, particle.id, particle.options.reduceDuplicates);\n      particle.strokeWidth = getRangeValue(stroke.width) * container.retina.pixelRatio;\n      particle.strokeOpacity = getRangeValue((_a = stroke.opacity) !== null && _a !== void 0 ? _a : 1);\n      particle.strokeAnimation = (_b = stroke.color) === null || _b === void 0 ? void 0 : _b.animation;\n      var strokeHslColor = (_c = rangeColorToHsl(stroke.color)) !== null && _c !== void 0 ? _c : particle.getFillColor();\n\n      if (strokeHslColor) {\n        particle.strokeColor = getHslAnimationFromHsl(strokeHslColor, particle.strokeAnimation, container.retina.reduceFactor);\n      }\n    }\n  }, {\n    key: \"isEnabled\",\n    value: function isEnabled(particle) {\n      var _a, _b, _c;\n\n      var color = particle.strokeAnimation;\n      return !particle.destroyed && !particle.spawning && !!color && (((_a = particle.strokeColor) === null || _a === void 0 ? void 0 : _a.h.value) !== undefined && particle.strokeColor.h.enable || ((_b = particle.strokeColor) === null || _b === void 0 ? void 0 : _b.s.value) !== undefined && particle.strokeColor.s.enable || ((_c = particle.strokeColor) === null || _c === void 0 ? void 0 : _c.l.value) !== undefined && particle.strokeColor.l.enable);\n    }\n  }, {\n    key: \"update\",\n    value: function update(particle, delta) {\n      if (!this.isEnabled(particle)) {\n        return;\n      }\n\n      updateStrokeColor(particle, delta);\n    }\n  }]);\n\n  return StrokeColorUpdater;\n}();","map":{"version":3,"sources":["/Users/torea/Desktop/freelanceProject2/rise-consulting/node_modules/tsparticles-updater-stroke-color/esm/StrokeColorUpdater.js"],"names":["getHslAnimationFromHsl","getRangeValue","itemFromSingleOrMultiple","randomInRange","rangeColorToHsl","updateColorValue","delta","value","valueAnimation","max","decrease","_a","_b","colorValue","enable","loops","undefined","maxLoops","offset","velocity","factor","decay","status","updateStrokeColor","particle","strokeColor","strokeAnimation","h","s","l","StrokeColorUpdater","container","_c","stroke","options","id","reduceDuplicates","strokeWidth","width","retina","pixelRatio","strokeOpacity","opacity","color","animation","strokeHslColor","getFillColor","reduceFactor","destroyed","spawning","isEnabled"],"mappings":"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","sourcesContent":["import { getHslAnimationFromHsl, getRangeValue, itemFromSingleOrMultiple, randomInRange, rangeColorToHsl, } from \"tsparticles-engine\";\nfunction updateColorValue(delta, value, valueAnimation, max, decrease) {\n    var _a, _b;\n    const colorValue = value;\n    if (!colorValue ||\n        !colorValue.enable ||\n        (colorValue.loops !== undefined &&\n            colorValue.maxLoops !== undefined &&\n            colorValue.maxLoops > 0 &&\n            colorValue.loops >= colorValue.maxLoops)) {\n        return;\n    }\n    const offset = randomInRange(valueAnimation.offset), velocity = ((_a = value.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor + offset * 3.6, decay = (_b = value.decay) !== null && _b !== void 0 ? _b : 1;\n    if (!decrease || colorValue.status === \"increasing\") {\n        colorValue.value += velocity;\n        if (colorValue.value > max) {\n            if (!colorValue.loops) {\n                colorValue.loops = 0;\n            }\n            colorValue.loops++;\n            if (decrease) {\n                colorValue.status = \"decreasing\";\n                colorValue.value -= colorValue.value % max;\n            }\n        }\n    }\n    else {\n        colorValue.value -= velocity;\n        if (colorValue.value < 0) {\n            if (!colorValue.loops) {\n                colorValue.loops = 0;\n            }\n            colorValue.loops++;\n            colorValue.status = \"increasing\";\n            colorValue.value += colorValue.value;\n        }\n    }\n    if (colorValue.velocity && decay !== 1) {\n        colorValue.velocity *= decay;\n    }\n    if (colorValue.value > max) {\n        colorValue.value %= max;\n    }\n}\nfunction updateStrokeColor(particle, delta) {\n    if (!particle.strokeColor || !particle.strokeAnimation) {\n        return;\n    }\n    const h = particle.strokeColor.h;\n    if (h) {\n        updateColorValue(delta, h, particle.strokeAnimation.h, 360, false);\n    }\n    const s = particle.strokeColor.s;\n    if (s) {\n        updateColorValue(delta, s, particle.strokeAnimation.s, 100, true);\n    }\n    const l = particle.strokeColor.l;\n    if (l) {\n        updateColorValue(delta, l, particle.strokeAnimation.l, 100, true);\n    }\n}\nexport class StrokeColorUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    init(particle) {\n        var _a, _b, _c;\n        const container = this.container;\n        const stroke = itemFromSingleOrMultiple(particle.options.stroke, particle.id, particle.options.reduceDuplicates);\n        particle.strokeWidth = getRangeValue(stroke.width) * container.retina.pixelRatio;\n        particle.strokeOpacity = getRangeValue((_a = stroke.opacity) !== null && _a !== void 0 ? _a : 1);\n        particle.strokeAnimation = (_b = stroke.color) === null || _b === void 0 ? void 0 : _b.animation;\n        const strokeHslColor = (_c = rangeColorToHsl(stroke.color)) !== null && _c !== void 0 ? _c : particle.getFillColor();\n        if (strokeHslColor) {\n            particle.strokeColor = getHslAnimationFromHsl(strokeHslColor, particle.strokeAnimation, container.retina.reduceFactor);\n        }\n    }\n    isEnabled(particle) {\n        var _a, _b, _c;\n        const color = particle.strokeAnimation;\n        return (!particle.destroyed &&\n            !particle.spawning &&\n            !!color &&\n            ((((_a = particle.strokeColor) === null || _a === void 0 ? void 0 : _a.h.value) !== undefined && particle.strokeColor.h.enable) ||\n                (((_b = particle.strokeColor) === null || _b === void 0 ? void 0 : _b.s.value) !== undefined && particle.strokeColor.s.enable) ||\n                (((_c = particle.strokeColor) === null || _c === void 0 ? void 0 : _c.l.value) !== undefined && particle.strokeColor.l.enable)));\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateStrokeColor(particle, delta);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}