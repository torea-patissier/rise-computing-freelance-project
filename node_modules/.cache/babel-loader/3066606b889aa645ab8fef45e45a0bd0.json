{"ast":null,"code":"import _classCallCheck from \"/Users/torea/Desktop/freelanceProject2/rise-consulting/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/torea/Desktop/freelanceProject2/rise-consulting/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { deepExtend } from \"../../../../Utils/Utils\";\nvar charKey = \"character\",\n    charAltKey = \"char\",\n    imageKey = \"image\",\n    imageAltKey = \"images\",\n    polygonKey = \"polygon\",\n    polygonAltKey = \"star\";\nexport var Shape = /*#__PURE__*/function () {\n  function Shape() {\n    _classCallCheck(this, Shape);\n\n    this.options = {};\n    this.type = \"circle\";\n  }\n\n  _createClass(Shape, [{\n    key: \"load\",\n    value: function load(data) {\n      var _a, _b, _c;\n\n      if (!data) {\n        return;\n      }\n\n      var options = (_a = data.options) !== null && _a !== void 0 ? _a : data.custom;\n\n      if (options !== undefined) {\n        for (var shape in options) {\n          var item = options[shape];\n\n          if (item) {\n            this.options[shape] = deepExtend((_b = this.options[shape]) !== null && _b !== void 0 ? _b : {}, item);\n          }\n        }\n      }\n\n      this.loadShape(data.character, charKey, charAltKey, true);\n      this.loadShape(data.polygon, polygonKey, polygonAltKey, false);\n      this.loadShape((_c = data.image) !== null && _c !== void 0 ? _c : data.images, imageKey, imageAltKey, true);\n\n      if (data.type !== undefined) {\n        this.type = data.type;\n      }\n    }\n  }, {\n    key: \"loadShape\",\n    value: function loadShape(item, mainKey, altKey, altOverride) {\n      var _a, _b;\n\n      if (!item) {\n        return;\n      }\n\n      var isArray = item instanceof Array;\n      var emptyValue = isArray ? [] : {},\n          mainDifferentValues = isArray !== this.options[mainKey] instanceof Array,\n          altDifferentValues = isArray !== this.options[altKey] instanceof Array;\n\n      if (mainDifferentValues) {\n        this.options[mainKey] = emptyValue;\n      }\n\n      if (altDifferentValues && altOverride) {\n        this.options[altKey] = emptyValue;\n      }\n\n      this.options[mainKey] = deepExtend((_a = this.options[mainKey]) !== null && _a !== void 0 ? _a : emptyValue, item);\n\n      if (!this.options[altKey] || altOverride) {\n        this.options[altKey] = deepExtend((_b = this.options[altKey]) !== null && _b !== void 0 ? _b : emptyValue, item);\n      }\n    }\n  }, {\n    key: \"character\",\n    get: function get() {\n      var _a;\n\n      return (_a = this.options[charKey]) !== null && _a !== void 0 ? _a : this.options[charAltKey];\n    },\n    set: function set(value) {\n      this.options[charAltKey] = this.options[charKey] = value;\n    }\n  }, {\n    key: \"custom\",\n    get: function get() {\n      return this.options;\n    },\n    set: function set(value) {\n      this.options = value;\n    }\n  }, {\n    key: \"image\",\n    get: function get() {\n      var _a;\n\n      return (_a = this.options[imageKey]) !== null && _a !== void 0 ? _a : this.options[imageAltKey];\n    },\n    set: function set(value) {\n      this.options[imageAltKey] = this.options[imageKey] = value;\n    }\n  }, {\n    key: \"images\",\n    get: function get() {\n      return this.image;\n    },\n    set: function set(value) {\n      this.image = value;\n    }\n  }, {\n    key: \"polygon\",\n    get: function get() {\n      var _a;\n\n      return (_a = this.options[polygonKey]) !== null && _a !== void 0 ? _a : this.options[polygonAltKey];\n    },\n    set: function set(value) {\n      this.options[polygonAltKey] = this.options[polygonKey] = value;\n    }\n  }, {\n    key: \"stroke\",\n    get: function get() {\n      return [];\n    },\n    set: function set(_value) {}\n  }]);\n\n  return Shape;\n}();","map":{"version":3,"sources":["/Users/torea/Desktop/freelanceProject2/rise-consulting/node_modules/tsparticles-engine/esm/Options/Classes/Particles/Shape/Shape.js"],"names":["deepExtend","charKey","charAltKey","imageKey","imageAltKey","polygonKey","polygonAltKey","Shape","options","type","data","_a","_b","_c","custom","undefined","shape","item","loadShape","character","polygon","image","images","mainKey","altKey","altOverride","isArray","Array","emptyValue","mainDifferentValues","altDifferentValues","value","_value"],"mappings":"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","sourcesContent":["import { deepExtend } from \"../../../../Utils/Utils\";\nconst charKey = \"character\", charAltKey = \"char\", imageKey = \"image\", imageAltKey = \"images\", polygonKey = \"polygon\", polygonAltKey = \"star\";\nexport class Shape {\n    constructor() {\n        this.options = {};\n        this.type = \"circle\";\n    }\n    get character() {\n        var _a;\n        return ((_a = this.options[charKey]) !== null && _a !== void 0 ? _a : this.options[charAltKey]);\n    }\n    set character(value) {\n        this.options[charAltKey] = this.options[charKey] = value;\n    }\n    get custom() {\n        return this.options;\n    }\n    set custom(value) {\n        this.options = value;\n    }\n    get image() {\n        var _a;\n        return ((_a = this.options[imageKey]) !== null && _a !== void 0 ? _a : this.options[imageAltKey]);\n    }\n    set image(value) {\n        this.options[imageAltKey] = this.options[imageKey] = value;\n    }\n    get images() {\n        return this.image;\n    }\n    set images(value) {\n        this.image = value;\n    }\n    get polygon() {\n        var _a;\n        return ((_a = this.options[polygonKey]) !== null && _a !== void 0 ? _a : this.options[polygonAltKey]);\n    }\n    set polygon(value) {\n        this.options[polygonAltKey] = this.options[polygonKey] = value;\n    }\n    get stroke() {\n        return [];\n    }\n    set stroke(_value) {\n    }\n    load(data) {\n        var _a, _b, _c;\n        if (!data) {\n            return;\n        }\n        const options = (_a = data.options) !== null && _a !== void 0 ? _a : data.custom;\n        if (options !== undefined) {\n            for (const shape in options) {\n                const item = options[shape];\n                if (item) {\n                    this.options[shape] = deepExtend((_b = this.options[shape]) !== null && _b !== void 0 ? _b : {}, item);\n                }\n            }\n        }\n        this.loadShape(data.character, charKey, charAltKey, true);\n        this.loadShape(data.polygon, polygonKey, polygonAltKey, false);\n        this.loadShape((_c = data.image) !== null && _c !== void 0 ? _c : data.images, imageKey, imageAltKey, true);\n        if (data.type !== undefined) {\n            this.type = data.type;\n        }\n    }\n    loadShape(item, mainKey, altKey, altOverride) {\n        var _a, _b;\n        if (!item) {\n            return;\n        }\n        const isArray = item instanceof Array;\n        const emptyValue = isArray ? [] : {}, mainDifferentValues = isArray !== this.options[mainKey] instanceof Array, altDifferentValues = isArray !== this.options[altKey] instanceof Array;\n        if (mainDifferentValues) {\n            this.options[mainKey] = emptyValue;\n        }\n        if (altDifferentValues && altOverride) {\n            this.options[altKey] = emptyValue;\n        }\n        this.options[mainKey] = deepExtend((_a = this.options[mainKey]) !== null && _a !== void 0 ? _a : emptyValue, item);\n        if (!this.options[altKey] || altOverride) {\n            this.options[altKey] = deepExtend((_b = this.options[altKey]) !== null && _b !== void 0 ? _b : emptyValue, item);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}