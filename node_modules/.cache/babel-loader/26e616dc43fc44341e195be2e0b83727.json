{"ast":null,"code":"import _regeneratorRuntime from \"/Users/torea/Desktop/freelanceProject2/rise-consulting/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _createForOfIteratorHelper from \"/Users/torea/Desktop/freelanceProject2/rise-consulting/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _asyncToGenerator from \"/Users/torea/Desktop/freelanceProject2/rise-consulting/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/torea/Desktop/freelanceProject2/rise-consulting/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/torea/Desktop/freelanceProject2/rise-consulting/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _createSuper from \"/Users/torea/Desktop/freelanceProject2/rise-consulting/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _inherits from \"/Users/torea/Desktop/freelanceProject2/rise-consulting/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { ExternalInteractorBase, drawLine, getDistance, getLinkColor, getLinkRandomColor, getStyleFromRgb, isInArray, mouseMoveEvent } from \"tsparticles-engine\";\nimport { Grab } from \"./Options/Classes/Grab\";\nexport function drawGrabLine(context, width, begin, end, colorLine, opacity) {\n  drawLine(context, begin, end);\n  context.strokeStyle = getStyleFromRgb(colorLine, opacity);\n  context.lineWidth = width;\n  context.stroke();\n}\n\nfunction drawGrab(container, particle, lineColor, opacity, mousePos) {\n  container.canvas.draw(function (ctx) {\n    var _a;\n\n    var beginPos = particle.getPosition();\n    drawGrabLine(ctx, (_a = particle.retina.linksWidth) !== null && _a !== void 0 ? _a : 0, beginPos, mousePos, lineColor, opacity);\n  });\n}\n\nexport var Grabber = /*#__PURE__*/function (_ExternalInteractorBa) {\n  _inherits(Grabber, _ExternalInteractorBa);\n\n  var _super = _createSuper(Grabber);\n\n  function Grabber(container) {\n    _classCallCheck(this, Grabber);\n\n    return _super.call(this, container);\n  }\n\n  _createClass(Grabber, [{\n    key: \"clear\",\n    value: function clear() {}\n  }, {\n    key: \"init\",\n    value: function init() {\n      var container = this.container,\n          grab = container.actualOptions.interactivity.modes.grab;\n\n      if (!grab) {\n        return;\n      }\n\n      container.retina.grabModeDistance = grab.distance * container.retina.pixelRatio;\n    }\n  }, {\n    key: \"interact\",\n    value: function () {\n      var _interact = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _this = this;\n\n        var _a, _b, container, options, interactivity, mousePos, distance, query, _iterator, _step, particle, pos, pointDistance, grabLineOptions, lineOpacity, opacityLine, optColor, linksOptions, colorLine;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                container = this.container, options = container.actualOptions, interactivity = options.interactivity;\n\n                if (!(!interactivity.modes.grab || !interactivity.events.onHover.enable || container.interactivity.status !== mouseMoveEvent)) {\n                  _context.next = 3;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 3:\n                mousePos = container.interactivity.mouse.position;\n\n                if (mousePos) {\n                  _context.next = 6;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 6:\n                distance = container.retina.grabModeDistance;\n\n                if (!(!distance || distance < 0)) {\n                  _context.next = 9;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 9:\n                query = container.particles.quadTree.queryCircle(mousePos, distance, function (p) {\n                  return _this.isEnabled(p);\n                });\n                _iterator = _createForOfIteratorHelper(query);\n                _context.prev = 11;\n\n                _iterator.s();\n\n              case 13:\n                if ((_step = _iterator.n()).done) {\n                  _context.next = 29;\n                  break;\n                }\n\n                particle = _step.value;\n                pos = particle.getPosition(), pointDistance = getDistance(pos, mousePos);\n\n                if (!(pointDistance > distance)) {\n                  _context.next = 18;\n                  break;\n                }\n\n                return _context.abrupt(\"continue\", 27);\n\n              case 18:\n                grabLineOptions = interactivity.modes.grab.links, lineOpacity = grabLineOptions.opacity, opacityLine = lineOpacity - pointDistance * lineOpacity / distance;\n\n                if (!(opacityLine <= 0)) {\n                  _context.next = 21;\n                  break;\n                }\n\n                return _context.abrupt(\"continue\", 27);\n\n              case 21:\n                optColor = (_a = grabLineOptions.color) !== null && _a !== void 0 ? _a : (_b = particle.options.links) === null || _b === void 0 ? void 0 : _b.color;\n\n                if (!container.particles.grabLineColor && optColor) {\n                  linksOptions = interactivity.modes.grab.links;\n                  container.particles.grabLineColor = getLinkRandomColor(optColor, linksOptions.blink, linksOptions.consent);\n                }\n\n                colorLine = getLinkColor(particle, undefined, container.particles.grabLineColor);\n\n                if (colorLine) {\n                  _context.next = 26;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 26:\n                drawGrab(container, particle, colorLine, opacityLine, mousePos);\n\n              case 27:\n                _context.next = 13;\n                break;\n\n              case 29:\n                _context.next = 34;\n                break;\n\n              case 31:\n                _context.prev = 31;\n                _context.t0 = _context[\"catch\"](11);\n\n                _iterator.e(_context.t0);\n\n              case 34:\n                _context.prev = 34;\n\n                _iterator.f();\n\n                return _context.finish(34);\n\n              case 37:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[11, 31, 34, 37]]);\n      }));\n\n      function interact() {\n        return _interact.apply(this, arguments);\n      }\n\n      return interact;\n    }()\n  }, {\n    key: \"isEnabled\",\n    value: function isEnabled(particle) {\n      var _a;\n\n      var container = this.container,\n          mouse = container.interactivity.mouse,\n          events = ((_a = particle === null || particle === void 0 ? void 0 : particle.interactivity) !== null && _a !== void 0 ? _a : container.actualOptions.interactivity).events;\n      return events.onHover.enable && !!mouse.position && isInArray(\"grab\", events.onHover.mode);\n    }\n  }, {\n    key: \"loadModeOptions\",\n    value: function loadModeOptions(options) {\n      if (!options.grab) {\n        options.grab = new Grab();\n      }\n\n      for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        sources[_key - 1] = arguments[_key];\n      }\n\n      for (var _i = 0, _sources = sources; _i < _sources.length; _i++) {\n        var source = _sources[_i];\n        options.grab.load(source === null || source === void 0 ? void 0 : source.grab);\n      }\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {}\n  }]);\n\n  return Grabber;\n}(ExternalInteractorBase);","map":{"version":3,"sources":["/Users/torea/Desktop/freelanceProject2/rise-consulting/node_modules/tsparticles-interaction-external-grab/esm/Grabber.js"],"names":["ExternalInteractorBase","drawLine","getDistance","getLinkColor","getLinkRandomColor","getStyleFromRgb","isInArray","mouseMoveEvent","Grab","drawGrabLine","context","width","begin","end","colorLine","opacity","strokeStyle","lineWidth","stroke","drawGrab","container","particle","lineColor","mousePos","canvas","draw","ctx","_a","beginPos","getPosition","retina","linksWidth","Grabber","grab","actualOptions","interactivity","modes","grabModeDistance","distance","pixelRatio","options","events","onHover","enable","status","mouse","position","query","particles","quadTree","queryCircle","p","isEnabled","pos","pointDistance","grabLineOptions","links","lineOpacity","opacityLine","optColor","color","_b","grabLineColor","linksOptions","blink","consent","undefined","mode","sources","source","load"],"mappings":";;;;;;;AAAA,SAASA,sBAAT,EAAiCC,QAAjC,EAA2CC,WAA3C,EAAwDC,YAAxD,EAAsEC,kBAAtE,EAA0FC,eAA1F,EAA2GC,SAA3G,EAAsHC,cAAtH,QAA6I,oBAA7I;AACA,SAASC,IAAT,QAAqB,wBAArB;AACA,OAAO,SAASC,YAAT,CAAsBC,OAAtB,EAA+BC,KAA/B,EAAsCC,KAAtC,EAA6CC,GAA7C,EAAkDC,SAAlD,EAA6DC,OAA7D,EAAsE;AACzEd,EAAAA,QAAQ,CAACS,OAAD,EAAUE,KAAV,EAAiBC,GAAjB,CAAR;AACAH,EAAAA,OAAO,CAACM,WAAR,GAAsBX,eAAe,CAACS,SAAD,EAAYC,OAAZ,CAArC;AACAL,EAAAA,OAAO,CAACO,SAAR,GAAoBN,KAApB;AACAD,EAAAA,OAAO,CAACQ,MAAR;AACH;;AACD,SAASC,QAAT,CAAkBC,SAAlB,EAA6BC,QAA7B,EAAuCC,SAAvC,EAAkDP,OAAlD,EAA2DQ,QAA3D,EAAqE;AACjEH,EAAAA,SAAS,CAACI,MAAV,CAAiBC,IAAjB,CAAsB,UAACC,GAAD,EAAS;AAC3B,QAAIC,EAAJ;;AACA,QAAMC,QAAQ,GAAGP,QAAQ,CAACQ,WAAT,EAAjB;AACApB,IAAAA,YAAY,CAACiB,GAAD,EAAM,CAACC,EAAE,GAAGN,QAAQ,CAACS,MAAT,CAAgBC,UAAtB,MAAsC,IAAtC,IAA8CJ,EAAE,KAAK,KAAK,CAA1D,GAA8DA,EAA9D,GAAmE,CAAzE,EAA4EC,QAA5E,EAAsFL,QAAtF,EAAgGD,SAAhG,EAA2GP,OAA3G,CAAZ;AACH,GAJD;AAKH;;AACD,WAAaiB,OAAb;AAAA;;AAAA;;AACI,mBAAYZ,SAAZ,EAAuB;AAAA;;AAAA,6BACbA,SADa;AAEtB;;AAHL;AAAA;AAAA,4BAIY,CACP;AALL;AAAA;AAAA,2BAMW;AACH,UAAMA,SAAS,GAAG,KAAKA,SAAvB;AAAA,UAAkCa,IAAI,GAAGb,SAAS,CAACc,aAAV,CAAwBC,aAAxB,CAAsCC,KAAtC,CAA4CH,IAArF;;AACA,UAAI,CAACA,IAAL,EAAW;AACP;AACH;;AACDb,MAAAA,SAAS,CAACU,MAAV,CAAiBO,gBAAjB,GAAoCJ,IAAI,CAACK,QAAL,GAAgBlB,SAAS,CAACU,MAAV,CAAiBS,UAArE;AACH;AAZL;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAecnB,gBAAAA,SAfd,GAe0B,KAAKA,SAf/B,EAe0CoB,OAf1C,GAeoDpB,SAAS,CAACc,aAf9D,EAe6EC,aAf7E,GAe6FK,OAAO,CAACL,aAfrG;;AAAA,sBAgBY,CAACA,aAAa,CAACC,KAAd,CAAoBH,IAArB,IACA,CAACE,aAAa,CAACM,MAAd,CAAqBC,OAArB,CAA6BC,MAD9B,IAEAvB,SAAS,CAACe,aAAV,CAAwBS,MAAxB,KAAmCrC,cAlB/C;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAqBcgB,gBAAAA,QArBd,GAqByBH,SAAS,CAACe,aAAV,CAAwBU,KAAxB,CAA8BC,QArBvD;;AAAA,oBAsBavB,QAtBb;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAyBce,gBAAAA,QAzBd,GAyByBlB,SAAS,CAACU,MAAV,CAAiBO,gBAzB1C;;AAAA,sBA0BY,CAACC,QAAD,IAAaA,QAAQ,GAAG,CA1BpC;AAAA;AAAA;AAAA;;AAAA;;AAAA;AA6BcS,gBAAAA,KA7Bd,GA6BsB3B,SAAS,CAAC4B,SAAV,CAAoBC,QAApB,CAA6BC,WAA7B,CAAyC3B,QAAzC,EAAmDe,QAAnD,EAA6D,UAACa,CAAD;AAAA,yBAAO,KAAI,CAACC,SAAL,CAAeD,CAAf,CAAP;AAAA,iBAA7D,CA7BtB;AAAA,uDA8B+BJ,KA9B/B;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AA8BmB1B,gBAAAA,QA9BnB;AA+BkBgC,gBAAAA,GA/BlB,GA+BwBhC,QAAQ,CAACQ,WAAT,EA/BxB,EA+BgDyB,aA/BhD,GA+BgEpD,WAAW,CAACmD,GAAD,EAAM9B,QAAN,CA/B3E;;AAAA,sBAgCgB+B,aAAa,GAAGhB,QAhChC;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAmCkBiB,gBAAAA,eAnClB,GAmCoCpB,aAAa,CAACC,KAAd,CAAoBH,IAApB,CAAyBuB,KAnC7D,EAmCoEC,WAnCpE,GAmCkFF,eAAe,CAACxC,OAnClG,EAmC2G2C,WAnC3G,GAmCyHD,WAAW,GAAIH,aAAa,GAAGG,WAAjB,GAAgCnB,QAnCvK;;AAAA,sBAoCgBoB,WAAW,IAAI,CApC/B;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAuCkBC,gBAAAA,QAvClB,GAuC6B,CAAChC,EAAE,GAAG4B,eAAe,CAACK,KAAtB,MAAiC,IAAjC,IAAyCjC,EAAE,KAAK,KAAK,CAArD,GAAyDA,EAAzD,GAA8D,CAACkC,EAAE,GAAGxC,QAAQ,CAACmB,OAAT,CAAiBgB,KAAvB,MAAkC,IAAlC,IAA0CK,EAAE,KAAK,KAAK,CAAtD,GAA0D,KAAK,CAA/D,GAAmEA,EAAE,CAACD,KAvCjK;;AAwCY,oBAAI,CAACxC,SAAS,CAAC4B,SAAV,CAAoBc,aAArB,IAAsCH,QAA1C,EAAoD;AAC1CI,kBAAAA,YAD0C,GAC3B5B,aAAa,CAACC,KAAd,CAAoBH,IAApB,CAAyBuB,KADE;AAEhDpC,kBAAAA,SAAS,CAAC4B,SAAV,CAAoBc,aAApB,GAAoC1D,kBAAkB,CAACuD,QAAD,EAAWI,YAAY,CAACC,KAAxB,EAA+BD,YAAY,CAACE,OAA5C,CAAtD;AACH;;AACKnD,gBAAAA,SA5ClB,GA4C8BX,YAAY,CAACkB,QAAD,EAAW6C,SAAX,EAAsB9C,SAAS,CAAC4B,SAAV,CAAoBc,aAA1C,CA5C1C;;AAAA,oBA6CiBhD,SA7CjB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAgDYK,gBAAAA,QAAQ,CAACC,SAAD,EAAYC,QAAZ,EAAsBP,SAAtB,EAAiC4C,WAAjC,EAA8CnC,QAA9C,CAAR;;AAhDZ;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,8BAmDcF,QAnDd,EAmDwB;AAChB,UAAIM,EAAJ;;AACA,UAAMP,SAAS,GAAG,KAAKA,SAAvB;AAAA,UAAkCyB,KAAK,GAAGzB,SAAS,CAACe,aAAV,CAAwBU,KAAlE;AAAA,UAAyEJ,MAAM,GAAG,CAAC,CAACd,EAAE,GAAGN,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,KAAK,CAAvC,GAA2C,KAAK,CAAhD,GAAoDA,QAAQ,CAACc,aAAnE,MAAsF,IAAtF,IAA8FR,EAAE,KAAK,KAAK,CAA1G,GAA8GA,EAA9G,GAAmHP,SAAS,CAACc,aAAV,CAAwBC,aAA5I,EAA2JM,MAA7O;AACA,aAAOA,MAAM,CAACC,OAAP,CAAeC,MAAf,IAAyB,CAAC,CAACE,KAAK,CAACC,QAAjC,IAA6CxC,SAAS,CAAC,MAAD,EAASmC,MAAM,CAACC,OAAP,CAAeyB,IAAxB,CAA7D;AACH;AAvDL;AAAA;AAAA,oCAwDoB3B,OAxDpB,EAwDyC;AACjC,UAAI,CAACA,OAAO,CAACP,IAAb,EAAmB;AACfO,QAAAA,OAAO,CAACP,IAAR,GAAe,IAAIzB,IAAJ,EAAf;AACH;;AAHgC,wCAAT4D,OAAS;AAATA,QAAAA,OAAS;AAAA;;AAIjC,kCAAqBA,OAArB,8BAA8B;AAAzB,YAAMC,MAAM,eAAZ;AACD7B,QAAAA,OAAO,CAACP,IAAR,CAAaqC,IAAb,CAAkBD,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,GAAuC,KAAK,CAA5C,GAAgDA,MAAM,CAACpC,IAAzE;AACH;AACJ;AA/DL;AAAA;AAAA,4BAgEY,CACP;AAjEL;;AAAA;AAAA,EAA6BjC,sBAA7B","sourcesContent":["import { ExternalInteractorBase, drawLine, getDistance, getLinkColor, getLinkRandomColor, getStyleFromRgb, isInArray, mouseMoveEvent, } from \"tsparticles-engine\";\nimport { Grab } from \"./Options/Classes/Grab\";\nexport function drawGrabLine(context, width, begin, end, colorLine, opacity) {\n    drawLine(context, begin, end);\n    context.strokeStyle = getStyleFromRgb(colorLine, opacity);\n    context.lineWidth = width;\n    context.stroke();\n}\nfunction drawGrab(container, particle, lineColor, opacity, mousePos) {\n    container.canvas.draw((ctx) => {\n        var _a;\n        const beginPos = particle.getPosition();\n        drawGrabLine(ctx, (_a = particle.retina.linksWidth) !== null && _a !== void 0 ? _a : 0, beginPos, mousePos, lineColor, opacity);\n    });\n}\nexport class Grabber extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    clear() {\n    }\n    init() {\n        const container = this.container, grab = container.actualOptions.interactivity.modes.grab;\n        if (!grab) {\n            return;\n        }\n        container.retina.grabModeDistance = grab.distance * container.retina.pixelRatio;\n    }\n    async interact() {\n        var _a, _b;\n        const container = this.container, options = container.actualOptions, interactivity = options.interactivity;\n        if (!interactivity.modes.grab ||\n            !interactivity.events.onHover.enable ||\n            container.interactivity.status !== mouseMoveEvent) {\n            return;\n        }\n        const mousePos = container.interactivity.mouse.position;\n        if (!mousePos) {\n            return;\n        }\n        const distance = container.retina.grabModeDistance;\n        if (!distance || distance < 0) {\n            return;\n        }\n        const query = container.particles.quadTree.queryCircle(mousePos, distance, (p) => this.isEnabled(p));\n        for (const particle of query) {\n            const pos = particle.getPosition(), pointDistance = getDistance(pos, mousePos);\n            if (pointDistance > distance) {\n                continue;\n            }\n            const grabLineOptions = interactivity.modes.grab.links, lineOpacity = grabLineOptions.opacity, opacityLine = lineOpacity - (pointDistance * lineOpacity) / distance;\n            if (opacityLine <= 0) {\n                continue;\n            }\n            const optColor = (_a = grabLineOptions.color) !== null && _a !== void 0 ? _a : (_b = particle.options.links) === null || _b === void 0 ? void 0 : _b.color;\n            if (!container.particles.grabLineColor && optColor) {\n                const linksOptions = interactivity.modes.grab.links;\n                container.particles.grabLineColor = getLinkRandomColor(optColor, linksOptions.blink, linksOptions.consent);\n            }\n            const colorLine = getLinkColor(particle, undefined, container.particles.grabLineColor);\n            if (!colorLine) {\n                return;\n            }\n            drawGrab(container, particle, colorLine, opacityLine, mousePos);\n        }\n    }\n    isEnabled(particle) {\n        var _a;\n        const container = this.container, mouse = container.interactivity.mouse, events = ((_a = particle === null || particle === void 0 ? void 0 : particle.interactivity) !== null && _a !== void 0 ? _a : container.actualOptions.interactivity).events;\n        return events.onHover.enable && !!mouse.position && isInArray(\"grab\", events.onHover.mode);\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.grab) {\n            options.grab = new Grab();\n        }\n        for (const source of sources) {\n            options.grab.load(source === null || source === void 0 ? void 0 : source.grab);\n        }\n    }\n    reset() {\n    }\n}\n"]},"metadata":{},"sourceType":"module"}