{"ast":null,"code":"import { getStyleFromHsl } from \"tsparticles-engine\";\nconst currentColorRegex = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\\((-?\\d+%?[,\\s]+){2,3}\\s*[\\d.]+%?\\))|currentcolor/gi;\n\nfunction replaceColorSvg(imageShape, color, opacity) {\n  const {\n    svgData\n  } = imageShape;\n\n  if (!svgData) {\n    return \"\";\n  }\n\n  const colorStyle = getStyleFromHsl(color, opacity);\n\n  if (svgData.includes(\"fill\")) {\n    return svgData.replace(currentColorRegex, () => colorStyle);\n  }\n\n  const preFillIndex = svgData.indexOf(\">\");\n  return `${svgData.substring(0, preFillIndex)} fill=\"${colorStyle}\"${svgData.substring(preFillIndex)}`;\n}\n\nexport async function loadImage(image) {\n  return new Promise(resolve => {\n    image.loading = true;\n    const img = new Image();\n    image.element = img;\n    img.addEventListener(\"load\", () => {\n      image.loading = false;\n      resolve();\n    });\n    img.addEventListener(\"error\", () => {\n      image.element = undefined;\n      image.error = true;\n      image.loading = false;\n      console.error(`Error tsParticles - loading image: ${image.source}`);\n      resolve();\n    });\n    img.src = image.source;\n  });\n}\nexport async function downloadSvgImage(image) {\n  if (image.type !== \"svg\") {\n    await loadImage(image);\n    return;\n  }\n\n  image.loading = true;\n  const response = await fetch(image.source);\n\n  if (!response.ok) {\n    console.error(\"Error tsParticles - Image not found\");\n    image.error = true;\n  }\n\n  if (!image.error) {\n    image.svgData = await response.text();\n  }\n\n  image.loading = false;\n}\nexport function replaceImageColor(image, imageData, color, particle) {\n  var _a, _b, _c;\n\n  const svgColoredData = replaceColorSvg(image, color, (_b = (_a = particle.opacity) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : 1),\n        imageRes = {\n    color,\n    data: Object.assign(Object.assign({}, image), {\n      svgData: svgColoredData\n    }),\n    loaded: false,\n    ratio: imageData.width / imageData.height,\n    replaceColor: (_c = imageData.replaceColor) !== null && _c !== void 0 ? _c : imageData.replace_color,\n    source: imageData.src\n  };\n  return new Promise(resolve => {\n    const svg = new Blob([svgColoredData], {\n      type: \"image/svg+xml\"\n    }),\n          domUrl = URL || window.URL || window.webkitURL || window,\n          url = domUrl.createObjectURL(svg),\n          img = new Image();\n    img.addEventListener(\"load\", () => {\n      imageRes.loaded = true;\n      imageRes.element = img;\n      resolve(imageRes);\n      domUrl.revokeObjectURL(url);\n    });\n    img.addEventListener(\"error\", async () => {\n      domUrl.revokeObjectURL(url);\n      const img2 = Object.assign(Object.assign({}, image), {\n        error: false,\n        loading: true\n      });\n      await loadImage(img2);\n      imageRes.loaded = true;\n      imageRes.element = img2.element;\n      resolve(imageRes);\n    });\n    img.src = url;\n  });\n}","map":{"version":3,"sources":["/Users/torea/Desktop/freelanceProject2/open-react-template/node_modules/tsparticles-shape-image/esm/Utils.js"],"names":["getStyleFromHsl","currentColorRegex","replaceColorSvg","imageShape","color","opacity","svgData","colorStyle","includes","replace","preFillIndex","indexOf","substring","loadImage","image","Promise","resolve","loading","img","Image","element","addEventListener","undefined","error","console","source","src","downloadSvgImage","type","response","fetch","ok","text","replaceImageColor","imageData","particle","_a","_b","_c","svgColoredData","value","imageRes","data","Object","assign","loaded","ratio","width","height","replaceColor","replace_color","svg","Blob","domUrl","URL","window","webkitURL","url","createObjectURL","revokeObjectURL","img2"],"mappings":"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","sourcesContent":["import { getStyleFromHsl } from \"tsparticles-engine\";\nconst currentColorRegex = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\\((-?\\d+%?[,\\s]+){2,3}\\s*[\\d.]+%?\\))|currentcolor/gi;\nfunction replaceColorSvg(imageShape, color, opacity) {\n    const { svgData } = imageShape;\n    if (!svgData) {\n        return \"\";\n    }\n    const colorStyle = getStyleFromHsl(color, opacity);\n    if (svgData.includes(\"fill\")) {\n        return svgData.replace(currentColorRegex, () => colorStyle);\n    }\n    const preFillIndex = svgData.indexOf(\">\");\n    return `${svgData.substring(0, preFillIndex)} fill=\"${colorStyle}\"${svgData.substring(preFillIndex)}`;\n}\nexport async function loadImage(image) {\n    return new Promise((resolve) => {\n        image.loading = true;\n        const img = new Image();\n        image.element = img;\n        img.addEventListener(\"load\", () => {\n            image.loading = false;\n            resolve();\n        });\n        img.addEventListener(\"error\", () => {\n            image.element = undefined;\n            image.error = true;\n            image.loading = false;\n            console.error(`Error tsParticles - loading image: ${image.source}`);\n            resolve();\n        });\n        img.src = image.source;\n    });\n}\nexport async function downloadSvgImage(image) {\n    if (image.type !== \"svg\") {\n        await loadImage(image);\n        return;\n    }\n    image.loading = true;\n    const response = await fetch(image.source);\n    if (!response.ok) {\n        console.error(\"Error tsParticles - Image not found\");\n        image.error = true;\n    }\n    if (!image.error) {\n        image.svgData = await response.text();\n    }\n    image.loading = false;\n}\nexport function replaceImageColor(image, imageData, color, particle) {\n    var _a, _b, _c;\n    const svgColoredData = replaceColorSvg(image, color, (_b = (_a = particle.opacity) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : 1), imageRes = {\n        color,\n        data: Object.assign(Object.assign({}, image), { svgData: svgColoredData }),\n        loaded: false,\n        ratio: imageData.width / imageData.height,\n        replaceColor: (_c = imageData.replaceColor) !== null && _c !== void 0 ? _c : imageData.replace_color,\n        source: imageData.src,\n    };\n    return new Promise((resolve) => {\n        const svg = new Blob([svgColoredData], { type: \"image/svg+xml\" }), domUrl = URL || window.URL || window.webkitURL || window, url = domUrl.createObjectURL(svg), img = new Image();\n        img.addEventListener(\"load\", () => {\n            imageRes.loaded = true;\n            imageRes.element = img;\n            resolve(imageRes);\n            domUrl.revokeObjectURL(url);\n        });\n        img.addEventListener(\"error\", async () => {\n            domUrl.revokeObjectURL(url);\n            const img2 = Object.assign(Object.assign({}, image), { error: false, loading: true });\n            await loadImage(img2);\n            imageRes.loaded = true;\n            imageRes.element = img2.element;\n            resolve(imageRes);\n        });\n        img.src = url;\n    });\n}\n"]},"metadata":{},"sourceType":"module"}