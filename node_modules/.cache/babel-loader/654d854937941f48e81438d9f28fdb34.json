{"ast":null,"code":"import { executeOnSingleOrMultiple } from \"../../Utils/Utils\";\n\nfunction getItemsFromInitializer(container, map, initializers, force = false) {\n  let res = map.get(container);\n\n  if (!res || force) {\n    res = [...initializers.values()].map(t => t(container));\n    map.set(container, res);\n  }\n\n  return res;\n}\n\nexport class Plugins {\n  constructor(engine) {\n    this._engine = engine;\n    this.plugins = [];\n    this._initializers = {\n      interactors: new Map(),\n      movers: new Map(),\n      updaters: new Map()\n    };\n    this.interactors = new Map();\n    this.movers = new Map();\n    this.updaters = new Map();\n    this.presets = new Map();\n    this.drawers = new Map();\n    this.pathGenerators = new Map();\n  }\n\n  addInteractor(name, initInteractor) {\n    this._initializers.interactors.set(name, initInteractor);\n  }\n\n  addParticleMover(name, initMover) {\n    this._initializers.movers.set(name, initMover);\n  }\n\n  addParticleUpdater(name, initUpdater) {\n    this._initializers.updaters.set(name, initUpdater);\n  }\n\n  addPathGenerator(type, pathGenerator) {\n    if (!this.getPathGenerator(type)) {\n      this.pathGenerators.set(type, pathGenerator);\n    }\n  }\n\n  addPlugin(plugin) {\n    if (!this.getPlugin(plugin.id)) {\n      this.plugins.push(plugin);\n    }\n  }\n\n  addPreset(presetKey, options, override = false) {\n    if (override || !this.getPreset(presetKey)) {\n      this.presets.set(presetKey, options);\n    }\n  }\n\n  addShapeDrawer(types, drawer) {\n    executeOnSingleOrMultiple(types, type => {\n      if (!this.getShapeDrawer(type)) {\n        this.drawers.set(type, drawer);\n      }\n    });\n  }\n\n  destroy(container) {\n    this.updaters.delete(container);\n    this.movers.delete(container);\n    this.interactors.delete(container);\n  }\n\n  getAvailablePlugins(container) {\n    const res = new Map();\n\n    for (const plugin of this.plugins) {\n      if (!plugin.needsPlugin(container.actualOptions)) {\n        continue;\n      }\n\n      res.set(plugin.id, plugin.getPlugin(container));\n    }\n\n    return res;\n  }\n\n  getInteractors(container, force = false) {\n    return getItemsFromInitializer(container, this.interactors, this._initializers.interactors, force);\n  }\n\n  getMovers(container, force = false) {\n    return getItemsFromInitializer(container, this.movers, this._initializers.movers, force);\n  }\n\n  getPathGenerator(type) {\n    return this.pathGenerators.get(type);\n  }\n\n  getPlugin(plugin) {\n    return this.plugins.find(t => t.id === plugin);\n  }\n\n  getPreset(preset) {\n    return this.presets.get(preset);\n  }\n\n  getShapeDrawer(type) {\n    return this.drawers.get(type);\n  }\n\n  getSupportedShapes() {\n    return this.drawers.keys();\n  }\n\n  getUpdaters(container, force = false) {\n    return getItemsFromInitializer(container, this.updaters, this._initializers.updaters, force);\n  }\n\n  loadOptions(options, sourceOptions) {\n    for (const plugin of this.plugins) {\n      plugin.loadOptions(options, sourceOptions);\n    }\n  }\n\n  loadParticlesOptions(container, options, ...sourceOptions) {\n    const updaters = this.updaters.get(container);\n\n    if (!updaters) {\n      return;\n    }\n\n    for (const updater of updaters) {\n      if (updater.loadOptions) {\n        updater.loadOptions(options, ...sourceOptions);\n      }\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/torea/Desktop/freelanceProject2/rise-consulting/node_modules/tsparticles-engine/esm/Core/Utils/Plugins.js"],"names":["executeOnSingleOrMultiple","getItemsFromInitializer","container","map","initializers","force","res","get","values","t","set","Plugins","constructor","engine","_engine","plugins","_initializers","interactors","Map","movers","updaters","presets","drawers","pathGenerators","addInteractor","name","initInteractor","addParticleMover","initMover","addParticleUpdater","initUpdater","addPathGenerator","type","pathGenerator","getPathGenerator","addPlugin","plugin","getPlugin","id","push","addPreset","presetKey","options","override","getPreset","addShapeDrawer","types","drawer","getShapeDrawer","destroy","delete","getAvailablePlugins","needsPlugin","actualOptions","getInteractors","getMovers","find","preset","getSupportedShapes","keys","getUpdaters","loadOptions","sourceOptions","loadParticlesOptions","updater"],"mappings":"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","sourcesContent":["import { executeOnSingleOrMultiple } from \"../../Utils/Utils\";\nfunction getItemsFromInitializer(container, map, initializers, force = false) {\n    let res = map.get(container);\n    if (!res || force) {\n        res = [...initializers.values()].map((t) => t(container));\n        map.set(container, res);\n    }\n    return res;\n}\nexport class Plugins {\n    constructor(engine) {\n        this._engine = engine;\n        this.plugins = [];\n        this._initializers = {\n            interactors: new Map(),\n            movers: new Map(),\n            updaters: new Map(),\n        };\n        this.interactors = new Map();\n        this.movers = new Map();\n        this.updaters = new Map();\n        this.presets = new Map();\n        this.drawers = new Map();\n        this.pathGenerators = new Map();\n    }\n    addInteractor(name, initInteractor) {\n        this._initializers.interactors.set(name, initInteractor);\n    }\n    addParticleMover(name, initMover) {\n        this._initializers.movers.set(name, initMover);\n    }\n    addParticleUpdater(name, initUpdater) {\n        this._initializers.updaters.set(name, initUpdater);\n    }\n    addPathGenerator(type, pathGenerator) {\n        if (!this.getPathGenerator(type)) {\n            this.pathGenerators.set(type, pathGenerator);\n        }\n    }\n    addPlugin(plugin) {\n        if (!this.getPlugin(plugin.id)) {\n            this.plugins.push(plugin);\n        }\n    }\n    addPreset(presetKey, options, override = false) {\n        if (override || !this.getPreset(presetKey)) {\n            this.presets.set(presetKey, options);\n        }\n    }\n    addShapeDrawer(types, drawer) {\n        executeOnSingleOrMultiple(types, (type) => {\n            if (!this.getShapeDrawer(type)) {\n                this.drawers.set(type, drawer);\n            }\n        });\n    }\n    destroy(container) {\n        this.updaters.delete(container);\n        this.movers.delete(container);\n        this.interactors.delete(container);\n    }\n    getAvailablePlugins(container) {\n        const res = new Map();\n        for (const plugin of this.plugins) {\n            if (!plugin.needsPlugin(container.actualOptions)) {\n                continue;\n            }\n            res.set(plugin.id, plugin.getPlugin(container));\n        }\n        return res;\n    }\n    getInteractors(container, force = false) {\n        return getItemsFromInitializer(container, this.interactors, this._initializers.interactors, force);\n    }\n    getMovers(container, force = false) {\n        return getItemsFromInitializer(container, this.movers, this._initializers.movers, force);\n    }\n    getPathGenerator(type) {\n        return this.pathGenerators.get(type);\n    }\n    getPlugin(plugin) {\n        return this.plugins.find((t) => t.id === plugin);\n    }\n    getPreset(preset) {\n        return this.presets.get(preset);\n    }\n    getShapeDrawer(type) {\n        return this.drawers.get(type);\n    }\n    getSupportedShapes() {\n        return this.drawers.keys();\n    }\n    getUpdaters(container, force = false) {\n        return getItemsFromInitializer(container, this.updaters, this._initializers.updaters, force);\n    }\n    loadOptions(options, sourceOptions) {\n        for (const plugin of this.plugins) {\n            plugin.loadOptions(options, sourceOptions);\n        }\n    }\n    loadParticlesOptions(container, options, ...sourceOptions) {\n        const updaters = this.updaters.get(container);\n        if (!updaters) {\n            return;\n        }\n        for (const updater of updaters) {\n            if (updater.loadOptions) {\n                updater.loadOptions(options, ...sourceOptions);\n            }\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}