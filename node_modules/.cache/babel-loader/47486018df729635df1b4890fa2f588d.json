{"ast":null,"code":"var _jsxFileName = \"/Users/torea/Desktop/freelanceProject2/open-react-template/src/components/elements/Particles.js\";\nimport Particles from \"react-tsparticles\";\nimport { loadSlim } from \"tsparticles-slim\"; // loads tsparticles-slim\n//import { loadFull } from \"tsparticles\"; // loads tsparticles\n\nimport { useCallback, useMemo } from \"react\"; // tsParticles Repository: https://github.com/matteobruni/tsparticles\n// tsParticles Website: https://particles.js.org/\n\nconst ParticlesComponent = props => {\n  // using useMemo is not mandatory, but it's recommended since this value can be memoized if static\n  const options = useMemo(() => {\n    // using an empty options object will load the default options, which are static particles with no background and 3px radius, opacity 100%, white color\n    // all options can be found here: https://particles.js.org/docs/interfaces/Options_Interfaces_IOptions.IOptions.html\n    return {\n      background: {\n        color: \"#000\" // this sets a background color for the canvas\n\n      },\n      fullScreen: {\n        enable: true,\n        // enabling this will make the canvas fill the entire screen, it's enabled by default\n        zIndex: -1 // this is the z-index value used when the fullScreen is enabled, it's 0 by default\n\n      },\n      interactivity: {\n        events: {\n          onClick: {\n            enable: true,\n            // enables the click event\n            mode: \"push\" // adds the particles on click\n\n          },\n          onHover: {\n            enable: true,\n            // enables the hover event\n            mode: \"repulse\" // make the particles run away from the cursor\n\n          }\n        },\n        modes: {\n          push: {\n            quantity: 10 // number of particles to add on click\n\n          },\n          repulse: {\n            distance: 100 // distance of the particles from the cursor\n\n          }\n        }\n      },\n      particles: {\n        links: {\n          enable: true,\n          // enabling this will make particles linked together\n          distance: 200 // maximum distance for linking the particles\n\n        },\n        move: {\n          enable: true,\n          // enabling this will make particles move in the canvas\n          speed: {\n            min: 1,\n            max: 5\n          } // using a range in speed value will make particles move in a random speed between min/max values, each particles have its own value, it won't change in time by default\n\n        },\n        opacity: {\n          value: {\n            min: 0.3,\n            max: 0.7\n          } // using a different opacity, to have some semitransparent effects\n\n        },\n        size: {\n          value: {\n            min: 1,\n            max: 3\n          } // let's randomize the particles size a bit\n\n        }\n      }\n    };\n  }, []); // useCallback is not mandatory, but it's recommended since this callback can be memoized if static\n\n  const particlesInit = useCallback(engine => {\n    loadSlim(engine); // loadFull(engine); // for this sample the slim version is enough, choose whatever you prefer, slim is smaller in size but doesn't have all the plugins and the mouse trail feature\n  }, []); // setting an id can be useful for identifying the right particles component, this is useful for multiple instances or reusable components\n\n  return /*#__PURE__*/React.createElement(Particles, {\n    id: props.id,\n    init: particlesInit,\n    options: options,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 10\n    }\n  });\n};\n\nexport default ParticlesComponent;","map":{"version":3,"sources":["/Users/torea/Desktop/freelanceProject2/open-react-template/src/components/elements/Particles.js"],"names":["Particles","loadSlim","useCallback","useMemo","ParticlesComponent","props","options","background","color","fullScreen","enable","zIndex","interactivity","events","onClick","mode","onHover","modes","push","quantity","repulse","distance","particles","links","move","speed","min","max","opacity","value","size","particlesInit","engine","id"],"mappings":";AAAA,OAAOA,SAAP,MAAsB,mBAAtB;AACA,SAASC,QAAT,QAAyB,kBAAzB,C,CAA6C;AAC7C;;AACA,SAASC,WAAT,EAAsBC,OAAtB,QAAqC,OAArC,C,CAEA;AACA;;AACA,MAAMC,kBAAkB,GAAIC,KAAD,IAAW;AACpC;AACA,QAAMC,OAAO,GAAGH,OAAO,CAAC,MAAM;AAC5B;AACA;AACA,WAAO;AACLI,MAAAA,UAAU,EAAE;AACVC,QAAAA,KAAK,EAAE,MADG,CACK;;AADL,OADP;AAILC,MAAAA,UAAU,EAAE;AACVC,QAAAA,MAAM,EAAE,IADE;AACI;AACdC,QAAAA,MAAM,EAAE,CAAC,CAFC,CAEE;;AAFF,OAJP;AAQLC,MAAAA,aAAa,EAAE;AACbC,QAAAA,MAAM,EAAE;AACNC,UAAAA,OAAO,EAAE;AACPJ,YAAAA,MAAM,EAAE,IADD;AACO;AACdK,YAAAA,IAAI,EAAE,MAFC,CAEO;;AAFP,WADH;AAKNC,UAAAA,OAAO,EAAE;AACPN,YAAAA,MAAM,EAAE,IADD;AACO;AACdK,YAAAA,IAAI,EAAE,SAFC,CAEU;;AAFV;AALH,SADK;AAWbE,QAAAA,KAAK,EAAE;AACLC,UAAAA,IAAI,EAAE;AACJC,YAAAA,QAAQ,EAAE,EADN,CACU;;AADV,WADD;AAILC,UAAAA,OAAO,EAAE;AACPC,YAAAA,QAAQ,EAAE,GADH,CACQ;;AADR;AAJJ;AAXM,OARV;AA4BLC,MAAAA,SAAS,EAAE;AACTC,QAAAA,KAAK,EAAE;AACLb,UAAAA,MAAM,EAAE,IADH;AACS;AACdW,UAAAA,QAAQ,EAAE,GAFL,CAEU;;AAFV,SADE;AAKTG,QAAAA,IAAI,EAAE;AACJd,UAAAA,MAAM,EAAE,IADJ;AACU;AACde,UAAAA,KAAK,EAAE;AAAEC,YAAAA,GAAG,EAAE,CAAP;AAAUC,YAAAA,GAAG,EAAE;AAAf,WAFH,CAEuB;;AAFvB,SALG;AASTC,QAAAA,OAAO,EAAE;AACPC,UAAAA,KAAK,EAAE;AAAEH,YAAAA,GAAG,EAAE,GAAP;AAAYC,YAAAA,GAAG,EAAE;AAAjB,WADA,CACwB;;AADxB,SATA;AAYTG,QAAAA,IAAI,EAAE;AACJD,UAAAA,KAAK,EAAE;AAAEH,YAAAA,GAAG,EAAE,CAAP;AAAUC,YAAAA,GAAG,EAAE;AAAf,WADH,CACuB;;AADvB;AAZG;AA5BN,KAAP;AA6CD,GAhDsB,EAgDpB,EAhDoB,CAAvB,CAFoC,CAoDpC;;AACA,QAAMI,aAAa,GAAG7B,WAAW,CAAE8B,MAAD,IAAY;AAC5C/B,IAAAA,QAAQ,CAAC+B,MAAD,CAAR,CAD4C,CAE5C;AACD,GAHgC,EAG9B,EAH8B,CAAjC,CArDoC,CA0DpC;;AACA,sBAAO,oBAAC,SAAD;AAAW,IAAA,EAAE,EAAE3B,KAAK,CAAC4B,EAArB;AAAyB,IAAA,IAAI,EAAEF,aAA/B;AAA8C,IAAA,OAAO,EAAEzB,OAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,CA5DD;;AA8DA,eAAeF,kBAAf","sourcesContent":["import Particles from \"react-tsparticles\";\nimport { loadSlim } from \"tsparticles-slim\"; // loads tsparticles-slim\n//import { loadFull } from \"tsparticles\"; // loads tsparticles\nimport { useCallback, useMemo } from \"react\";\n\n// tsParticles Repository: https://github.com/matteobruni/tsparticles\n// tsParticles Website: https://particles.js.org/\nconst ParticlesComponent = (props) => {\n  // using useMemo is not mandatory, but it's recommended since this value can be memoized if static\n  const options = useMemo(() => {\n    // using an empty options object will load the default options, which are static particles with no background and 3px radius, opacity 100%, white color\n    // all options can be found here: https://particles.js.org/docs/interfaces/Options_Interfaces_IOptions.IOptions.html\n    return {\n      background: {\n        color: \"#000\", // this sets a background color for the canvas\n      },\n      fullScreen: {\n        enable: true, // enabling this will make the canvas fill the entire screen, it's enabled by default\n        zIndex: -1, // this is the z-index value used when the fullScreen is enabled, it's 0 by default\n      },\n      interactivity: {\n        events: {\n          onClick: {\n            enable: true, // enables the click event\n            mode: \"push\", // adds the particles on click\n          },\n          onHover: {\n            enable: true, // enables the hover event\n            mode: \"repulse\", // make the particles run away from the cursor\n          },\n        },\n        modes: {\n          push: {\n            quantity: 10, // number of particles to add on click\n          },\n          repulse: {\n            distance: 100, // distance of the particles from the cursor\n          },\n        },\n      },\n      particles: {\n        links: {\n          enable: true, // enabling this will make particles linked together\n          distance: 200, // maximum distance for linking the particles\n        },\n        move: {\n          enable: true, // enabling this will make particles move in the canvas\n          speed: { min: 1, max: 5 }, // using a range in speed value will make particles move in a random speed between min/max values, each particles have its own value, it won't change in time by default\n        },\n        opacity: {\n          value: { min: 0.3, max: 0.7 }, // using a different opacity, to have some semitransparent effects\n        },\n        size: {\n          value: { min: 1, max: 3 }, // let's randomize the particles size a bit\n        },\n      },\n    };\n  }, []);\n\n  // useCallback is not mandatory, but it's recommended since this callback can be memoized if static\n  const particlesInit = useCallback((engine) => {\n    loadSlim(engine);\n    // loadFull(engine); // for this sample the slim version is enough, choose whatever you prefer, slim is smaller in size but doesn't have all the plugins and the mouse trail feature\n  }, []);\n\n  // setting an id can be useful for identifying the right particles component, this is useful for multiple instances or reusable components\n  return <Particles id={props.id} init={particlesInit} options={options} />;\n};\n\nexport default ParticlesComponent;\n"]},"metadata":{},"sourceType":"module"}