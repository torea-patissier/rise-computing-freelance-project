{"ast":null,"code":"import _classCallCheck from \"/Users/torea/Desktop/freelanceProject2/open-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/torea/Desktop/freelanceProject2/open-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nexport var Vector3d = /*#__PURE__*/function () {\n  function Vector3d(xOrCoords, y, z) {\n    _classCallCheck(this, Vector3d);\n\n    if (typeof xOrCoords !== \"number\" && xOrCoords) {\n      this.x = xOrCoords.x;\n      this.y = xOrCoords.y;\n      var coords3d = xOrCoords;\n      this.z = coords3d.z ? coords3d.z : 0;\n    } else if (xOrCoords !== undefined && y !== undefined) {\n      this.x = xOrCoords;\n      this.y = y;\n      this.z = z !== null && z !== void 0 ? z : 0;\n    } else {\n      throw new Error(\"tsParticles - Vector3d not initialized correctly\");\n    }\n  }\n\n  _createClass(Vector3d, [{\n    key: \"add\",\n    value: function add(v) {\n      return Vector3d.create(this.x + v.x, this.y + v.y, this.z + v.z);\n    }\n  }, {\n    key: \"addTo\",\n    value: function addTo(v) {\n      this.x += v.x;\n      this.y += v.y;\n      this.z += v.z;\n    }\n  }, {\n    key: \"copy\",\n    value: function copy() {\n      return Vector3d.clone(this);\n    }\n  }, {\n    key: \"distanceTo\",\n    value: function distanceTo(v) {\n      return this.sub(v).length;\n    }\n  }, {\n    key: \"distanceToSq\",\n    value: function distanceToSq(v) {\n      return this.sub(v).getLengthSq();\n    }\n  }, {\n    key: \"div\",\n    value: function div(n) {\n      return Vector3d.create(this.x / n, this.y / n, this.z / n);\n    }\n  }, {\n    key: \"divTo\",\n    value: function divTo(n) {\n      this.x /= n;\n      this.y /= n;\n      this.z /= n;\n    }\n  }, {\n    key: \"getLengthSq\",\n    value: function getLengthSq() {\n      return Math.pow(this.x, 2) + Math.pow(this.y, 2);\n    }\n  }, {\n    key: \"mult\",\n    value: function mult(n) {\n      return Vector3d.create(this.x * n, this.y * n, this.z * n);\n    }\n  }, {\n    key: \"multTo\",\n    value: function multTo(n) {\n      this.x *= n;\n      this.y *= n;\n      this.z *= n;\n    }\n  }, {\n    key: \"rotate\",\n    value: function rotate(angle) {\n      return Vector3d.create(this.x * Math.cos(angle) - this.y * Math.sin(angle), this.x * Math.sin(angle) + this.y * Math.cos(angle), 0);\n    }\n  }, {\n    key: \"setTo\",\n    value: function setTo(c) {\n      this.x = c.x;\n      this.y = c.y;\n      var v3d = c;\n      this.z = v3d.z ? v3d.z : 0;\n    }\n  }, {\n    key: \"sub\",\n    value: function sub(v) {\n      return Vector3d.create(this.x - v.x, this.y - v.y, this.z - v.z);\n    }\n  }, {\n    key: \"subFrom\",\n    value: function subFrom(v) {\n      this.x -= v.x;\n      this.y -= v.y;\n      this.z -= v.z;\n    }\n  }, {\n    key: \"updateFromAngle\",\n    value: function updateFromAngle(angle, length) {\n      this.x = Math.cos(angle) * length;\n      this.y = Math.sin(angle) * length;\n    }\n  }, {\n    key: \"angle\",\n    get: function get() {\n      return Math.atan2(this.y, this.x);\n    },\n    set: function set(angle) {\n      this.updateFromAngle(angle, this.length);\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return Math.sqrt(this.getLengthSq());\n    },\n    set: function set(length) {\n      this.updateFromAngle(this.angle, length);\n    }\n  }], [{\n    key: \"clone\",\n    value: function clone(source) {\n      return Vector3d.create(source.x, source.y, source.z);\n    }\n  }, {\n    key: \"create\",\n    value: function create(x, y, z) {\n      return new Vector3d(x, y, z);\n    }\n  }, {\n    key: \"origin\",\n    get: function get() {\n      return Vector3d.create(0, 0, 0);\n    }\n  }]);\n\n  return Vector3d;\n}();","map":{"version":3,"sources":["/Users/torea/Desktop/freelanceProject2/open-react-template/node_modules/tsparticles-engine/esm/Core/Utils/Vector3d.js"],"names":["Vector3d","xOrCoords","y","z","x","coords3d","undefined","Error","v","create","clone","sub","length","getLengthSq","n","angle","Math","cos","sin","c","v3d","atan2","updateFromAngle","sqrt","source"],"mappings":"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","sourcesContent":["export class Vector3d {\n    constructor(xOrCoords, y, z) {\n        if (typeof xOrCoords !== \"number\" && xOrCoords) {\n            this.x = xOrCoords.x;\n            this.y = xOrCoords.y;\n            const coords3d = xOrCoords;\n            this.z = coords3d.z ? coords3d.z : 0;\n        }\n        else if (xOrCoords !== undefined && y !== undefined) {\n            this.x = xOrCoords;\n            this.y = y;\n            this.z = z !== null && z !== void 0 ? z : 0;\n        }\n        else {\n            throw new Error(\"tsParticles - Vector3d not initialized correctly\");\n        }\n    }\n    static get origin() {\n        return Vector3d.create(0, 0, 0);\n    }\n    get angle() {\n        return Math.atan2(this.y, this.x);\n    }\n    set angle(angle) {\n        this.updateFromAngle(angle, this.length);\n    }\n    get length() {\n        return Math.sqrt(this.getLengthSq());\n    }\n    set length(length) {\n        this.updateFromAngle(this.angle, length);\n    }\n    static clone(source) {\n        return Vector3d.create(source.x, source.y, source.z);\n    }\n    static create(x, y, z) {\n        return new Vector3d(x, y, z);\n    }\n    add(v) {\n        return Vector3d.create(this.x + v.x, this.y + v.y, this.z + v.z);\n    }\n    addTo(v) {\n        this.x += v.x;\n        this.y += v.y;\n        this.z += v.z;\n    }\n    copy() {\n        return Vector3d.clone(this);\n    }\n    distanceTo(v) {\n        return this.sub(v).length;\n    }\n    distanceToSq(v) {\n        return this.sub(v).getLengthSq();\n    }\n    div(n) {\n        return Vector3d.create(this.x / n, this.y / n, this.z / n);\n    }\n    divTo(n) {\n        this.x /= n;\n        this.y /= n;\n        this.z /= n;\n    }\n    getLengthSq() {\n        return this.x ** 2 + this.y ** 2;\n    }\n    mult(n) {\n        return Vector3d.create(this.x * n, this.y * n, this.z * n);\n    }\n    multTo(n) {\n        this.x *= n;\n        this.y *= n;\n        this.z *= n;\n    }\n    rotate(angle) {\n        return Vector3d.create(this.x * Math.cos(angle) - this.y * Math.sin(angle), this.x * Math.sin(angle) + this.y * Math.cos(angle), 0);\n    }\n    setTo(c) {\n        this.x = c.x;\n        this.y = c.y;\n        const v3d = c;\n        this.z = v3d.z ? v3d.z : 0;\n    }\n    sub(v) {\n        return Vector3d.create(this.x - v.x, this.y - v.y, this.z - v.z);\n    }\n    subFrom(v) {\n        this.x -= v.x;\n        this.y -= v.y;\n        this.z -= v.z;\n    }\n    updateFromAngle(angle, length) {\n        this.x = Math.cos(angle) * length;\n        this.y = Math.sin(angle) * length;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}