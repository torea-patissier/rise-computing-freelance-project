{"ast":null,"code":"import _regeneratorRuntime from \"/Users/torea/Desktop/freelanceProject2/open-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/torea/Desktop/freelanceProject2/open-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/torea/Desktop/freelanceProject2/open-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/torea/Desktop/freelanceProject2/open-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { executeOnSingleOrMultiple, isInArray, itemFromSingleOrMultiple, loadFont } from \"tsparticles-engine\";\nexport var validTypes = [\"text\", \"character\", \"char\"];\nexport var TextDrawer = /*#__PURE__*/function () {\n  function TextDrawer() {\n    _classCallCheck(this, TextDrawer);\n  }\n\n  _createClass(TextDrawer, [{\n    key: \"draw\",\n    value: function draw(context, particle, radius, opacity) {\n      var _a, _b, _c;\n\n      var character = particle.shapeData;\n\n      if (character === undefined) {\n        return;\n      }\n\n      var textData = character.value;\n\n      if (textData === undefined) {\n        return;\n      }\n\n      var textParticle = particle;\n\n      if (textParticle.text === undefined) {\n        textParticle.text = itemFromSingleOrMultiple(textData, particle.randomIndexData);\n      }\n\n      var text = textParticle.text,\n          style = (_a = character.style) !== null && _a !== void 0 ? _a : \"\",\n          weight = (_b = character.weight) !== null && _b !== void 0 ? _b : \"400\",\n          size = Math.round(radius) * 2,\n          font = (_c = character.font) !== null && _c !== void 0 ? _c : \"Verdana\",\n          fill = particle.fill,\n          offsetX = text.length * radius / 2;\n      context.font = \"\".concat(style, \" \").concat(weight, \" \").concat(size, \"px \\\"\").concat(font, \"\\\"\");\n      var pos = {\n        x: -offsetX,\n        y: radius / 2\n      };\n      context.globalAlpha = opacity;\n\n      if (fill) {\n        context.fillText(text, pos.x, pos.y);\n      } else {\n        context.strokeText(text, pos.x, pos.y);\n      }\n\n      context.globalAlpha = 1;\n    }\n  }, {\n    key: \"getSidesCount\",\n    value: function getSidesCount() {\n      return 12;\n    }\n  }, {\n    key: \"init\",\n    value: function () {\n      var _init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(container) {\n        var options, shapeOptions, promises;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = container.actualOptions;\n\n                if (!validTypes.find(function (t) {\n                  return isInArray(t, options.particles.shape.type);\n                })) {\n                  _context.next = 6;\n                  break;\n                }\n\n                shapeOptions = validTypes.map(function (t) {\n                  return options.particles.shape.options[t];\n                }).find(function (t) {\n                  return !!t;\n                }), promises = [];\n                executeOnSingleOrMultiple(shapeOptions, function (shape) {\n                  promises.push(loadFont(shape.font, shape.weight));\n                });\n                _context.next = 6;\n                return Promise.all(promises);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function init(_x) {\n        return _init.apply(this, arguments);\n      }\n\n      return init;\n    }()\n  }]);\n\n  return TextDrawer;\n}();","map":{"version":3,"sources":["/Users/torea/Desktop/freelanceProject2/open-react-template/node_modules/tsparticles-shape-text/esm/TextDrawer.js"],"names":["executeOnSingleOrMultiple","isInArray","itemFromSingleOrMultiple","loadFont","validTypes","TextDrawer","context","particle","radius","opacity","_a","_b","_c","character","shapeData","undefined","textData","value","textParticle","text","randomIndexData","style","weight","size","Math","round","font","fill","offsetX","length","pos","x","y","globalAlpha","fillText","strokeText","container","options","actualOptions","find","t","particles","shape","type","shapeOptions","map","promises","push","Promise","all"],"mappings":"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","sourcesContent":["import { executeOnSingleOrMultiple, isInArray, itemFromSingleOrMultiple, loadFont } from \"tsparticles-engine\";\nexport const validTypes = [\"text\", \"character\", \"char\"];\nexport class TextDrawer {\n    draw(context, particle, radius, opacity) {\n        var _a, _b, _c;\n        const character = particle.shapeData;\n        if (character === undefined) {\n            return;\n        }\n        const textData = character.value;\n        if (textData === undefined) {\n            return;\n        }\n        const textParticle = particle;\n        if (textParticle.text === undefined) {\n            textParticle.text = itemFromSingleOrMultiple(textData, particle.randomIndexData);\n        }\n        const text = textParticle.text, style = (_a = character.style) !== null && _a !== void 0 ? _a : \"\", weight = (_b = character.weight) !== null && _b !== void 0 ? _b : \"400\", size = Math.round(radius) * 2, font = (_c = character.font) !== null && _c !== void 0 ? _c : \"Verdana\", fill = particle.fill, offsetX = (text.length * radius) / 2;\n        context.font = `${style} ${weight} ${size}px \"${font}\"`;\n        const pos = {\n            x: -offsetX,\n            y: radius / 2,\n        };\n        context.globalAlpha = opacity;\n        if (fill) {\n            context.fillText(text, pos.x, pos.y);\n        }\n        else {\n            context.strokeText(text, pos.x, pos.y);\n        }\n        context.globalAlpha = 1;\n    }\n    getSidesCount() {\n        return 12;\n    }\n    async init(container) {\n        const options = container.actualOptions;\n        if (validTypes.find((t) => isInArray(t, options.particles.shape.type))) {\n            const shapeOptions = validTypes\n                .map((t) => options.particles.shape.options[t])\n                .find((t) => !!t), promises = [];\n            executeOnSingleOrMultiple(shapeOptions, (shape) => {\n                promises.push(loadFont(shape.font, shape.weight));\n            });\n            await Promise.all(promises);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}