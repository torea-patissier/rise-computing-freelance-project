{"ast":null,"code":"import { getDistance, getRangeMax, getRangeValue } from \"tsparticles-engine\";\nimport { applyDistance, applyPath, getProximitySpeedFactor, spin } from \"./Utils\";\nexport class BaseMover {\n  init(particle) {\n    var _a;\n\n    const container = particle.container,\n          options = particle.options,\n          gravityOptions = options.move.gravity,\n          spinOptions = options.move.spin;\n    particle.gravity = {\n      enable: gravityOptions.enable,\n      acceleration: getRangeValue(gravityOptions.acceleration),\n      inverse: gravityOptions.inverse\n    };\n\n    if (spinOptions.enable) {\n      const spinPos = (_a = spinOptions.position) !== null && _a !== void 0 ? _a : {\n        x: 50,\n        y: 50\n      },\n            spinCenter = {\n        x: spinPos.x / 100 * container.canvas.size.width,\n        y: spinPos.y / 100 * container.canvas.size.height\n      },\n            pos = particle.getPosition(),\n            distance = getDistance(pos, spinCenter),\n            spinAcceleration = getRangeValue(spinOptions.acceleration);\n      particle.retina.spinAcceleration = spinAcceleration * container.retina.pixelRatio;\n      particle.spin = {\n        center: spinCenter,\n        direction: particle.velocity.x >= 0 ? \"clockwise\" : \"counter-clockwise\",\n        angle: particle.velocity.angle,\n        radius: distance,\n        acceleration: particle.retina.spinAcceleration\n      };\n    }\n  }\n\n  isEnabled(particle) {\n    return !particle.destroyed && particle.options.move.enable;\n  }\n\n  move(particle, delta) {\n    var _a, _b, _c;\n\n    var _d, _e;\n\n    const particleOptions = particle.options,\n          moveOptions = particleOptions.move;\n\n    if (!moveOptions.enable) {\n      return;\n    }\n\n    const container = particle.container,\n          slowFactor = getProximitySpeedFactor(particle),\n          baseSpeed = ((_a = (_d = particle.retina).moveSpeed) !== null && _a !== void 0 ? _a : _d.moveSpeed = getRangeValue(moveOptions.speed) * container.retina.pixelRatio) * container.retina.reduceFactor,\n          moveDrift = (_b = (_e = particle.retina).moveDrift) !== null && _b !== void 0 ? _b : _e.moveDrift = getRangeValue(particle.options.move.drift) * container.retina.pixelRatio,\n          maxSize = getRangeMax(particleOptions.size.value) * container.retina.pixelRatio,\n          sizeFactor = moveOptions.size ? particle.getRadius() / maxSize : 1,\n          speedFactor = sizeFactor * slowFactor * (delta.factor || 1),\n          diffFactor = 2,\n          moveSpeed = baseSpeed * speedFactor / diffFactor;\n\n    if (moveOptions.spin.enable) {\n      spin(particle, moveSpeed);\n    } else {\n      applyPath(particle, delta);\n      const gravityOptions = particle.gravity,\n            gravityFactor = (gravityOptions === null || gravityOptions === void 0 ? void 0 : gravityOptions.enable) && gravityOptions.inverse ? -1 : 1;\n\n      if ((gravityOptions === null || gravityOptions === void 0 ? void 0 : gravityOptions.enable) && moveSpeed) {\n        particle.velocity.y += gravityFactor * (gravityOptions.acceleration * delta.factor) / (60 * moveSpeed);\n      }\n\n      if (moveDrift && moveSpeed) {\n        particle.velocity.x += moveDrift * delta.factor / (60 * moveSpeed);\n      }\n\n      const decay = particle.moveDecay;\n\n      if (decay != 1) {\n        particle.velocity.multTo(decay);\n      }\n\n      const velocity = particle.velocity.mult(moveSpeed),\n            maxSpeed = (_c = particle.retina.maxSpeed) !== null && _c !== void 0 ? _c : container.retina.maxSpeed;\n\n      if ((gravityOptions === null || gravityOptions === void 0 ? void 0 : gravityOptions.enable) && maxSpeed > 0 && (!gravityOptions.inverse && velocity.y >= 0 && velocity.y >= maxSpeed || gravityOptions.inverse && velocity.y <= 0 && velocity.y <= -maxSpeed)) {\n        velocity.y = gravityFactor * maxSpeed;\n\n        if (moveSpeed) {\n          particle.velocity.y = velocity.y / moveSpeed;\n        }\n      }\n\n      const zIndexOptions = particle.options.zIndex,\n            zVelocityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.velocityRate;\n\n      if (zVelocityFactor != 1) {\n        velocity.multTo(zVelocityFactor);\n      }\n\n      particle.position.addTo(velocity);\n\n      if (moveOptions.vibrate) {\n        particle.position.x += Math.sin(particle.position.x * Math.cos(particle.position.y));\n        particle.position.y += Math.cos(particle.position.y * Math.sin(particle.position.x));\n      }\n    }\n\n    applyDistance(particle);\n  }\n\n}","map":{"version":3,"sources":["/Users/torea/Desktop/freelanceProject2/rise-consulting/node_modules/tsparticles-move-base/esm/BaseMover.js"],"names":["getDistance","getRangeMax","getRangeValue","applyDistance","applyPath","getProximitySpeedFactor","spin","BaseMover","init","particle","_a","container","options","gravityOptions","move","gravity","spinOptions","enable","acceleration","inverse","spinPos","position","x","y","spinCenter","canvas","size","width","height","pos","getPosition","distance","spinAcceleration","retina","pixelRatio","center","direction","velocity","angle","radius","isEnabled","destroyed","delta","_b","_c","_d","_e","particleOptions","moveOptions","slowFactor","baseSpeed","moveSpeed","speed","reduceFactor","moveDrift","drift","maxSize","value","sizeFactor","getRadius","speedFactor","factor","diffFactor","gravityFactor","decay","moveDecay","multTo","mult","maxSpeed","zIndexOptions","zIndex","zVelocityFactor","zIndexFactor","velocityRate","addTo","vibrate","Math","sin","cos"],"mappings":"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","sourcesContent":["import { getDistance, getRangeMax, getRangeValue } from \"tsparticles-engine\";\nimport { applyDistance, applyPath, getProximitySpeedFactor, spin } from \"./Utils\";\nexport class BaseMover {\n    init(particle) {\n        var _a;\n        const container = particle.container, options = particle.options, gravityOptions = options.move.gravity, spinOptions = options.move.spin;\n        particle.gravity = {\n            enable: gravityOptions.enable,\n            acceleration: getRangeValue(gravityOptions.acceleration),\n            inverse: gravityOptions.inverse,\n        };\n        if (spinOptions.enable) {\n            const spinPos = (_a = spinOptions.position) !== null && _a !== void 0 ? _a : { x: 50, y: 50 }, spinCenter = {\n                x: (spinPos.x / 100) * container.canvas.size.width,\n                y: (spinPos.y / 100) * container.canvas.size.height,\n            }, pos = particle.getPosition(), distance = getDistance(pos, spinCenter), spinAcceleration = getRangeValue(spinOptions.acceleration);\n            particle.retina.spinAcceleration = spinAcceleration * container.retina.pixelRatio;\n            particle.spin = {\n                center: spinCenter,\n                direction: particle.velocity.x >= 0 ? \"clockwise\" : \"counter-clockwise\",\n                angle: particle.velocity.angle,\n                radius: distance,\n                acceleration: particle.retina.spinAcceleration,\n            };\n        }\n    }\n    isEnabled(particle) {\n        return !particle.destroyed && particle.options.move.enable;\n    }\n    move(particle, delta) {\n        var _a, _b, _c;\n        var _d, _e;\n        const particleOptions = particle.options, moveOptions = particleOptions.move;\n        if (!moveOptions.enable) {\n            return;\n        }\n        const container = particle.container, slowFactor = getProximitySpeedFactor(particle), baseSpeed = ((_a = (_d = particle.retina).moveSpeed) !== null && _a !== void 0 ? _a : (_d.moveSpeed = getRangeValue(moveOptions.speed) * container.retina.pixelRatio)) *\n            container.retina.reduceFactor, moveDrift = ((_b = (_e = particle.retina).moveDrift) !== null && _b !== void 0 ? _b : (_e.moveDrift = getRangeValue(particle.options.move.drift) * container.retina.pixelRatio)), maxSize = getRangeMax(particleOptions.size.value) * container.retina.pixelRatio, sizeFactor = moveOptions.size ? particle.getRadius() / maxSize : 1, speedFactor = sizeFactor * slowFactor * (delta.factor || 1), diffFactor = 2, moveSpeed = (baseSpeed * speedFactor) / diffFactor;\n        if (moveOptions.spin.enable) {\n            spin(particle, moveSpeed);\n        }\n        else {\n            applyPath(particle, delta);\n            const gravityOptions = particle.gravity, gravityFactor = (gravityOptions === null || gravityOptions === void 0 ? void 0 : gravityOptions.enable) && gravityOptions.inverse ? -1 : 1;\n            if ((gravityOptions === null || gravityOptions === void 0 ? void 0 : gravityOptions.enable) && moveSpeed) {\n                particle.velocity.y +=\n                    (gravityFactor * (gravityOptions.acceleration * delta.factor)) / (60 * moveSpeed);\n            }\n            if (moveDrift && moveSpeed) {\n                particle.velocity.x += (moveDrift * delta.factor) / (60 * moveSpeed);\n            }\n            const decay = particle.moveDecay;\n            if (decay != 1) {\n                particle.velocity.multTo(decay);\n            }\n            const velocity = particle.velocity.mult(moveSpeed), maxSpeed = (_c = particle.retina.maxSpeed) !== null && _c !== void 0 ? _c : container.retina.maxSpeed;\n            if ((gravityOptions === null || gravityOptions === void 0 ? void 0 : gravityOptions.enable) &&\n                maxSpeed > 0 &&\n                ((!gravityOptions.inverse && velocity.y >= 0 && velocity.y >= maxSpeed) ||\n                    (gravityOptions.inverse && velocity.y <= 0 && velocity.y <= -maxSpeed))) {\n                velocity.y = gravityFactor * maxSpeed;\n                if (moveSpeed) {\n                    particle.velocity.y = velocity.y / moveSpeed;\n                }\n            }\n            const zIndexOptions = particle.options.zIndex, zVelocityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.velocityRate;\n            if (zVelocityFactor != 1) {\n                velocity.multTo(zVelocityFactor);\n            }\n            particle.position.addTo(velocity);\n            if (moveOptions.vibrate) {\n                particle.position.x += Math.sin(particle.position.x * Math.cos(particle.position.y));\n                particle.position.y += Math.cos(particle.position.y * Math.sin(particle.position.x));\n            }\n        }\n        applyDistance(particle);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}