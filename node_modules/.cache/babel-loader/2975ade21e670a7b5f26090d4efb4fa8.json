{"ast":null,"code":"import _regeneratorRuntime from \"/Users/torea/Desktop/freelanceProject2/open-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/torea/Desktop/freelanceProject2/open-react-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { getStyleFromHsl } from \"tsparticles-engine\";\nvar currentColorRegex = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\\((-?\\d+%?[,\\s]+){2,3}\\s*[\\d.]+%?\\))|currentcolor/gi;\n\nfunction replaceColorSvg(imageShape, color, opacity) {\n  var svgData = imageShape.svgData;\n\n  if (!svgData) {\n    return \"\";\n  }\n\n  var colorStyle = getStyleFromHsl(color, opacity);\n\n  if (svgData.includes(\"fill\")) {\n    return svgData.replace(currentColorRegex, function () {\n      return colorStyle;\n    });\n  }\n\n  var preFillIndex = svgData.indexOf(\">\");\n  return \"\".concat(svgData.substring(0, preFillIndex), \" fill=\\\"\").concat(colorStyle, \"\\\"\").concat(svgData.substring(preFillIndex));\n}\n\nexport function loadImage(_x) {\n  return _loadImage.apply(this, arguments);\n}\n\nfunction _loadImage() {\n  _loadImage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(image) {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            return _context2.abrupt(\"return\", new Promise(function (resolve) {\n              image.loading = true;\n              var img = new Image();\n              image.element = img;\n              img.addEventListener(\"load\", function () {\n                image.loading = false;\n                resolve();\n              });\n              img.addEventListener(\"error\", function () {\n                image.element = undefined;\n                image.error = true;\n                image.loading = false;\n                console.error(\"Error tsParticles - loading image: \".concat(image.source));\n                resolve();\n              });\n              img.src = image.source;\n            }));\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _loadImage.apply(this, arguments);\n}\n\nexport function downloadSvgImage(_x2) {\n  return _downloadSvgImage.apply(this, arguments);\n}\n\nfunction _downloadSvgImage() {\n  _downloadSvgImage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(image) {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (!(image.type !== \"svg\")) {\n              _context3.next = 4;\n              break;\n            }\n\n            _context3.next = 3;\n            return loadImage(image);\n\n          case 3:\n            return _context3.abrupt(\"return\");\n\n          case 4:\n            image.loading = true;\n            _context3.next = 7;\n            return fetch(image.source);\n\n          case 7:\n            response = _context3.sent;\n\n            if (!response.ok) {\n              console.error(\"Error tsParticles - Image not found\");\n              image.error = true;\n            }\n\n            if (image.error) {\n              _context3.next = 13;\n              break;\n            }\n\n            _context3.next = 12;\n            return response.text();\n\n          case 12:\n            image.svgData = _context3.sent;\n\n          case 13:\n            image.loading = false;\n\n          case 14:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _downloadSvgImage.apply(this, arguments);\n}\n\nexport function replaceImageColor(image, imageData, color, particle) {\n  var _a, _b, _c;\n\n  var svgColoredData = replaceColorSvg(image, color, (_b = (_a = particle.opacity) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : 1),\n      imageRes = {\n    color: color,\n    data: Object.assign(Object.assign({}, image), {\n      svgData: svgColoredData\n    }),\n    loaded: false,\n    ratio: imageData.width / imageData.height,\n    replaceColor: (_c = imageData.replaceColor) !== null && _c !== void 0 ? _c : imageData.replace_color,\n    source: imageData.src\n  };\n  return new Promise(function (resolve) {\n    var svg = new Blob([svgColoredData], {\n      type: \"image/svg+xml\"\n    }),\n        domUrl = URL || window.URL || window.webkitURL || window,\n        url = domUrl.createObjectURL(svg),\n        img = new Image();\n    img.addEventListener(\"load\", function () {\n      imageRes.loaded = true;\n      imageRes.element = img;\n      resolve(imageRes);\n      domUrl.revokeObjectURL(url);\n    });\n    img.addEventListener(\"error\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var img2;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              domUrl.revokeObjectURL(url);\n              img2 = Object.assign(Object.assign({}, image), {\n                error: false,\n                loading: true\n              });\n              _context.next = 4;\n              return loadImage(img2);\n\n            case 4:\n              imageRes.loaded = true;\n              imageRes.element = img2.element;\n              resolve(imageRes);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    })));\n    img.src = url;\n  });\n}","map":{"version":3,"sources":["/Users/torea/Desktop/freelanceProject2/open-react-template/node_modules/tsparticles-shape-image/esm/Utils.js"],"names":["getStyleFromHsl","currentColorRegex","replaceColorSvg","imageShape","color","opacity","svgData","colorStyle","includes","replace","preFillIndex","indexOf","substring","loadImage","image","Promise","resolve","loading","img","Image","element","addEventListener","undefined","error","console","source","src","downloadSvgImage","type","fetch","response","ok","text","replaceImageColor","imageData","particle","_a","_b","_c","svgColoredData","value","imageRes","data","Object","assign","loaded","ratio","width","height","replaceColor","replace_color","svg","Blob","domUrl","URL","window","webkitURL","url","createObjectURL","revokeObjectURL","img2"],"mappings":"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","sourcesContent":["import { getStyleFromHsl } from \"tsparticles-engine\";\nconst currentColorRegex = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\\((-?\\d+%?[,\\s]+){2,3}\\s*[\\d.]+%?\\))|currentcolor/gi;\nfunction replaceColorSvg(imageShape, color, opacity) {\n    const { svgData } = imageShape;\n    if (!svgData) {\n        return \"\";\n    }\n    const colorStyle = getStyleFromHsl(color, opacity);\n    if (svgData.includes(\"fill\")) {\n        return svgData.replace(currentColorRegex, () => colorStyle);\n    }\n    const preFillIndex = svgData.indexOf(\">\");\n    return `${svgData.substring(0, preFillIndex)} fill=\"${colorStyle}\"${svgData.substring(preFillIndex)}`;\n}\nexport async function loadImage(image) {\n    return new Promise((resolve) => {\n        image.loading = true;\n        const img = new Image();\n        image.element = img;\n        img.addEventListener(\"load\", () => {\n            image.loading = false;\n            resolve();\n        });\n        img.addEventListener(\"error\", () => {\n            image.element = undefined;\n            image.error = true;\n            image.loading = false;\n            console.error(`Error tsParticles - loading image: ${image.source}`);\n            resolve();\n        });\n        img.src = image.source;\n    });\n}\nexport async function downloadSvgImage(image) {\n    if (image.type !== \"svg\") {\n        await loadImage(image);\n        return;\n    }\n    image.loading = true;\n    const response = await fetch(image.source);\n    if (!response.ok) {\n        console.error(\"Error tsParticles - Image not found\");\n        image.error = true;\n    }\n    if (!image.error) {\n        image.svgData = await response.text();\n    }\n    image.loading = false;\n}\nexport function replaceImageColor(image, imageData, color, particle) {\n    var _a, _b, _c;\n    const svgColoredData = replaceColorSvg(image, color, (_b = (_a = particle.opacity) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : 1), imageRes = {\n        color,\n        data: Object.assign(Object.assign({}, image), { svgData: svgColoredData }),\n        loaded: false,\n        ratio: imageData.width / imageData.height,\n        replaceColor: (_c = imageData.replaceColor) !== null && _c !== void 0 ? _c : imageData.replace_color,\n        source: imageData.src,\n    };\n    return new Promise((resolve) => {\n        const svg = new Blob([svgColoredData], { type: \"image/svg+xml\" }), domUrl = URL || window.URL || window.webkitURL || window, url = domUrl.createObjectURL(svg), img = new Image();\n        img.addEventListener(\"load\", () => {\n            imageRes.loaded = true;\n            imageRes.element = img;\n            resolve(imageRes);\n            domUrl.revokeObjectURL(url);\n        });\n        img.addEventListener(\"error\", async () => {\n            domUrl.revokeObjectURL(url);\n            const img2 = Object.assign(Object.assign({}, image), { error: false, loading: true });\n            await loadImage(img2);\n            imageRes.loaded = true;\n            imageRes.element = img2.element;\n            resolve(imageRes);\n        });\n        img.src = url;\n    });\n}\n"]},"metadata":{},"sourceType":"module"}