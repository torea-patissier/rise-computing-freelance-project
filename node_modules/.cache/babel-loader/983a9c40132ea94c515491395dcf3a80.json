{"ast":null,"code":"export default function updateAutoHeight(speed) {\n  var swiper = this;\n  var activeSlides = [];\n  var isVirtual = swiper.virtual && swiper.params.virtual.enabled;\n  var newHeight = 0;\n  var i;\n\n  if (typeof speed === 'number') {\n    swiper.setTransition(speed);\n  } else if (speed === true) {\n    swiper.setTransition(swiper.params.speed);\n  }\n\n  var getSlideByIndex = function getSlideByIndex(index) {\n    if (isVirtual) {\n      return swiper.slides.filter(function (el) {\n        return parseInt(el.getAttribute('data-swiper-slide-index'), 10) === index;\n      })[0];\n    }\n\n    return swiper.slides[index];\n  }; // Find slides currently in view\n\n\n  if (swiper.params.slidesPerView !== 'auto' && swiper.params.slidesPerView > 1) {\n    if (swiper.params.centeredSlides) {\n      (swiper.visibleSlides || []).forEach(function (slide) {\n        activeSlides.push(slide);\n      });\n    } else {\n      for (i = 0; i < Math.ceil(swiper.params.slidesPerView); i += 1) {\n        var index = swiper.activeIndex + i;\n        if (index > swiper.slides.length && !isVirtual) break;\n        activeSlides.push(getSlideByIndex(index));\n      }\n    }\n  } else {\n    activeSlides.push(getSlideByIndex(swiper.activeIndex));\n  } // Find new height from highest slide in view\n\n\n  for (i = 0; i < activeSlides.length; i += 1) {\n    if (typeof activeSlides[i] !== 'undefined') {\n      var height = activeSlides[i].offsetHeight;\n      newHeight = height > newHeight ? height : newHeight;\n    }\n  } // Update Height\n\n\n  if (newHeight || newHeight === 0) swiper.wrapperEl.style.height = \"\".concat(newHeight, \"px\");\n}","map":{"version":3,"sources":["/Users/torea/Desktop/freelanceProject2/open-react-template/node_modules/swiper/core/update/updateAutoHeight.js"],"names":["updateAutoHeight","speed","swiper","activeSlides","isVirtual","virtual","params","enabled","newHeight","i","setTransition","getSlideByIndex","index","slides","filter","el","parseInt","getAttribute","slidesPerView","centeredSlides","visibleSlides","forEach","slide","push","Math","ceil","activeIndex","length","height","offsetHeight","wrapperEl","style"],"mappings":"AAAA,eAAe,SAASA,gBAAT,CAA0BC,KAA1B,EAAiC;AAC9C,MAAMC,MAAM,GAAG,IAAf;AACA,MAAMC,YAAY,GAAG,EAArB;AACA,MAAMC,SAAS,GAAGF,MAAM,CAACG,OAAP,IAAkBH,MAAM,CAACI,MAAP,CAAcD,OAAd,CAAsBE,OAA1D;AACA,MAAIC,SAAS,GAAG,CAAhB;AACA,MAAIC,CAAJ;;AACA,MAAI,OAAOR,KAAP,KAAiB,QAArB,EAA+B;AAC7BC,IAAAA,MAAM,CAACQ,aAAP,CAAqBT,KAArB;AACD,GAFD,MAEO,IAAIA,KAAK,KAAK,IAAd,EAAoB;AACzBC,IAAAA,MAAM,CAACQ,aAAP,CAAqBR,MAAM,CAACI,MAAP,CAAcL,KAAnC;AACD;;AACD,MAAMU,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK,EAAI;AAC/B,QAAIR,SAAJ,EAAe;AACb,aAAOF,MAAM,CAACW,MAAP,CAAcC,MAAd,CAAqB,UAAAC,EAAE;AAAA,eAAIC,QAAQ,CAACD,EAAE,CAACE,YAAH,CAAgB,yBAAhB,CAAD,EAA6C,EAA7C,CAAR,KAA6DL,KAAjE;AAAA,OAAvB,EAA+F,CAA/F,CAAP;AACD;;AACD,WAAOV,MAAM,CAACW,MAAP,CAAcD,KAAd,CAAP;AACD,GALD,CAX8C,CAiB9C;;;AACA,MAAIV,MAAM,CAACI,MAAP,CAAcY,aAAd,KAAgC,MAAhC,IAA0ChB,MAAM,CAACI,MAAP,CAAcY,aAAd,GAA8B,CAA5E,EAA+E;AAC7E,QAAIhB,MAAM,CAACI,MAAP,CAAca,cAAlB,EAAkC;AAChC,OAACjB,MAAM,CAACkB,aAAP,IAAwB,EAAzB,EAA6BC,OAA7B,CAAqC,UAAAC,KAAK,EAAI;AAC5CnB,QAAAA,YAAY,CAACoB,IAAb,CAAkBD,KAAlB;AACD,OAFD;AAGD,KAJD,MAIO;AACL,WAAKb,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGe,IAAI,CAACC,IAAL,CAAUvB,MAAM,CAACI,MAAP,CAAcY,aAAxB,CAAhB,EAAwDT,CAAC,IAAI,CAA7D,EAAgE;AAC9D,YAAMG,KAAK,GAAGV,MAAM,CAACwB,WAAP,GAAqBjB,CAAnC;AACA,YAAIG,KAAK,GAAGV,MAAM,CAACW,MAAP,CAAcc,MAAtB,IAAgC,CAACvB,SAArC,EAAgD;AAChDD,QAAAA,YAAY,CAACoB,IAAb,CAAkBZ,eAAe,CAACC,KAAD,CAAjC;AACD;AACF;AACF,GAZD,MAYO;AACLT,IAAAA,YAAY,CAACoB,IAAb,CAAkBZ,eAAe,CAACT,MAAM,CAACwB,WAAR,CAAjC;AACD,GAhC6C,CAkC9C;;;AACA,OAAKjB,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGN,YAAY,CAACwB,MAA7B,EAAqClB,CAAC,IAAI,CAA1C,EAA6C;AAC3C,QAAI,OAAON,YAAY,CAACM,CAAD,CAAnB,KAA2B,WAA/B,EAA4C;AAC1C,UAAMmB,MAAM,GAAGzB,YAAY,CAACM,CAAD,CAAZ,CAAgBoB,YAA/B;AACArB,MAAAA,SAAS,GAAGoB,MAAM,GAAGpB,SAAT,GAAqBoB,MAArB,GAA8BpB,SAA1C;AACD;AACF,GAxC6C,CA0C9C;;;AACA,MAAIA,SAAS,IAAIA,SAAS,KAAK,CAA/B,EAAkCN,MAAM,CAAC4B,SAAP,CAAiBC,KAAjB,CAAuBH,MAAvB,aAAmCpB,SAAnC;AACnC","sourcesContent":["export default function updateAutoHeight(speed) {\n  const swiper = this;\n  const activeSlides = [];\n  const isVirtual = swiper.virtual && swiper.params.virtual.enabled;\n  let newHeight = 0;\n  let i;\n  if (typeof speed === 'number') {\n    swiper.setTransition(speed);\n  } else if (speed === true) {\n    swiper.setTransition(swiper.params.speed);\n  }\n  const getSlideByIndex = index => {\n    if (isVirtual) {\n      return swiper.slides.filter(el => parseInt(el.getAttribute('data-swiper-slide-index'), 10) === index)[0];\n    }\n    return swiper.slides[index];\n  };\n  // Find slides currently in view\n  if (swiper.params.slidesPerView !== 'auto' && swiper.params.slidesPerView > 1) {\n    if (swiper.params.centeredSlides) {\n      (swiper.visibleSlides || []).forEach(slide => {\n        activeSlides.push(slide);\n      });\n    } else {\n      for (i = 0; i < Math.ceil(swiper.params.slidesPerView); i += 1) {\n        const index = swiper.activeIndex + i;\n        if (index > swiper.slides.length && !isVirtual) break;\n        activeSlides.push(getSlideByIndex(index));\n      }\n    }\n  } else {\n    activeSlides.push(getSlideByIndex(swiper.activeIndex));\n  }\n\n  // Find new height from highest slide in view\n  for (i = 0; i < activeSlides.length; i += 1) {\n    if (typeof activeSlides[i] !== 'undefined') {\n      const height = activeSlides[i].offsetHeight;\n      newHeight = height > newHeight ? height : newHeight;\n    }\n  }\n\n  // Update Height\n  if (newHeight || newHeight === 0) swiper.wrapperEl.style.height = `${newHeight}px`;\n}"]},"metadata":{},"sourceType":"module"}