{"ast":null,"code":"function initDelta(value, fpsLimit = 60, smooth = false) {\n  return {\n    value,\n    factor: smooth ? 60 / fpsLimit : 60 * value / 1000\n  };\n}\n\nexport class FrameManager {\n  constructor(container) {\n    this.container = container;\n  }\n\n  async nextFrame(timestamp) {\n    var _a;\n\n    try {\n      const container = this.container;\n\n      if (!container.smooth && container.lastFrameTime !== undefined && timestamp < container.lastFrameTime + 1000 / container.fpsLimit) {\n        container.draw(false);\n        return;\n      }\n\n      (_a = container.lastFrameTime) !== null && _a !== void 0 ? _a : container.lastFrameTime = timestamp;\n      const delta = initDelta(timestamp - container.lastFrameTime, container.fpsLimit, container.smooth);\n      container.lifeTime += delta.value;\n      container.lastFrameTime = timestamp;\n\n      if (delta.value > 1000) {\n        container.draw(false);\n        return;\n      }\n\n      await container.particles.draw(delta);\n\n      if (container.duration > 0 && container.lifeTime > container.duration) {\n        container.destroy();\n        return;\n      }\n\n      if (container.getAnimationStatus()) {\n        container.draw(false);\n      }\n    } catch (e) {\n      console.error(\"tsParticles error in animation loop\", e);\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/torea/Desktop/freelanceProject2/open-react-template/node_modules/tsparticles-engine/esm/Core/Utils/FrameManager.js"],"names":["initDelta","value","fpsLimit","smooth","factor","FrameManager","constructor","container","nextFrame","timestamp","_a","lastFrameTime","undefined","draw","delta","lifeTime","particles","duration","destroy","getAnimationStatus","e","console","error"],"mappings":"AAAA,SAASA,SAAT,CAAmBC,KAAnB,EAA0BC,QAAQ,GAAG,EAArC,EAAyCC,MAAM,GAAG,KAAlD,EAAyD;AACrD,SAAO;AACHF,IAAAA,KADG;AAEHG,IAAAA,MAAM,EAAED,MAAM,GAAG,KAAKD,QAAR,GAAoB,KAAKD,KAAN,GAAe;AAF7C,GAAP;AAIH;;AACD,OAAO,MAAMI,YAAN,CAAmB;AACtBC,EAAAA,WAAW,CAACC,SAAD,EAAY;AACnB,SAAKA,SAAL,GAAiBA,SAAjB;AACH;;AACD,QAAMC,SAAN,CAAgBC,SAAhB,EAA2B;AACvB,QAAIC,EAAJ;;AACA,QAAI;AACA,YAAMH,SAAS,GAAG,KAAKA,SAAvB;;AACA,UAAI,CAACA,SAAS,CAACJ,MAAX,IACAI,SAAS,CAACI,aAAV,KAA4BC,SAD5B,IAEAH,SAAS,GAAGF,SAAS,CAACI,aAAV,GAA0B,OAAOJ,SAAS,CAACL,QAF3D,EAEqE;AACjEK,QAAAA,SAAS,CAACM,IAAV,CAAe,KAAf;AACA;AACH;;AACD,OAACH,EAAE,GAAGH,SAAS,CAACI,aAAhB,MAAmC,IAAnC,IAA2CD,EAAE,KAAK,KAAK,CAAvD,GAA2DA,EAA3D,GAAiEH,SAAS,CAACI,aAAV,GAA0BF,SAA3F;AACA,YAAMK,KAAK,GAAGd,SAAS,CAACS,SAAS,GAAGF,SAAS,CAACI,aAAvB,EAAsCJ,SAAS,CAACL,QAAhD,EAA0DK,SAAS,CAACJ,MAApE,CAAvB;AACAI,MAAAA,SAAS,CAACQ,QAAV,IAAsBD,KAAK,CAACb,KAA5B;AACAM,MAAAA,SAAS,CAACI,aAAV,GAA0BF,SAA1B;;AACA,UAAIK,KAAK,CAACb,KAAN,GAAc,IAAlB,EAAwB;AACpBM,QAAAA,SAAS,CAACM,IAAV,CAAe,KAAf;AACA;AACH;;AACD,YAAMN,SAAS,CAACS,SAAV,CAAoBH,IAApB,CAAyBC,KAAzB,CAAN;;AACA,UAAIP,SAAS,CAACU,QAAV,GAAqB,CAArB,IAA0BV,SAAS,CAACQ,QAAV,GAAqBR,SAAS,CAACU,QAA7D,EAAuE;AACnEV,QAAAA,SAAS,CAACW,OAAV;AACA;AACH;;AACD,UAAIX,SAAS,CAACY,kBAAV,EAAJ,EAAoC;AAChCZ,QAAAA,SAAS,CAACM,IAAV,CAAe,KAAf;AACH;AACJ,KAxBD,CAyBA,OAAOO,CAAP,EAAU;AACNC,MAAAA,OAAO,CAACC,KAAR,CAAc,qCAAd,EAAqDF,CAArD;AACH;AACJ;;AAlCqB","sourcesContent":["function initDelta(value, fpsLimit = 60, smooth = false) {\n    return {\n        value,\n        factor: smooth ? 60 / fpsLimit : (60 * value) / 1000,\n    };\n}\nexport class FrameManager {\n    constructor(container) {\n        this.container = container;\n    }\n    async nextFrame(timestamp) {\n        var _a;\n        try {\n            const container = this.container;\n            if (!container.smooth &&\n                container.lastFrameTime !== undefined &&\n                timestamp < container.lastFrameTime + 1000 / container.fpsLimit) {\n                container.draw(false);\n                return;\n            }\n            (_a = container.lastFrameTime) !== null && _a !== void 0 ? _a : (container.lastFrameTime = timestamp);\n            const delta = initDelta(timestamp - container.lastFrameTime, container.fpsLimit, container.smooth);\n            container.lifeTime += delta.value;\n            container.lastFrameTime = timestamp;\n            if (delta.value > 1000) {\n                container.draw(false);\n                return;\n            }\n            await container.particles.draw(delta);\n            if (container.duration > 0 && container.lifeTime > container.duration) {\n                container.destroy();\n                return;\n            }\n            if (container.getAnimationStatus()) {\n                container.draw(false);\n            }\n        }\n        catch (e) {\n            console.error(\"tsParticles error in animation loop\", e);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}