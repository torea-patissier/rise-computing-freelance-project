{"ast":null,"code":"import { Circle, ExternalInteractorBase, Rectangle, Vector, calculateBounds, circleBounce, circleBounceDataFromParticle, divModeExecute, isDivModeEnabled, isInArray, mouseMoveEvent, rectBounce } from \"tsparticles-engine\";\nimport { Bounce } from \"./Options/Classes/Bounce\";\nexport class Bouncer extends ExternalInteractorBase {\n  constructor(container) {\n    super(container);\n  }\n\n  clear() {}\n\n  init() {\n    const container = this.container,\n          bounce = container.actualOptions.interactivity.modes.bounce;\n\n    if (!bounce) {\n      return;\n    }\n\n    container.retina.bounceModeDistance = bounce.distance * container.retina.pixelRatio;\n  }\n\n  async interact() {\n    const container = this.container,\n          options = container.actualOptions,\n          events = options.interactivity.events,\n          mouseMoveStatus = container.interactivity.status === mouseMoveEvent,\n          hoverEnabled = events.onHover.enable,\n          hoverMode = events.onHover.mode,\n          divs = events.onDiv;\n\n    if (mouseMoveStatus && hoverEnabled && isInArray(\"bounce\", hoverMode)) {\n      this.processMouseBounce();\n    } else {\n      divModeExecute(\"bounce\", divs, (selector, div) => this.singleSelectorBounce(selector, div));\n    }\n  }\n\n  isEnabled(particle) {\n    var _a;\n\n    const container = this.container,\n          options = container.actualOptions,\n          mouse = container.interactivity.mouse,\n          events = ((_a = particle === null || particle === void 0 ? void 0 : particle.interactivity) !== null && _a !== void 0 ? _a : options.interactivity).events,\n          divs = events.onDiv;\n    return mouse.position && events.onHover.enable && isInArray(\"bounce\", events.onHover.mode) || isDivModeEnabled(\"bounce\", divs);\n  }\n\n  loadModeOptions(options, ...sources) {\n    if (!options.bounce) {\n      options.bounce = new Bounce();\n    }\n\n    for (const source of sources) {\n      options.bounce.load(source === null || source === void 0 ? void 0 : source.bounce);\n    }\n  }\n\n  reset() {}\n\n  processBounce(position, radius, area) {\n    const query = this.container.particles.quadTree.query(area, p => this.isEnabled(p));\n\n    for (const particle of query) {\n      if (area instanceof Circle) {\n        circleBounce(circleBounceDataFromParticle(particle), {\n          position,\n          radius,\n          mass: radius ** 2 * Math.PI / 2,\n          velocity: Vector.origin,\n          factor: Vector.origin\n        });\n      } else if (area instanceof Rectangle) {\n        rectBounce(particle, calculateBounds(position, radius));\n      }\n    }\n  }\n\n  processMouseBounce() {\n    const container = this.container,\n          pxRatio = container.retina.pixelRatio,\n          tolerance = 10 * pxRatio,\n          mousePos = container.interactivity.mouse.position,\n          radius = container.retina.bounceModeDistance;\n\n    if (!radius || radius < 0 || !mousePos) {\n      return;\n    }\n\n    this.processBounce(mousePos, radius, new Circle(mousePos.x, mousePos.y, radius + tolerance));\n  }\n\n  singleSelectorBounce(selector, div) {\n    const container = this.container,\n          query = document.querySelectorAll(selector);\n\n    if (!query.length) {\n      return;\n    }\n\n    query.forEach(item => {\n      const elem = item,\n            pxRatio = container.retina.pixelRatio,\n            pos = {\n        x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n        y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio\n      },\n            radius = elem.offsetWidth / 2 * pxRatio,\n            tolerance = 10 * pxRatio,\n            area = div.type === \"circle\" ? new Circle(pos.x, pos.y, radius + tolerance) : new Rectangle(elem.offsetLeft * pxRatio - tolerance, elem.offsetTop * pxRatio - tolerance, elem.offsetWidth * pxRatio + tolerance * 2, elem.offsetHeight * pxRatio + tolerance * 2);\n      this.processBounce(pos, radius, area);\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/torea/Desktop/freelanceProject2/open-react-template/node_modules/tsparticles-interaction-external-bounce/esm/Bouncer.js"],"names":["Circle","ExternalInteractorBase","Rectangle","Vector","calculateBounds","circleBounce","circleBounceDataFromParticle","divModeExecute","isDivModeEnabled","isInArray","mouseMoveEvent","rectBounce","Bounce","Bouncer","constructor","container","clear","init","bounce","actualOptions","interactivity","modes","retina","bounceModeDistance","distance","pixelRatio","interact","options","events","mouseMoveStatus","status","hoverEnabled","onHover","enable","hoverMode","mode","divs","onDiv","processMouseBounce","selector","div","singleSelectorBounce","isEnabled","particle","_a","mouse","position","loadModeOptions","sources","source","load","reset","processBounce","radius","area","query","particles","quadTree","p","mass","Math","PI","velocity","origin","factor","pxRatio","tolerance","mousePos","x","y","document","querySelectorAll","length","forEach","item","elem","pos","offsetLeft","offsetWidth","offsetTop","offsetHeight","type"],"mappings":"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","sourcesContent":["import { Circle, ExternalInteractorBase, Rectangle, Vector, calculateBounds, circleBounce, circleBounceDataFromParticle, divModeExecute, isDivModeEnabled, isInArray, mouseMoveEvent, rectBounce, } from \"tsparticles-engine\";\nimport { Bounce } from \"./Options/Classes/Bounce\";\nexport class Bouncer extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    clear() {\n    }\n    init() {\n        const container = this.container, bounce = container.actualOptions.interactivity.modes.bounce;\n        if (!bounce) {\n            return;\n        }\n        container.retina.bounceModeDistance = bounce.distance * container.retina.pixelRatio;\n    }\n    async interact() {\n        const container = this.container, options = container.actualOptions, events = options.interactivity.events, mouseMoveStatus = container.interactivity.status === mouseMoveEvent, hoverEnabled = events.onHover.enable, hoverMode = events.onHover.mode, divs = events.onDiv;\n        if (mouseMoveStatus && hoverEnabled && isInArray(\"bounce\", hoverMode)) {\n            this.processMouseBounce();\n        }\n        else {\n            divModeExecute(\"bounce\", divs, (selector, div) => this.singleSelectorBounce(selector, div));\n        }\n    }\n    isEnabled(particle) {\n        var _a;\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = ((_a = particle === null || particle === void 0 ? void 0 : particle.interactivity) !== null && _a !== void 0 ? _a : options.interactivity).events, divs = events.onDiv;\n        return ((mouse.position && events.onHover.enable && isInArray(\"bounce\", events.onHover.mode)) ||\n            isDivModeEnabled(\"bounce\", divs));\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.bounce) {\n            options.bounce = new Bounce();\n        }\n        for (const source of sources) {\n            options.bounce.load(source === null || source === void 0 ? void 0 : source.bounce);\n        }\n    }\n    reset() {\n    }\n    processBounce(position, radius, area) {\n        const query = this.container.particles.quadTree.query(area, (p) => this.isEnabled(p));\n        for (const particle of query) {\n            if (area instanceof Circle) {\n                circleBounce(circleBounceDataFromParticle(particle), {\n                    position,\n                    radius,\n                    mass: (radius ** 2 * Math.PI) / 2,\n                    velocity: Vector.origin,\n                    factor: Vector.origin,\n                });\n            }\n            else if (area instanceof Rectangle) {\n                rectBounce(particle, calculateBounds(position, radius));\n            }\n        }\n    }\n    processMouseBounce() {\n        const container = this.container, pxRatio = container.retina.pixelRatio, tolerance = 10 * pxRatio, mousePos = container.interactivity.mouse.position, radius = container.retina.bounceModeDistance;\n        if (!radius || radius < 0 || !mousePos) {\n            return;\n        }\n        this.processBounce(mousePos, radius, new Circle(mousePos.x, mousePos.y, radius + tolerance));\n    }\n    singleSelectorBounce(selector, div) {\n        const container = this.container, query = document.querySelectorAll(selector);\n        if (!query.length) {\n            return;\n        }\n        query.forEach((item) => {\n            const elem = item, pxRatio = container.retina.pixelRatio, pos = {\n                x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n                y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio,\n            }, radius = (elem.offsetWidth / 2) * pxRatio, tolerance = 10 * pxRatio, area = div.type === \"circle\"\n                ? new Circle(pos.x, pos.y, radius + tolerance)\n                : new Rectangle(elem.offsetLeft * pxRatio - tolerance, elem.offsetTop * pxRatio - tolerance, elem.offsetWidth * pxRatio + tolerance * 2, elem.offsetHeight * pxRatio + tolerance * 2);\n            this.processBounce(pos, radius, area);\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}