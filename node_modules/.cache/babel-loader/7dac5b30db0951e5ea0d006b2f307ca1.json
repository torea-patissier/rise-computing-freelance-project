{"ast":null,"code":"import { clear, drawParticle, drawParticlePlugin, drawPlugin, paintBase, paintImage } from \"../Utils/CanvasUtils\";\nimport { deepExtend, isSsr } from \"../Utils/Utils\";\nimport { getStyleFromHsl, getStyleFromRgb, rangeColorToHsl, rangeColorToRgb } from \"../Utils/ColorUtils\";\nimport { generatedAttribute } from \"./Utils/Constants\";\n\nfunction setTransformValue(factor, newFactor, key) {\n  var _a;\n\n  const newValue = newFactor[key];\n\n  if (newValue !== undefined) {\n    factor[key] = ((_a = factor[key]) !== null && _a !== void 0 ? _a : 1) * newValue;\n  }\n}\n\nexport class Canvas {\n  constructor(container) {\n    this.container = container;\n    this.size = {\n      height: 0,\n      width: 0\n    };\n    this._context = null;\n    this._generated = false;\n    this._preDrawUpdaters = [];\n    this._postDrawUpdaters = [];\n    this._resizePlugins = [];\n    this._colorPlugins = [];\n    this._mutationObserver = !isSsr() && typeof MutationObserver !== \"undefined\" ? new MutationObserver(records => {\n      for (const record of records) {\n        if (record.type === \"attributes\" && record.attributeName === \"style\") {\n          this._repairStyle();\n        }\n      }\n    }) : undefined;\n  }\n\n  get _fullScreen() {\n    return this.container.actualOptions.fullScreen.enable;\n  }\n\n  clear() {\n    const options = this.container.actualOptions,\n          trail = options.particles.move.trail,\n          trailFill = this._trailFill;\n\n    if (options.backgroundMask.enable) {\n      this.paint();\n    } else if (trail.enable && trail.length > 0 && trailFill) {\n      if (trailFill.color) {\n        this._paintBase(getStyleFromRgb(trailFill.color, trailFill.opacity));\n      } else if (trailFill.image) {\n        this._paintImage(trailFill.image, trailFill.opacity);\n      }\n    } else {\n      this.draw(ctx => {\n        clear(ctx, this.size);\n      });\n    }\n  }\n\n  destroy() {\n    var _a, _b;\n\n    (_a = this._mutationObserver) === null || _a === void 0 ? void 0 : _a.disconnect();\n\n    if (this._generated) {\n      (_b = this.element) === null || _b === void 0 ? void 0 : _b.remove();\n    } else {\n      this._resetOriginalStyle();\n    }\n\n    this.stop();\n    this._preDrawUpdaters = [];\n    this._postDrawUpdaters = [];\n    this._resizePlugins = [];\n    this._colorPlugins = [];\n  }\n\n  draw(cb) {\n    if (!this._context) {\n      return;\n    }\n\n    return cb(this._context);\n  }\n\n  drawParticle(particle, delta) {\n    var _a;\n\n    if (particle.spawning || particle.destroyed) {\n      return;\n    }\n\n    const radius = particle.getRadius();\n\n    if (radius <= 0) {\n      return;\n    }\n\n    const pfColor = particle.getFillColor(),\n          psColor = (_a = particle.getStrokeColor()) !== null && _a !== void 0 ? _a : pfColor;\n\n    let [fColor, sColor] = this._getPluginParticleColors(particle);\n\n    if (!fColor) {\n      fColor = pfColor;\n    }\n\n    if (!sColor) {\n      sColor = psColor;\n    }\n\n    if (!fColor && !sColor) {\n      return;\n    }\n\n    this.draw(ctx => {\n      var _a, _b, _c, _d;\n\n      const options = this.container.actualOptions,\n            zIndexOptions = particle.options.zIndex,\n            zOpacityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.opacityRate,\n            opacity = (_c = (_a = particle.bubble.opacity) !== null && _a !== void 0 ? _a : (_b = particle.opacity) === null || _b === void 0 ? void 0 : _b.value) !== null && _c !== void 0 ? _c : 1,\n            strokeOpacity = (_d = particle.strokeOpacity) !== null && _d !== void 0 ? _d : opacity,\n            zOpacity = opacity * zOpacityFactor,\n            zStrokeOpacity = strokeOpacity * zOpacityFactor,\n            transform = {},\n            colorStyles = {\n        fill: fColor ? getStyleFromHsl(fColor, zOpacity) : undefined\n      };\n      colorStyles.stroke = sColor ? getStyleFromHsl(sColor, zStrokeOpacity) : colorStyles.fill;\n\n      this._applyPreDrawUpdaters(ctx, particle, radius, zOpacity, colorStyles, transform);\n\n      drawParticle({\n        container: this.container,\n        context: ctx,\n        particle,\n        delta,\n        colorStyles,\n        backgroundMask: options.backgroundMask.enable,\n        composite: options.backgroundMask.composite,\n        radius: radius * (1 - particle.zIndexFactor) ** zIndexOptions.sizeRate,\n        opacity: zOpacity,\n        shadow: particle.options.shadow,\n        transform\n      });\n\n      this._applyPostDrawUpdaters(particle);\n    });\n  }\n\n  drawParticlePlugin(plugin, particle, delta) {\n    this.draw(ctx => {\n      drawParticlePlugin(ctx, plugin, particle, delta);\n    });\n  }\n\n  drawPlugin(plugin, delta) {\n    this.draw(ctx => {\n      drawPlugin(ctx, plugin, delta);\n    });\n  }\n\n  async init() {\n    var _a;\n\n    this.resize();\n\n    this._initStyle();\n\n    this._initCover();\n\n    try {\n      await this._initTrail();\n    } catch (e) {\n      console.error(e);\n    }\n\n    this.initBackground();\n\n    if (this.element) {\n      (_a = this._mutationObserver) === null || _a === void 0 ? void 0 : _a.observe(this.element, {\n        attributes: true\n      });\n    }\n\n    this.initUpdaters();\n    this.initPlugins();\n    this.paint();\n  }\n\n  initBackground() {\n    const options = this.container.actualOptions,\n          background = options.background,\n          element = this.element,\n          elementStyle = element === null || element === void 0 ? void 0 : element.style;\n\n    if (!elementStyle) {\n      return;\n    }\n\n    if (background.color) {\n      const color = rangeColorToRgb(background.color);\n      elementStyle.backgroundColor = color ? getStyleFromRgb(color, background.opacity) : \"\";\n    } else {\n      elementStyle.backgroundColor = \"\";\n    }\n\n    elementStyle.backgroundImage = background.image || \"\";\n    elementStyle.backgroundPosition = background.position || \"\";\n    elementStyle.backgroundRepeat = background.repeat || \"\";\n    elementStyle.backgroundSize = background.size || \"\";\n  }\n\n  initPlugins() {\n    this._resizePlugins = [];\n\n    for (const [, plugin] of this.container.plugins) {\n      if (plugin.resize) {\n        this._resizePlugins.push(plugin);\n      }\n\n      if (plugin.particleFillColor || plugin.particleStrokeColor) {\n        this._colorPlugins.push(plugin);\n      }\n    }\n  }\n\n  initUpdaters() {\n    this._preDrawUpdaters = [];\n    this._postDrawUpdaters = [];\n\n    for (const updater of this.container.particles.updaters) {\n      if (updater.afterDraw) {\n        this._postDrawUpdaters.push(updater);\n      }\n\n      if (updater.getColorStyles || updater.getTransformValues || updater.beforeDraw) {\n        this._preDrawUpdaters.push(updater);\n      }\n    }\n  }\n\n  loadCanvas(canvas) {\n    var _a, _b;\n\n    if (this._generated) {\n      (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n    }\n\n    this._generated = canvas.dataset && generatedAttribute in canvas.dataset ? canvas.dataset[generatedAttribute] === \"true\" : this._generated;\n    this.element = canvas;\n    this.element.ariaHidden = \"true\";\n    this._originalStyle = deepExtend({}, this.element.style);\n    this.size.height = canvas.offsetHeight;\n    this.size.width = canvas.offsetWidth;\n    this._context = this.element.getContext(\"2d\");\n    (_b = this._mutationObserver) === null || _b === void 0 ? void 0 : _b.observe(this.element, {\n      attributes: true\n    });\n    this.container.retina.init();\n    this.initBackground();\n  }\n\n  paint() {\n    const options = this.container.actualOptions;\n    this.draw(ctx => {\n      if (options.backgroundMask.enable && options.backgroundMask.cover) {\n        clear(ctx, this.size);\n\n        this._paintBase(this._coverColorStyle);\n      } else {\n        this._paintBase();\n      }\n    });\n  }\n\n  resize() {\n    if (!this.element) {\n      return;\n    }\n\n    const container = this.container,\n          pxRatio = container.retina.pixelRatio,\n          size = container.canvas.size,\n          newSize = {\n      width: this.element.offsetWidth * pxRatio,\n      height: this.element.offsetHeight * pxRatio\n    };\n\n    if (newSize.height === size.height && newSize.width === size.width && newSize.height === this.element.height && newSize.width === this.element.width) {\n      return;\n    }\n\n    const oldSize = Object.assign({}, size);\n    this.element.width = size.width = this.element.offsetWidth * pxRatio;\n    this.element.height = size.height = this.element.offsetHeight * pxRatio;\n\n    if (this.container.started) {\n      this.resizeFactor = {\n        width: size.width / oldSize.width,\n        height: size.height / oldSize.height\n      };\n    }\n  }\n\n  stop() {\n    this.draw(ctx => {\n      clear(ctx, this.size);\n    });\n  }\n\n  async windowResize() {\n    if (!this.element) {\n      return;\n    }\n\n    this.resize();\n    const container = this.container,\n          needsRefresh = container.updateActualOptions();\n    container.particles.setDensity();\n\n    this._applyResizePlugins();\n\n    if (needsRefresh) {\n      await container.refresh();\n    }\n  }\n\n  _applyPostDrawUpdaters(particle) {\n    var _a;\n\n    for (const updater of this._postDrawUpdaters) {\n      (_a = updater.afterDraw) === null || _a === void 0 ? void 0 : _a.call(updater, particle);\n    }\n  }\n\n  _applyPreDrawUpdaters(ctx, particle, radius, zOpacity, colorStyles, transform) {\n    var _a;\n\n    for (const updater of this._preDrawUpdaters) {\n      if (updater.getColorStyles) {\n        const {\n          fill,\n          stroke\n        } = updater.getColorStyles(particle, ctx, radius, zOpacity);\n\n        if (fill) {\n          colorStyles.fill = fill;\n        }\n\n        if (stroke) {\n          colorStyles.stroke = stroke;\n        }\n      }\n\n      if (updater.getTransformValues) {\n        const updaterTransform = updater.getTransformValues(particle);\n\n        for (const key in updaterTransform) {\n          setTransformValue(transform, updaterTransform, key);\n        }\n      }\n\n      (_a = updater.beforeDraw) === null || _a === void 0 ? void 0 : _a.call(updater, particle);\n    }\n  }\n\n  _applyResizePlugins() {\n    for (const plugin of this._resizePlugins) {\n      if (plugin.resize) {\n        plugin.resize();\n      }\n    }\n  }\n\n  _getPluginParticleColors(particle) {\n    let fColor, sColor;\n\n    for (const plugin of this._colorPlugins) {\n      if (!fColor && plugin.particleFillColor) {\n        fColor = rangeColorToHsl(plugin.particleFillColor(particle));\n      }\n\n      if (!sColor && plugin.particleStrokeColor) {\n        sColor = rangeColorToHsl(plugin.particleStrokeColor(particle));\n      }\n\n      if (fColor && sColor) {\n        break;\n      }\n    }\n\n    return [fColor, sColor];\n  }\n\n  _initCover() {\n    const options = this.container.actualOptions,\n          cover = options.backgroundMask.cover,\n          color = cover.color,\n          coverRgb = rangeColorToRgb(color);\n\n    if (coverRgb) {\n      const coverColor = {\n        r: coverRgb.r,\n        g: coverRgb.g,\n        b: coverRgb.b,\n        a: cover.opacity\n      };\n      this._coverColorStyle = getStyleFromRgb(coverColor, coverColor.a);\n    }\n  }\n\n  _initStyle() {\n    const element = this.element,\n          options = this.container.actualOptions;\n\n    if (!element) {\n      return;\n    }\n\n    if (this._fullScreen) {\n      this._originalStyle = deepExtend({}, element.style);\n\n      this._setFullScreenStyle();\n    } else {\n      this._resetOriginalStyle();\n    }\n\n    for (const key in options.style) {\n      if (!key || !options.style) {\n        continue;\n      }\n\n      const value = options.style[key];\n\n      if (!value) {\n        continue;\n      }\n\n      element.style.setProperty(key, value, \"important\");\n    }\n  }\n\n  async _initTrail() {\n    const options = this.container.actualOptions,\n          trail = options.particles.move.trail,\n          trailFill = trail.fill;\n\n    if (!trail.enable) {\n      return;\n    }\n\n    if (trailFill.color) {\n      const fillColor = rangeColorToRgb(trailFill.color);\n\n      if (!fillColor) {\n        return;\n      }\n\n      const trail = options.particles.move.trail;\n      this._trailFill = {\n        color: Object.assign({}, fillColor),\n        opacity: 1 / trail.length\n      };\n    } else {\n      await new Promise((resolve, reject) => {\n        if (!trailFill.image) {\n          return;\n        }\n\n        const img = document.createElement(\"img\");\n        img.addEventListener(\"load\", () => {\n          this._trailFill = {\n            image: img,\n            opacity: 1 / trail.length\n          };\n          resolve();\n        });\n        img.addEventListener(\"error\", evt => {\n          reject(evt.error);\n        });\n        img.src = trailFill.image;\n      });\n    }\n  }\n\n  _paintBase(baseColor) {\n    this.draw(ctx => {\n      paintBase(ctx, this.size, baseColor);\n    });\n  }\n\n  _paintImage(image, opacity) {\n    this.draw(ctx => {\n      paintImage(ctx, this.size, image, opacity);\n    });\n  }\n\n  _repairStyle() {\n    var _a, _b;\n\n    const element = this.element;\n\n    if (!element) {\n      return;\n    }\n\n    (_a = this._mutationObserver) === null || _a === void 0 ? void 0 : _a.disconnect();\n\n    this._initStyle();\n\n    this.initBackground();\n    (_b = this._mutationObserver) === null || _b === void 0 ? void 0 : _b.observe(element, {\n      attributes: true\n    });\n  }\n\n  _resetOriginalStyle() {\n    const element = this.element,\n          originalStyle = this._originalStyle;\n\n    if (!(element && originalStyle)) {\n      return;\n    }\n\n    element.style.position = originalStyle.position;\n    element.style.zIndex = originalStyle.zIndex;\n    element.style.top = originalStyle.top;\n    element.style.left = originalStyle.left;\n    element.style.width = originalStyle.width;\n    element.style.height = originalStyle.height;\n  }\n\n  _setFullScreenStyle() {\n    const element = this.element;\n\n    if (!element) {\n      return;\n    }\n\n    const priority = \"important\";\n    element.style.setProperty(\"position\", \"fixed\", priority);\n    element.style.setProperty(\"z-index\", this.container.actualOptions.fullScreen.zIndex.toString(10), priority);\n    element.style.setProperty(\"top\", \"0\", priority);\n    element.style.setProperty(\"left\", \"0\", priority);\n    element.style.setProperty(\"width\", \"100%\", priority);\n    element.style.setProperty(\"height\", \"100%\", priority);\n  }\n\n}","map":{"version":3,"sources":["/Users/torea/Desktop/freelanceProject2/open-react-template/node_modules/tsparticles-engine/esm/Core/Canvas.js"],"names":["clear","drawParticle","drawParticlePlugin","drawPlugin","paintBase","paintImage","deepExtend","isSsr","getStyleFromHsl","getStyleFromRgb","rangeColorToHsl","rangeColorToRgb","generatedAttribute","setTransformValue","factor","newFactor","key","_a","newValue","undefined","Canvas","constructor","container","size","height","width","_context","_generated","_preDrawUpdaters","_postDrawUpdaters","_resizePlugins","_colorPlugins","_mutationObserver","MutationObserver","records","record","type","attributeName","_repairStyle","_fullScreen","actualOptions","fullScreen","enable","options","trail","particles","move","trailFill","_trailFill","backgroundMask","paint","length","color","_paintBase","opacity","image","_paintImage","draw","ctx","destroy","_b","disconnect","element","remove","_resetOriginalStyle","stop","cb","particle","delta","spawning","destroyed","radius","getRadius","pfColor","getFillColor","psColor","getStrokeColor","fColor","sColor","_getPluginParticleColors","_c","_d","zIndexOptions","zIndex","zOpacityFactor","zIndexFactor","opacityRate","bubble","value","strokeOpacity","zOpacity","zStrokeOpacity","transform","colorStyles","fill","stroke","_applyPreDrawUpdaters","context","composite","sizeRate","shadow","_applyPostDrawUpdaters","plugin","init","resize","_initStyle","_initCover","_initTrail","e","console","error","initBackground","observe","attributes","initUpdaters","initPlugins","background","elementStyle","style","backgroundColor","backgroundImage","backgroundPosition","position","backgroundRepeat","repeat","backgroundSize","plugins","push","particleFillColor","particleStrokeColor","updater","updaters","afterDraw","getColorStyles","getTransformValues","beforeDraw","loadCanvas","canvas","dataset","ariaHidden","_originalStyle","offsetHeight","offsetWidth","getContext","retina","cover","_coverColorStyle","pxRatio","pixelRatio","newSize","oldSize","Object","assign","started","resizeFactor","windowResize","needsRefresh","updateActualOptions","setDensity","_applyResizePlugins","refresh","call","updaterTransform","coverRgb","coverColor","r","g","b","a","_setFullScreenStyle","setProperty","fillColor","Promise","resolve","reject","img","document","createElement","addEventListener","evt","src","baseColor","originalStyle","top","left","priority","toString"],"mappings":"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","sourcesContent":["import { clear, drawParticle, drawParticlePlugin, drawPlugin, paintBase, paintImage } from \"../Utils/CanvasUtils\";\nimport { deepExtend, isSsr } from \"../Utils/Utils\";\nimport { getStyleFromHsl, getStyleFromRgb, rangeColorToHsl, rangeColorToRgb } from \"../Utils/ColorUtils\";\nimport { generatedAttribute } from \"./Utils/Constants\";\nfunction setTransformValue(factor, newFactor, key) {\n    var _a;\n    const newValue = newFactor[key];\n    if (newValue !== undefined) {\n        factor[key] = ((_a = factor[key]) !== null && _a !== void 0 ? _a : 1) * newValue;\n    }\n}\nexport class Canvas {\n    constructor(container) {\n        this.container = container;\n        this.size = {\n            height: 0,\n            width: 0,\n        };\n        this._context = null;\n        this._generated = false;\n        this._preDrawUpdaters = [];\n        this._postDrawUpdaters = [];\n        this._resizePlugins = [];\n        this._colorPlugins = [];\n        this._mutationObserver =\n            !isSsr() && typeof MutationObserver !== \"undefined\"\n                ? new MutationObserver((records) => {\n                    for (const record of records) {\n                        if (record.type === \"attributes\" && record.attributeName === \"style\") {\n                            this._repairStyle();\n                        }\n                    }\n                })\n                : undefined;\n    }\n    get _fullScreen() {\n        return this.container.actualOptions.fullScreen.enable;\n    }\n    clear() {\n        const options = this.container.actualOptions, trail = options.particles.move.trail, trailFill = this._trailFill;\n        if (options.backgroundMask.enable) {\n            this.paint();\n        }\n        else if (trail.enable && trail.length > 0 && trailFill) {\n            if (trailFill.color) {\n                this._paintBase(getStyleFromRgb(trailFill.color, trailFill.opacity));\n            }\n            else if (trailFill.image) {\n                this._paintImage(trailFill.image, trailFill.opacity);\n            }\n        }\n        else {\n            this.draw((ctx) => {\n                clear(ctx, this.size);\n            });\n        }\n    }\n    destroy() {\n        var _a, _b;\n        (_a = this._mutationObserver) === null || _a === void 0 ? void 0 : _a.disconnect();\n        if (this._generated) {\n            (_b = this.element) === null || _b === void 0 ? void 0 : _b.remove();\n        }\n        else {\n            this._resetOriginalStyle();\n        }\n        this.stop();\n        this._preDrawUpdaters = [];\n        this._postDrawUpdaters = [];\n        this._resizePlugins = [];\n        this._colorPlugins = [];\n    }\n    draw(cb) {\n        if (!this._context) {\n            return;\n        }\n        return cb(this._context);\n    }\n    drawParticle(particle, delta) {\n        var _a;\n        if (particle.spawning || particle.destroyed) {\n            return;\n        }\n        const radius = particle.getRadius();\n        if (radius <= 0) {\n            return;\n        }\n        const pfColor = particle.getFillColor(), psColor = (_a = particle.getStrokeColor()) !== null && _a !== void 0 ? _a : pfColor;\n        let [fColor, sColor] = this._getPluginParticleColors(particle);\n        if (!fColor) {\n            fColor = pfColor;\n        }\n        if (!sColor) {\n            sColor = psColor;\n        }\n        if (!fColor && !sColor) {\n            return;\n        }\n        this.draw((ctx) => {\n            var _a, _b, _c, _d;\n            const options = this.container.actualOptions, zIndexOptions = particle.options.zIndex, zOpacityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.opacityRate, opacity = (_c = (_a = particle.bubble.opacity) !== null && _a !== void 0 ? _a : (_b = particle.opacity) === null || _b === void 0 ? void 0 : _b.value) !== null && _c !== void 0 ? _c : 1, strokeOpacity = (_d = particle.strokeOpacity) !== null && _d !== void 0 ? _d : opacity, zOpacity = opacity * zOpacityFactor, zStrokeOpacity = strokeOpacity * zOpacityFactor, transform = {}, colorStyles = {\n                fill: fColor ? getStyleFromHsl(fColor, zOpacity) : undefined,\n            };\n            colorStyles.stroke = sColor ? getStyleFromHsl(sColor, zStrokeOpacity) : colorStyles.fill;\n            this._applyPreDrawUpdaters(ctx, particle, radius, zOpacity, colorStyles, transform);\n            drawParticle({\n                container: this.container,\n                context: ctx,\n                particle,\n                delta,\n                colorStyles,\n                backgroundMask: options.backgroundMask.enable,\n                composite: options.backgroundMask.composite,\n                radius: radius * (1 - particle.zIndexFactor) ** zIndexOptions.sizeRate,\n                opacity: zOpacity,\n                shadow: particle.options.shadow,\n                transform,\n            });\n            this._applyPostDrawUpdaters(particle);\n        });\n    }\n    drawParticlePlugin(plugin, particle, delta) {\n        this.draw((ctx) => {\n            drawParticlePlugin(ctx, plugin, particle, delta);\n        });\n    }\n    drawPlugin(plugin, delta) {\n        this.draw((ctx) => {\n            drawPlugin(ctx, plugin, delta);\n        });\n    }\n    async init() {\n        var _a;\n        this.resize();\n        this._initStyle();\n        this._initCover();\n        try {\n            await this._initTrail();\n        }\n        catch (e) {\n            console.error(e);\n        }\n        this.initBackground();\n        if (this.element) {\n            (_a = this._mutationObserver) === null || _a === void 0 ? void 0 : _a.observe(this.element, { attributes: true });\n        }\n        this.initUpdaters();\n        this.initPlugins();\n        this.paint();\n    }\n    initBackground() {\n        const options = this.container.actualOptions, background = options.background, element = this.element, elementStyle = element === null || element === void 0 ? void 0 : element.style;\n        if (!elementStyle) {\n            return;\n        }\n        if (background.color) {\n            const color = rangeColorToRgb(background.color);\n            elementStyle.backgroundColor = color ? getStyleFromRgb(color, background.opacity) : \"\";\n        }\n        else {\n            elementStyle.backgroundColor = \"\";\n        }\n        elementStyle.backgroundImage = background.image || \"\";\n        elementStyle.backgroundPosition = background.position || \"\";\n        elementStyle.backgroundRepeat = background.repeat || \"\";\n        elementStyle.backgroundSize = background.size || \"\";\n    }\n    initPlugins() {\n        this._resizePlugins = [];\n        for (const [, plugin] of this.container.plugins) {\n            if (plugin.resize) {\n                this._resizePlugins.push(plugin);\n            }\n            if (plugin.particleFillColor || plugin.particleStrokeColor) {\n                this._colorPlugins.push(plugin);\n            }\n        }\n    }\n    initUpdaters() {\n        this._preDrawUpdaters = [];\n        this._postDrawUpdaters = [];\n        for (const updater of this.container.particles.updaters) {\n            if (updater.afterDraw) {\n                this._postDrawUpdaters.push(updater);\n            }\n            if (updater.getColorStyles || updater.getTransformValues || updater.beforeDraw) {\n                this._preDrawUpdaters.push(updater);\n            }\n        }\n    }\n    loadCanvas(canvas) {\n        var _a, _b;\n        if (this._generated) {\n            (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n        }\n        this._generated =\n            canvas.dataset && generatedAttribute in canvas.dataset\n                ? canvas.dataset[generatedAttribute] === \"true\"\n                : this._generated;\n        this.element = canvas;\n        this.element.ariaHidden = \"true\";\n        this._originalStyle = deepExtend({}, this.element.style);\n        this.size.height = canvas.offsetHeight;\n        this.size.width = canvas.offsetWidth;\n        this._context = this.element.getContext(\"2d\");\n        (_b = this._mutationObserver) === null || _b === void 0 ? void 0 : _b.observe(this.element, { attributes: true });\n        this.container.retina.init();\n        this.initBackground();\n    }\n    paint() {\n        const options = this.container.actualOptions;\n        this.draw((ctx) => {\n            if (options.backgroundMask.enable && options.backgroundMask.cover) {\n                clear(ctx, this.size);\n                this._paintBase(this._coverColorStyle);\n            }\n            else {\n                this._paintBase();\n            }\n        });\n    }\n    resize() {\n        if (!this.element) {\n            return;\n        }\n        const container = this.container, pxRatio = container.retina.pixelRatio, size = container.canvas.size, newSize = {\n            width: this.element.offsetWidth * pxRatio,\n            height: this.element.offsetHeight * pxRatio,\n        };\n        if (newSize.height === size.height &&\n            newSize.width === size.width &&\n            newSize.height === this.element.height &&\n            newSize.width === this.element.width) {\n            return;\n        }\n        const oldSize = Object.assign({}, size);\n        this.element.width = size.width = this.element.offsetWidth * pxRatio;\n        this.element.height = size.height = this.element.offsetHeight * pxRatio;\n        if (this.container.started) {\n            this.resizeFactor = {\n                width: size.width / oldSize.width,\n                height: size.height / oldSize.height,\n            };\n        }\n    }\n    stop() {\n        this.draw((ctx) => {\n            clear(ctx, this.size);\n        });\n    }\n    async windowResize() {\n        if (!this.element) {\n            return;\n        }\n        this.resize();\n        const container = this.container, needsRefresh = container.updateActualOptions();\n        container.particles.setDensity();\n        this._applyResizePlugins();\n        if (needsRefresh) {\n            await container.refresh();\n        }\n    }\n    _applyPostDrawUpdaters(particle) {\n        var _a;\n        for (const updater of this._postDrawUpdaters) {\n            (_a = updater.afterDraw) === null || _a === void 0 ? void 0 : _a.call(updater, particle);\n        }\n    }\n    _applyPreDrawUpdaters(ctx, particle, radius, zOpacity, colorStyles, transform) {\n        var _a;\n        for (const updater of this._preDrawUpdaters) {\n            if (updater.getColorStyles) {\n                const { fill, stroke } = updater.getColorStyles(particle, ctx, radius, zOpacity);\n                if (fill) {\n                    colorStyles.fill = fill;\n                }\n                if (stroke) {\n                    colorStyles.stroke = stroke;\n                }\n            }\n            if (updater.getTransformValues) {\n                const updaterTransform = updater.getTransformValues(particle);\n                for (const key in updaterTransform) {\n                    setTransformValue(transform, updaterTransform, key);\n                }\n            }\n            (_a = updater.beforeDraw) === null || _a === void 0 ? void 0 : _a.call(updater, particle);\n        }\n    }\n    _applyResizePlugins() {\n        for (const plugin of this._resizePlugins) {\n            if (plugin.resize) {\n                plugin.resize();\n            }\n        }\n    }\n    _getPluginParticleColors(particle) {\n        let fColor, sColor;\n        for (const plugin of this._colorPlugins) {\n            if (!fColor && plugin.particleFillColor) {\n                fColor = rangeColorToHsl(plugin.particleFillColor(particle));\n            }\n            if (!sColor && plugin.particleStrokeColor) {\n                sColor = rangeColorToHsl(plugin.particleStrokeColor(particle));\n            }\n            if (fColor && sColor) {\n                break;\n            }\n        }\n        return [fColor, sColor];\n    }\n    _initCover() {\n        const options = this.container.actualOptions, cover = options.backgroundMask.cover, color = cover.color, coverRgb = rangeColorToRgb(color);\n        if (coverRgb) {\n            const coverColor = {\n                r: coverRgb.r,\n                g: coverRgb.g,\n                b: coverRgb.b,\n                a: cover.opacity,\n            };\n            this._coverColorStyle = getStyleFromRgb(coverColor, coverColor.a);\n        }\n    }\n    _initStyle() {\n        const element = this.element, options = this.container.actualOptions;\n        if (!element) {\n            return;\n        }\n        if (this._fullScreen) {\n            this._originalStyle = deepExtend({}, element.style);\n            this._setFullScreenStyle();\n        }\n        else {\n            this._resetOriginalStyle();\n        }\n        for (const key in options.style) {\n            if (!key || !options.style) {\n                continue;\n            }\n            const value = options.style[key];\n            if (!value) {\n                continue;\n            }\n            element.style.setProperty(key, value, \"important\");\n        }\n    }\n    async _initTrail() {\n        const options = this.container.actualOptions, trail = options.particles.move.trail, trailFill = trail.fill;\n        if (!trail.enable) {\n            return;\n        }\n        if (trailFill.color) {\n            const fillColor = rangeColorToRgb(trailFill.color);\n            if (!fillColor) {\n                return;\n            }\n            const trail = options.particles.move.trail;\n            this._trailFill = {\n                color: Object.assign({}, fillColor),\n                opacity: 1 / trail.length,\n            };\n        }\n        else {\n            await new Promise((resolve, reject) => {\n                if (!trailFill.image) {\n                    return;\n                }\n                const img = document.createElement(\"img\");\n                img.addEventListener(\"load\", () => {\n                    this._trailFill = {\n                        image: img,\n                        opacity: 1 / trail.length,\n                    };\n                    resolve();\n                });\n                img.addEventListener(\"error\", (evt) => {\n                    reject(evt.error);\n                });\n                img.src = trailFill.image;\n            });\n        }\n    }\n    _paintBase(baseColor) {\n        this.draw((ctx) => {\n            paintBase(ctx, this.size, baseColor);\n        });\n    }\n    _paintImage(image, opacity) {\n        this.draw((ctx) => {\n            paintImage(ctx, this.size, image, opacity);\n        });\n    }\n    _repairStyle() {\n        var _a, _b;\n        const element = this.element;\n        if (!element) {\n            return;\n        }\n        (_a = this._mutationObserver) === null || _a === void 0 ? void 0 : _a.disconnect();\n        this._initStyle();\n        this.initBackground();\n        (_b = this._mutationObserver) === null || _b === void 0 ? void 0 : _b.observe(element, { attributes: true });\n    }\n    _resetOriginalStyle() {\n        const element = this.element, originalStyle = this._originalStyle;\n        if (!(element && originalStyle)) {\n            return;\n        }\n        element.style.position = originalStyle.position;\n        element.style.zIndex = originalStyle.zIndex;\n        element.style.top = originalStyle.top;\n        element.style.left = originalStyle.left;\n        element.style.width = originalStyle.width;\n        element.style.height = originalStyle.height;\n    }\n    _setFullScreenStyle() {\n        const element = this.element;\n        if (!element) {\n            return;\n        }\n        const priority = \"important\";\n        element.style.setProperty(\"position\", \"fixed\", priority);\n        element.style.setProperty(\"z-index\", this.container.actualOptions.fullScreen.zIndex.toString(10), priority);\n        element.style.setProperty(\"top\", \"0\", priority);\n        element.style.setProperty(\"left\", \"0\", priority);\n        element.style.setProperty(\"width\", \"100%\", priority);\n        element.style.setProperty(\"height\", \"100%\", priority);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}