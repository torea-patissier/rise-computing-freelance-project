{"ast":null,"code":"import { Events } from \"./Events/Events\";\nimport { Modes } from \"./Modes/Modes\";\nexport class Interactivity {\n  constructor(engine, container) {\n    this.detectsOn = \"window\";\n    this.events = new Events();\n    this.modes = new Modes(engine, container);\n  }\n\n  get detect_on() {\n    return this.detectsOn;\n  }\n\n  set detect_on(value) {\n    this.detectsOn = value;\n  }\n\n  load(data) {\n    var _a;\n\n    if (!data) {\n      return;\n    }\n\n    const detectsOn = (_a = data.detectsOn) !== null && _a !== void 0 ? _a : data.detect_on;\n\n    if (detectsOn !== undefined) {\n      this.detectsOn = detectsOn;\n    }\n\n    this.events.load(data.events);\n    this.modes.load(data.modes);\n  }\n\n}","map":{"version":3,"sources":["/Users/torea/Desktop/freelanceProject2/rise-consulting/node_modules/tsparticles-engine/esm/Options/Classes/Interactivity/Interactivity.js"],"names":["Events","Modes","Interactivity","constructor","engine","container","detectsOn","events","modes","detect_on","value","load","data","_a","undefined"],"mappings":"AAAA,SAASA,MAAT,QAAuB,iBAAvB;AACA,SAASC,KAAT,QAAsB,eAAtB;AACA,OAAO,MAAMC,aAAN,CAAoB;AACvBC,EAAAA,WAAW,CAACC,MAAD,EAASC,SAAT,EAAoB;AAC3B,SAAKC,SAAL,GAAiB,QAAjB;AACA,SAAKC,MAAL,GAAc,IAAIP,MAAJ,EAAd;AACA,SAAKQ,KAAL,GAAa,IAAIP,KAAJ,CAAUG,MAAV,EAAkBC,SAAlB,CAAb;AACH;;AACD,MAAII,SAAJ,GAAgB;AACZ,WAAO,KAAKH,SAAZ;AACH;;AACD,MAAIG,SAAJ,CAAcC,KAAd,EAAqB;AACjB,SAAKJ,SAAL,GAAiBI,KAAjB;AACH;;AACDC,EAAAA,IAAI,CAACC,IAAD,EAAO;AACP,QAAIC,EAAJ;;AACA,QAAI,CAACD,IAAL,EAAW;AACP;AACH;;AACD,UAAMN,SAAS,GAAG,CAACO,EAAE,GAAGD,IAAI,CAACN,SAAX,MAA0B,IAA1B,IAAkCO,EAAE,KAAK,KAAK,CAA9C,GAAkDA,EAAlD,GAAuDD,IAAI,CAACH,SAA9E;;AACA,QAAIH,SAAS,KAAKQ,SAAlB,EAA6B;AACzB,WAAKR,SAAL,GAAiBA,SAAjB;AACH;;AACD,SAAKC,MAAL,CAAYI,IAAZ,CAAiBC,IAAI,CAACL,MAAtB;AACA,SAAKC,KAAL,CAAWG,IAAX,CAAgBC,IAAI,CAACJ,KAArB;AACH;;AAvBsB","sourcesContent":["import { Events } from \"./Events/Events\";\nimport { Modes } from \"./Modes/Modes\";\nexport class Interactivity {\n    constructor(engine, container) {\n        this.detectsOn = \"window\";\n        this.events = new Events();\n        this.modes = new Modes(engine, container);\n    }\n    get detect_on() {\n        return this.detectsOn;\n    }\n    set detect_on(value) {\n        this.detectsOn = value;\n    }\n    load(data) {\n        var _a;\n        if (!data) {\n            return;\n        }\n        const detectsOn = (_a = data.detectsOn) !== null && _a !== void 0 ? _a : data.detect_on;\n        if (detectsOn !== undefined) {\n            this.detectsOn = detectsOn;\n        }\n        this.events.load(data.events);\n        this.modes.load(data.modes);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}