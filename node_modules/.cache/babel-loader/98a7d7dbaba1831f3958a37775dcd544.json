{"ast":null,"code":"import { Circle, ExternalInteractorBase, Rectangle, clamp, colorMix, divMode, divModeExecute, getDistance, getRangeMax, isDivModeEnabled, isInArray, itemFromSingleOrMultiple, mouseLeaveEvent, mouseMoveEvent, rangeColorToHsl, rgbToHsl } from \"tsparticles-engine\";\nimport { Bubble } from \"./Options/Classes/Bubble\";\n\nfunction calculateBubbleValue(particleValue, modeValue, optionsValue, ratio) {\n  if (modeValue >= optionsValue) {\n    const value = particleValue + (modeValue - optionsValue) * ratio;\n    return clamp(value, particleValue, modeValue);\n  } else if (modeValue < optionsValue) {\n    const value = particleValue - (optionsValue - modeValue) * ratio;\n    return clamp(value, modeValue, particleValue);\n  }\n}\n\nexport class Bubbler extends ExternalInteractorBase {\n  constructor(container) {\n    super(container);\n\n    if (!container.bubble) {\n      container.bubble = {};\n    }\n\n    this.handleClickMode = mode => {\n      if (mode !== \"bubble\") {\n        return;\n      }\n\n      if (!container.bubble) {\n        container.bubble = {};\n      }\n\n      container.bubble.clicking = true;\n    };\n  }\n\n  clear(particle, delta, force) {\n    if (particle.bubble.inRange && !force) {\n      return;\n    }\n\n    delete particle.bubble.div;\n    delete particle.bubble.opacity;\n    delete particle.bubble.radius;\n    delete particle.bubble.color;\n  }\n\n  init() {\n    const container = this.container,\n          bubble = container.actualOptions.interactivity.modes.bubble;\n\n    if (!bubble) {\n      return;\n    }\n\n    container.retina.bubbleModeDistance = bubble.distance * container.retina.pixelRatio;\n\n    if (bubble.size !== undefined) {\n      container.retina.bubbleModeSize = bubble.size * container.retina.pixelRatio;\n    }\n  }\n\n  async interact(delta) {\n    const options = this.container.actualOptions,\n          events = options.interactivity.events,\n          onHover = events.onHover,\n          onClick = events.onClick,\n          hoverEnabled = onHover.enable,\n          hoverMode = onHover.mode,\n          clickEnabled = onClick.enable,\n          clickMode = onClick.mode,\n          divs = events.onDiv;\n\n    if (hoverEnabled && isInArray(\"bubble\", hoverMode)) {\n      this.hoverBubble(delta);\n    } else if (clickEnabled && isInArray(\"bubble\", clickMode)) {\n      this.clickBubble(delta);\n    } else {\n      divModeExecute(\"bubble\", divs, (selector, div) => this.singleSelectorHover(delta, selector, div));\n    }\n  }\n\n  isEnabled(particle) {\n    var _a;\n\n    const container = this.container,\n          options = container.actualOptions,\n          mouse = container.interactivity.mouse,\n          events = ((_a = particle === null || particle === void 0 ? void 0 : particle.interactivity) !== null && _a !== void 0 ? _a : options.interactivity).events,\n          divs = events.onDiv,\n          divBubble = isDivModeEnabled(\"bubble\", divs);\n\n    if (!(divBubble || events.onHover.enable && mouse.position || events.onClick.enable && mouse.clickPosition)) {\n      return false;\n    }\n\n    const hoverMode = events.onHover.mode;\n    const clickMode = events.onClick.mode;\n    return isInArray(\"bubble\", hoverMode) || isInArray(\"bubble\", clickMode) || divBubble;\n  }\n\n  loadModeOptions(options, ...sources) {\n    if (!options.bubble) {\n      options.bubble = new Bubble();\n    }\n\n    for (const source of sources) {\n      options.bubble.load(source === null || source === void 0 ? void 0 : source.bubble);\n    }\n  }\n\n  reset(particle) {\n    particle.bubble.inRange = false;\n  }\n\n  clickBubble(delta) {\n    var _a, _b;\n\n    const container = this.container,\n          options = container.actualOptions,\n          mouseClickPos = container.interactivity.mouse.clickPosition,\n          bubble = options.interactivity.modes.bubble;\n\n    if (!bubble || !mouseClickPos) {\n      return;\n    }\n\n    if (!container.bubble) {\n      container.bubble = {};\n    }\n\n    const distance = container.retina.bubbleModeDistance;\n\n    if (!distance || distance < 0) {\n      return;\n    }\n\n    const query = container.particles.quadTree.queryCircle(mouseClickPos, distance, p => this.isEnabled(p));\n\n    for (const particle of query) {\n      if (!container.bubble.clicking) {\n        continue;\n      }\n\n      particle.bubble.inRange = !container.bubble.durationEnd;\n      const pos = particle.getPosition(),\n            distMouse = getDistance(pos, mouseClickPos),\n            timeSpent = (new Date().getTime() - (container.interactivity.mouse.clickTime || 0)) / 1000;\n\n      if (timeSpent > bubble.duration) {\n        container.bubble.durationEnd = true;\n      }\n\n      if (timeSpent > bubble.duration * 2) {\n        container.bubble.clicking = false;\n        container.bubble.durationEnd = false;\n      }\n\n      const sizeData = {\n        bubbleObj: {\n          optValue: container.retina.bubbleModeSize,\n          value: particle.bubble.radius\n        },\n        particlesObj: {\n          optValue: getRangeMax(particle.options.size.value) * container.retina.pixelRatio,\n          value: particle.size.value\n        },\n        type: \"size\"\n      };\n      this.process(particle, distMouse, timeSpent, sizeData);\n      const opacityData = {\n        bubbleObj: {\n          optValue: bubble.opacity,\n          value: particle.bubble.opacity\n        },\n        particlesObj: {\n          optValue: getRangeMax(particle.options.opacity.value),\n          value: (_b = (_a = particle.opacity) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : 1\n        },\n        type: \"opacity\"\n      };\n      this.process(particle, distMouse, timeSpent, opacityData);\n\n      if (!container.bubble.durationEnd) {\n        if (distMouse <= distance) {\n          this.hoverBubbleColor(particle, distMouse);\n        } else {\n          delete particle.bubble.color;\n        }\n      } else {\n        delete particle.bubble.color;\n      }\n    }\n  }\n\n  hoverBubble(delta) {\n    const container = this.container,\n          mousePos = container.interactivity.mouse.position,\n          distance = container.retina.bubbleModeDistance;\n\n    if (!distance || distance < 0 || mousePos === undefined) {\n      return;\n    }\n\n    const query = container.particles.quadTree.queryCircle(mousePos, distance, p => this.isEnabled(p));\n\n    for (const particle of query) {\n      particle.bubble.inRange = true;\n      const pos = particle.getPosition(),\n            pointDistance = getDistance(pos, mousePos),\n            ratio = 1 - pointDistance / distance;\n\n      if (pointDistance <= distance) {\n        if (ratio >= 0 && container.interactivity.status === mouseMoveEvent) {\n          this.hoverBubbleSize(particle, ratio);\n          this.hoverBubbleOpacity(particle, ratio);\n          this.hoverBubbleColor(particle, ratio);\n        }\n      } else {\n        this.reset(particle);\n      }\n\n      if (container.interactivity.status === mouseLeaveEvent) {\n        this.reset(particle);\n      }\n    }\n  }\n\n  hoverBubbleColor(particle, ratio, divBubble) {\n    const options = this.container.actualOptions;\n    const bubbleOptions = divBubble !== null && divBubble !== void 0 ? divBubble : options.interactivity.modes.bubble;\n\n    if (!bubbleOptions) {\n      return;\n    }\n\n    if (!particle.bubble.finalColor) {\n      const modeColor = bubbleOptions.color;\n\n      if (!modeColor) {\n        return;\n      }\n\n      const bubbleColor = itemFromSingleOrMultiple(modeColor);\n      particle.bubble.finalColor = rangeColorToHsl(bubbleColor);\n    }\n\n    if (!particle.bubble.finalColor) {\n      return;\n    }\n\n    if (bubbleOptions.mix) {\n      particle.bubble.color = undefined;\n      const pColor = particle.getFillColor();\n      particle.bubble.color = pColor ? rgbToHsl(colorMix(pColor, particle.bubble.finalColor, 1 - ratio, ratio)) : particle.bubble.finalColor;\n    } else {\n      particle.bubble.color = particle.bubble.finalColor;\n    }\n  }\n\n  hoverBubbleOpacity(particle, ratio, divBubble) {\n    var _a, _b, _c, _d;\n\n    const container = this.container,\n          options = container.actualOptions,\n          modeOpacity = (_a = divBubble === null || divBubble === void 0 ? void 0 : divBubble.opacity) !== null && _a !== void 0 ? _a : (_b = options.interactivity.modes.bubble) === null || _b === void 0 ? void 0 : _b.opacity;\n\n    if (!modeOpacity) {\n      return;\n    }\n\n    const optOpacity = particle.options.opacity.value;\n    const pOpacity = (_d = (_c = particle.opacity) === null || _c === void 0 ? void 0 : _c.value) !== null && _d !== void 0 ? _d : 1;\n    const opacity = calculateBubbleValue(pOpacity, modeOpacity, getRangeMax(optOpacity), ratio);\n\n    if (opacity !== undefined) {\n      particle.bubble.opacity = opacity;\n    }\n  }\n\n  hoverBubbleSize(particle, ratio, divBubble) {\n    const container = this.container,\n          modeSize = (divBubble === null || divBubble === void 0 ? void 0 : divBubble.size) ? divBubble.size * container.retina.pixelRatio : container.retina.bubbleModeSize;\n\n    if (modeSize === undefined) {\n      return;\n    }\n\n    const optSize = getRangeMax(particle.options.size.value) * container.retina.pixelRatio;\n    const pSize = particle.size.value;\n    const size = calculateBubbleValue(pSize, modeSize, optSize, ratio);\n\n    if (size !== undefined) {\n      particle.bubble.radius = size;\n    }\n  }\n\n  process(particle, distMouse, timeSpent, data) {\n    const container = this.container,\n          bubbleParam = data.bubbleObj.optValue,\n          options = container.actualOptions,\n          bubble = options.interactivity.modes.bubble;\n\n    if (!bubble || bubbleParam === undefined) {\n      return;\n    }\n\n    const bubbleDuration = bubble.duration,\n          bubbleDistance = container.retina.bubbleModeDistance,\n          particlesParam = data.particlesObj.optValue,\n          pObjBubble = data.bubbleObj.value,\n          pObj = data.particlesObj.value || 0,\n          type = data.type;\n\n    if (!bubbleDistance || bubbleDistance < 0 || bubbleParam === particlesParam) {\n      return;\n    }\n\n    if (!container.bubble) {\n      container.bubble = {};\n    }\n\n    if (!container.bubble.durationEnd) {\n      if (distMouse <= bubbleDistance) {\n        const obj = pObjBubble !== null && pObjBubble !== void 0 ? pObjBubble : pObj;\n\n        if (obj !== bubbleParam) {\n          const value = pObj - timeSpent * (pObj - bubbleParam) / bubbleDuration;\n\n          if (type === \"size\") {\n            particle.bubble.radius = value;\n          }\n\n          if (type === \"opacity\") {\n            particle.bubble.opacity = value;\n          }\n        }\n      } else {\n        if (type === \"size\") {\n          delete particle.bubble.radius;\n        }\n\n        if (type === \"opacity\") {\n          delete particle.bubble.opacity;\n        }\n      }\n    } else if (pObjBubble) {\n      if (type === \"size\") {\n        delete particle.bubble.radius;\n      }\n\n      if (type === \"opacity\") {\n        delete particle.bubble.opacity;\n      }\n    }\n  }\n\n  singleSelectorHover(delta, selector, div) {\n    const container = this.container,\n          selectors = document.querySelectorAll(selector),\n          bubble = container.actualOptions.interactivity.modes.bubble;\n\n    if (!bubble || !selectors.length) {\n      return;\n    }\n\n    selectors.forEach(item => {\n      const elem = item,\n            pxRatio = container.retina.pixelRatio,\n            pos = {\n        x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n        y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio\n      },\n            repulseRadius = elem.offsetWidth / 2 * pxRatio,\n            area = div.type === \"circle\" ? new Circle(pos.x, pos.y, repulseRadius) : new Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio),\n            query = container.particles.quadTree.query(area, p => this.isEnabled(p));\n\n      for (const particle of query) {\n        if (!area.contains(particle.getPosition())) {\n          continue;\n        }\n\n        particle.bubble.inRange = true;\n        const divs = bubble.divs;\n        const divBubble = divMode(divs, elem);\n\n        if (!particle.bubble.div || particle.bubble.div !== elem) {\n          this.clear(particle, delta, true);\n          particle.bubble.div = elem;\n        }\n\n        this.hoverBubbleSize(particle, 1, divBubble);\n        this.hoverBubbleOpacity(particle, 1, divBubble);\n        this.hoverBubbleColor(particle, 1, divBubble);\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/torea/Desktop/freelanceProject2/open-react-template/node_modules/tsparticles-interaction-external-bubble/esm/Bubbler.js"],"names":["Circle","ExternalInteractorBase","Rectangle","clamp","colorMix","divMode","divModeExecute","getDistance","getRangeMax","isDivModeEnabled","isInArray","itemFromSingleOrMultiple","mouseLeaveEvent","mouseMoveEvent","rangeColorToHsl","rgbToHsl","Bubble","calculateBubbleValue","particleValue","modeValue","optionsValue","ratio","value","Bubbler","constructor","container","bubble","handleClickMode","mode","clicking","clear","particle","delta","force","inRange","div","opacity","radius","color","init","actualOptions","interactivity","modes","retina","bubbleModeDistance","distance","pixelRatio","size","undefined","bubbleModeSize","interact","options","events","onHover","onClick","hoverEnabled","enable","hoverMode","clickEnabled","clickMode","divs","onDiv","hoverBubble","clickBubble","selector","singleSelectorHover","isEnabled","_a","mouse","divBubble","position","clickPosition","loadModeOptions","sources","source","load","reset","_b","mouseClickPos","query","particles","quadTree","queryCircle","p","durationEnd","pos","getPosition","distMouse","timeSpent","Date","getTime","clickTime","duration","sizeData","bubbleObj","optValue","particlesObj","type","process","opacityData","hoverBubbleColor","mousePos","pointDistance","status","hoverBubbleSize","hoverBubbleOpacity","bubbleOptions","finalColor","modeColor","bubbleColor","mix","pColor","getFillColor","_c","_d","modeOpacity","optOpacity","pOpacity","modeSize","optSize","pSize","data","bubbleParam","bubbleDuration","bubbleDistance","particlesParam","pObjBubble","pObj","obj","selectors","document","querySelectorAll","length","forEach","item","elem","pxRatio","x","offsetLeft","offsetWidth","y","offsetTop","offsetHeight","repulseRadius","area","contains"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,sBAAjB,EAAyCC,SAAzC,EAAoDC,KAApD,EAA2DC,QAA3D,EAAqEC,OAArE,EAA8EC,cAA9E,EAA8FC,WAA9F,EAA2GC,WAA3G,EAAwHC,gBAAxH,EAA0IC,SAA1I,EAAqJC,wBAArJ,EAA+KC,eAA/K,EAAgMC,cAAhM,EAAgNC,eAAhN,EAAiOC,QAAjO,QAAkP,oBAAlP;AACA,SAASC,MAAT,QAAuB,0BAAvB;;AACA,SAASC,oBAAT,CAA8BC,aAA9B,EAA6CC,SAA7C,EAAwDC,YAAxD,EAAsEC,KAAtE,EAA6E;AACzE,MAAIF,SAAS,IAAIC,YAAjB,EAA+B;AAC3B,UAAME,KAAK,GAAGJ,aAAa,GAAG,CAACC,SAAS,GAAGC,YAAb,IAA6BC,KAA3D;AACA,WAAOlB,KAAK,CAACmB,KAAD,EAAQJ,aAAR,EAAuBC,SAAvB,CAAZ;AACH,GAHD,MAIK,IAAIA,SAAS,GAAGC,YAAhB,EAA8B;AAC/B,UAAME,KAAK,GAAGJ,aAAa,GAAG,CAACE,YAAY,GAAGD,SAAhB,IAA6BE,KAA3D;AACA,WAAOlB,KAAK,CAACmB,KAAD,EAAQH,SAAR,EAAmBD,aAAnB,CAAZ;AACH;AACJ;;AACD,OAAO,MAAMK,OAAN,SAAsBtB,sBAAtB,CAA6C;AAChDuB,EAAAA,WAAW,CAACC,SAAD,EAAY;AACnB,UAAMA,SAAN;;AACA,QAAI,CAACA,SAAS,CAACC,MAAf,EAAuB;AACnBD,MAAAA,SAAS,CAACC,MAAV,GAAmB,EAAnB;AACH;;AACD,SAAKC,eAAL,GAAwBC,IAAD,IAAU;AAC7B,UAAIA,IAAI,KAAK,QAAb,EAAuB;AACnB;AACH;;AACD,UAAI,CAACH,SAAS,CAACC,MAAf,EAAuB;AACnBD,QAAAA,SAAS,CAACC,MAAV,GAAmB,EAAnB;AACH;;AACDD,MAAAA,SAAS,CAACC,MAAV,CAAiBG,QAAjB,GAA4B,IAA5B;AACH,KARD;AASH;;AACDC,EAAAA,KAAK,CAACC,QAAD,EAAWC,KAAX,EAAkBC,KAAlB,EAAyB;AAC1B,QAAIF,QAAQ,CAACL,MAAT,CAAgBQ,OAAhB,IAA2B,CAACD,KAAhC,EAAuC;AACnC;AACH;;AACD,WAAOF,QAAQ,CAACL,MAAT,CAAgBS,GAAvB;AACA,WAAOJ,QAAQ,CAACL,MAAT,CAAgBU,OAAvB;AACA,WAAOL,QAAQ,CAACL,MAAT,CAAgBW,MAAvB;AACA,WAAON,QAAQ,CAACL,MAAT,CAAgBY,KAAvB;AACH;;AACDC,EAAAA,IAAI,GAAG;AACH,UAAMd,SAAS,GAAG,KAAKA,SAAvB;AAAA,UAAkCC,MAAM,GAAGD,SAAS,CAACe,aAAV,CAAwBC,aAAxB,CAAsCC,KAAtC,CAA4ChB,MAAvF;;AACA,QAAI,CAACA,MAAL,EAAa;AACT;AACH;;AACDD,IAAAA,SAAS,CAACkB,MAAV,CAAiBC,kBAAjB,GAAsClB,MAAM,CAACmB,QAAP,GAAkBpB,SAAS,CAACkB,MAAV,CAAiBG,UAAzE;;AACA,QAAIpB,MAAM,CAACqB,IAAP,KAAgBC,SAApB,EAA+B;AAC3BvB,MAAAA,SAAS,CAACkB,MAAV,CAAiBM,cAAjB,GAAkCvB,MAAM,CAACqB,IAAP,GAActB,SAAS,CAACkB,MAAV,CAAiBG,UAAjE;AACH;AACJ;;AACD,QAAMI,QAAN,CAAelB,KAAf,EAAsB;AAClB,UAAMmB,OAAO,GAAG,KAAK1B,SAAL,CAAee,aAA/B;AAAA,UAA8CY,MAAM,GAAGD,OAAO,CAACV,aAAR,CAAsBW,MAA7E;AAAA,UAAqFC,OAAO,GAAGD,MAAM,CAACC,OAAtG;AAAA,UAA+GC,OAAO,GAAGF,MAAM,CAACE,OAAhI;AAAA,UAAyIC,YAAY,GAAGF,OAAO,CAACG,MAAhK;AAAA,UAAwKC,SAAS,GAAGJ,OAAO,CAACzB,IAA5L;AAAA,UAAkM8B,YAAY,GAAGJ,OAAO,CAACE,MAAzN;AAAA,UAAiOG,SAAS,GAAGL,OAAO,CAAC1B,IAArP;AAAA,UAA2PgC,IAAI,GAAGR,MAAM,CAACS,KAAzQ;;AACA,QAAIN,YAAY,IAAI7C,SAAS,CAAC,QAAD,EAAW+C,SAAX,CAA7B,EAAoD;AAChD,WAAKK,WAAL,CAAiB9B,KAAjB;AACH,KAFD,MAGK,IAAI0B,YAAY,IAAIhD,SAAS,CAAC,QAAD,EAAWiD,SAAX,CAA7B,EAAoD;AACrD,WAAKI,WAAL,CAAiB/B,KAAjB;AACH,KAFI,MAGA;AACD1B,MAAAA,cAAc,CAAC,QAAD,EAAWsD,IAAX,EAAiB,CAACI,QAAD,EAAW7B,GAAX,KAAmB,KAAK8B,mBAAL,CAAyBjC,KAAzB,EAAgCgC,QAAhC,EAA0C7B,GAA1C,CAApC,CAAd;AACH;AACJ;;AACD+B,EAAAA,SAAS,CAACnC,QAAD,EAAW;AAChB,QAAIoC,EAAJ;;AACA,UAAM1C,SAAS,GAAG,KAAKA,SAAvB;AAAA,UAAkC0B,OAAO,GAAG1B,SAAS,CAACe,aAAtD;AAAA,UAAqE4B,KAAK,GAAG3C,SAAS,CAACgB,aAAV,CAAwB2B,KAArG;AAAA,UAA4GhB,MAAM,GAAG,CAAC,CAACe,EAAE,GAAGpC,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,KAAK,CAAvC,GAA2C,KAAK,CAAhD,GAAoDA,QAAQ,CAACU,aAAnE,MAAsF,IAAtF,IAA8F0B,EAAE,KAAK,KAAK,CAA1G,GAA8GA,EAA9G,GAAmHhB,OAAO,CAACV,aAA5H,EAA2IW,MAAhQ;AAAA,UAAwQQ,IAAI,GAAGR,MAAM,CAACS,KAAtR;AAAA,UAA6RQ,SAAS,GAAG5D,gBAAgB,CAAC,QAAD,EAAWmD,IAAX,CAAzT;;AACA,QAAI,EAAES,SAAS,IAAKjB,MAAM,CAACC,OAAP,CAAeG,MAAf,IAAyBY,KAAK,CAACE,QAA7C,IAA2DlB,MAAM,CAACE,OAAP,CAAeE,MAAf,IAAyBY,KAAK,CAACG,aAA5F,CAAJ,EAAiH;AAC7G,aAAO,KAAP;AACH;;AACD,UAAMd,SAAS,GAAGL,MAAM,CAACC,OAAP,CAAezB,IAAjC;AACA,UAAM+B,SAAS,GAAGP,MAAM,CAACE,OAAP,CAAe1B,IAAjC;AACA,WAAOlB,SAAS,CAAC,QAAD,EAAW+C,SAAX,CAAT,IAAkC/C,SAAS,CAAC,QAAD,EAAWiD,SAAX,CAA3C,IAAoEU,SAA3E;AACH;;AACDG,EAAAA,eAAe,CAACrB,OAAD,EAAU,GAAGsB,OAAb,EAAsB;AACjC,QAAI,CAACtB,OAAO,CAACzB,MAAb,EAAqB;AACjByB,MAAAA,OAAO,CAACzB,MAAR,GAAiB,IAAIV,MAAJ,EAAjB;AACH;;AACD,SAAK,MAAM0D,MAAX,IAAqBD,OAArB,EAA8B;AAC1BtB,MAAAA,OAAO,CAACzB,MAAR,CAAeiD,IAAf,CAAoBD,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,GAAuC,KAAK,CAA5C,GAAgDA,MAAM,CAAChD,MAA3E;AACH;AACJ;;AACDkD,EAAAA,KAAK,CAAC7C,QAAD,EAAW;AACZA,IAAAA,QAAQ,CAACL,MAAT,CAAgBQ,OAAhB,GAA0B,KAA1B;AACH;;AACD6B,EAAAA,WAAW,CAAC/B,KAAD,EAAQ;AACf,QAAImC,EAAJ,EAAQU,EAAR;;AACA,UAAMpD,SAAS,GAAG,KAAKA,SAAvB;AAAA,UAAkC0B,OAAO,GAAG1B,SAAS,CAACe,aAAtD;AAAA,UAAqEsC,aAAa,GAAGrD,SAAS,CAACgB,aAAV,CAAwB2B,KAAxB,CAA8BG,aAAnH;AAAA,UAAkI7C,MAAM,GAAGyB,OAAO,CAACV,aAAR,CAAsBC,KAAtB,CAA4BhB,MAAvK;;AACA,QAAI,CAACA,MAAD,IAAW,CAACoD,aAAhB,EAA+B;AAC3B;AACH;;AACD,QAAI,CAACrD,SAAS,CAACC,MAAf,EAAuB;AACnBD,MAAAA,SAAS,CAACC,MAAV,GAAmB,EAAnB;AACH;;AACD,UAAMmB,QAAQ,GAAGpB,SAAS,CAACkB,MAAV,CAAiBC,kBAAlC;;AACA,QAAI,CAACC,QAAD,IAAaA,QAAQ,GAAG,CAA5B,EAA+B;AAC3B;AACH;;AACD,UAAMkC,KAAK,GAAGtD,SAAS,CAACuD,SAAV,CAAoBC,QAApB,CAA6BC,WAA7B,CAAyCJ,aAAzC,EAAwDjC,QAAxD,EAAmEsC,CAAD,IAAO,KAAKjB,SAAL,CAAeiB,CAAf,CAAzE,CAAd;;AACA,SAAK,MAAMpD,QAAX,IAAuBgD,KAAvB,EAA8B;AAC1B,UAAI,CAACtD,SAAS,CAACC,MAAV,CAAiBG,QAAtB,EAAgC;AAC5B;AACH;;AACDE,MAAAA,QAAQ,CAACL,MAAT,CAAgBQ,OAAhB,GAA0B,CAACT,SAAS,CAACC,MAAV,CAAiB0D,WAA5C;AACA,YAAMC,GAAG,GAAGtD,QAAQ,CAACuD,WAAT,EAAZ;AAAA,YAAoCC,SAAS,GAAGhF,WAAW,CAAC8E,GAAD,EAAMP,aAAN,CAA3D;AAAA,YAAiFU,SAAS,GAAG,CAAC,IAAIC,IAAJ,GAAWC,OAAX,MAAwBjE,SAAS,CAACgB,aAAV,CAAwB2B,KAAxB,CAA8BuB,SAA9B,IAA2C,CAAnE,CAAD,IAA0E,IAAvK;;AACA,UAAIH,SAAS,GAAG9D,MAAM,CAACkE,QAAvB,EAAiC;AAC7BnE,QAAAA,SAAS,CAACC,MAAV,CAAiB0D,WAAjB,GAA+B,IAA/B;AACH;;AACD,UAAII,SAAS,GAAG9D,MAAM,CAACkE,QAAP,GAAkB,CAAlC,EAAqC;AACjCnE,QAAAA,SAAS,CAACC,MAAV,CAAiBG,QAAjB,GAA4B,KAA5B;AACAJ,QAAAA,SAAS,CAACC,MAAV,CAAiB0D,WAAjB,GAA+B,KAA/B;AACH;;AACD,YAAMS,QAAQ,GAAG;AACbC,QAAAA,SAAS,EAAE;AACPC,UAAAA,QAAQ,EAAEtE,SAAS,CAACkB,MAAV,CAAiBM,cADpB;AAEP3B,UAAAA,KAAK,EAAES,QAAQ,CAACL,MAAT,CAAgBW;AAFhB,SADE;AAKb2D,QAAAA,YAAY,EAAE;AACVD,UAAAA,QAAQ,EAAEvF,WAAW,CAACuB,QAAQ,CAACoB,OAAT,CAAiBJ,IAAjB,CAAsBzB,KAAvB,CAAX,GAA2CG,SAAS,CAACkB,MAAV,CAAiBG,UAD5D;AAEVxB,UAAAA,KAAK,EAAES,QAAQ,CAACgB,IAAT,CAAczB;AAFX,SALD;AASb2E,QAAAA,IAAI,EAAE;AATO,OAAjB;AAWA,WAAKC,OAAL,CAAanE,QAAb,EAAuBwD,SAAvB,EAAkCC,SAAlC,EAA6CK,QAA7C;AACA,YAAMM,WAAW,GAAG;AAChBL,QAAAA,SAAS,EAAE;AACPC,UAAAA,QAAQ,EAAErE,MAAM,CAACU,OADV;AAEPd,UAAAA,KAAK,EAAES,QAAQ,CAACL,MAAT,CAAgBU;AAFhB,SADK;AAKhB4D,QAAAA,YAAY,EAAE;AACVD,UAAAA,QAAQ,EAAEvF,WAAW,CAACuB,QAAQ,CAACoB,OAAT,CAAiBf,OAAjB,CAAyBd,KAA1B,CADX;AAEVA,UAAAA,KAAK,EAAE,CAACuD,EAAE,GAAG,CAACV,EAAE,GAAGpC,QAAQ,CAACK,OAAf,MAA4B,IAA5B,IAAoC+B,EAAE,KAAK,KAAK,CAAhD,GAAoD,KAAK,CAAzD,GAA6DA,EAAE,CAAC7C,KAAtE,MAAiF,IAAjF,IAAyFuD,EAAE,KAAK,KAAK,CAArG,GAAyGA,EAAzG,GAA8G;AAF3G,SALE;AAShBoB,QAAAA,IAAI,EAAE;AATU,OAApB;AAWA,WAAKC,OAAL,CAAanE,QAAb,EAAuBwD,SAAvB,EAAkCC,SAAlC,EAA6CW,WAA7C;;AACA,UAAI,CAAC1E,SAAS,CAACC,MAAV,CAAiB0D,WAAtB,EAAmC;AAC/B,YAAIG,SAAS,IAAI1C,QAAjB,EAA2B;AACvB,eAAKuD,gBAAL,CAAsBrE,QAAtB,EAAgCwD,SAAhC;AACH,SAFD,MAGK;AACD,iBAAOxD,QAAQ,CAACL,MAAT,CAAgBY,KAAvB;AACH;AACJ,OAPD,MAQK;AACD,eAAOP,QAAQ,CAACL,MAAT,CAAgBY,KAAvB;AACH;AACJ;AACJ;;AACDwB,EAAAA,WAAW,CAAC9B,KAAD,EAAQ;AACf,UAAMP,SAAS,GAAG,KAAKA,SAAvB;AAAA,UAAkC4E,QAAQ,GAAG5E,SAAS,CAACgB,aAAV,CAAwB2B,KAAxB,CAA8BE,QAA3E;AAAA,UAAqFzB,QAAQ,GAAGpB,SAAS,CAACkB,MAAV,CAAiBC,kBAAjH;;AACA,QAAI,CAACC,QAAD,IAAaA,QAAQ,GAAG,CAAxB,IAA6BwD,QAAQ,KAAKrD,SAA9C,EAAyD;AACrD;AACH;;AACD,UAAM+B,KAAK,GAAGtD,SAAS,CAACuD,SAAV,CAAoBC,QAApB,CAA6BC,WAA7B,CAAyCmB,QAAzC,EAAmDxD,QAAnD,EAA8DsC,CAAD,IAAO,KAAKjB,SAAL,CAAeiB,CAAf,CAApE,CAAd;;AACA,SAAK,MAAMpD,QAAX,IAAuBgD,KAAvB,EAA8B;AAC1BhD,MAAAA,QAAQ,CAACL,MAAT,CAAgBQ,OAAhB,GAA0B,IAA1B;AACA,YAAMmD,GAAG,GAAGtD,QAAQ,CAACuD,WAAT,EAAZ;AAAA,YAAoCgB,aAAa,GAAG/F,WAAW,CAAC8E,GAAD,EAAMgB,QAAN,CAA/D;AAAA,YAAgFhF,KAAK,GAAG,IAAIiF,aAAa,GAAGzD,QAA5G;;AACA,UAAIyD,aAAa,IAAIzD,QAArB,EAA+B;AAC3B,YAAIxB,KAAK,IAAI,CAAT,IAAcI,SAAS,CAACgB,aAAV,CAAwB8D,MAAxB,KAAmC1F,cAArD,EAAqE;AACjE,eAAK2F,eAAL,CAAqBzE,QAArB,EAA+BV,KAA/B;AACA,eAAKoF,kBAAL,CAAwB1E,QAAxB,EAAkCV,KAAlC;AACA,eAAK+E,gBAAL,CAAsBrE,QAAtB,EAAgCV,KAAhC;AACH;AACJ,OAND,MAOK;AACD,aAAKuD,KAAL,CAAW7C,QAAX;AACH;;AACD,UAAIN,SAAS,CAACgB,aAAV,CAAwB8D,MAAxB,KAAmC3F,eAAvC,EAAwD;AACpD,aAAKgE,KAAL,CAAW7C,QAAX;AACH;AACJ;AACJ;;AACDqE,EAAAA,gBAAgB,CAACrE,QAAD,EAAWV,KAAX,EAAkBgD,SAAlB,EAA6B;AACzC,UAAMlB,OAAO,GAAG,KAAK1B,SAAL,CAAee,aAA/B;AACA,UAAMkE,aAAa,GAAGrC,SAAS,KAAK,IAAd,IAAsBA,SAAS,KAAK,KAAK,CAAzC,GAA6CA,SAA7C,GAAyDlB,OAAO,CAACV,aAAR,CAAsBC,KAAtB,CAA4BhB,MAA3G;;AACA,QAAI,CAACgF,aAAL,EAAoB;AAChB;AACH;;AACD,QAAI,CAAC3E,QAAQ,CAACL,MAAT,CAAgBiF,UAArB,EAAiC;AAC7B,YAAMC,SAAS,GAAGF,aAAa,CAACpE,KAAhC;;AACA,UAAI,CAACsE,SAAL,EAAgB;AACZ;AACH;;AACD,YAAMC,WAAW,GAAGlG,wBAAwB,CAACiG,SAAD,CAA5C;AACA7E,MAAAA,QAAQ,CAACL,MAAT,CAAgBiF,UAAhB,GAA6B7F,eAAe,CAAC+F,WAAD,CAA5C;AACH;;AACD,QAAI,CAAC9E,QAAQ,CAACL,MAAT,CAAgBiF,UAArB,EAAiC;AAC7B;AACH;;AACD,QAAID,aAAa,CAACI,GAAlB,EAAuB;AACnB/E,MAAAA,QAAQ,CAACL,MAAT,CAAgBY,KAAhB,GAAwBU,SAAxB;AACA,YAAM+D,MAAM,GAAGhF,QAAQ,CAACiF,YAAT,EAAf;AACAjF,MAAAA,QAAQ,CAACL,MAAT,CAAgBY,KAAhB,GAAwByE,MAAM,GACxBhG,QAAQ,CAACX,QAAQ,CAAC2G,MAAD,EAAShF,QAAQ,CAACL,MAAT,CAAgBiF,UAAzB,EAAqC,IAAItF,KAAzC,EAAgDA,KAAhD,CAAT,CADgB,GAExBU,QAAQ,CAACL,MAAT,CAAgBiF,UAFtB;AAGH,KAND,MAOK;AACD5E,MAAAA,QAAQ,CAACL,MAAT,CAAgBY,KAAhB,GAAwBP,QAAQ,CAACL,MAAT,CAAgBiF,UAAxC;AACH;AACJ;;AACDF,EAAAA,kBAAkB,CAAC1E,QAAD,EAAWV,KAAX,EAAkBgD,SAAlB,EAA6B;AAC3C,QAAIF,EAAJ,EAAQU,EAAR,EAAYoC,EAAZ,EAAgBC,EAAhB;;AACA,UAAMzF,SAAS,GAAG,KAAKA,SAAvB;AAAA,UAAkC0B,OAAO,GAAG1B,SAAS,CAACe,aAAtD;AAAA,UAAqE2E,WAAW,GAAG,CAAChD,EAAE,GAAGE,SAAS,KAAK,IAAd,IAAsBA,SAAS,KAAK,KAAK,CAAzC,GAA6C,KAAK,CAAlD,GAAsDA,SAAS,CAACjC,OAAtE,MAAmF,IAAnF,IAA2F+B,EAAE,KAAK,KAAK,CAAvG,GAA2GA,EAA3G,GAAgH,CAACU,EAAE,GAAG1B,OAAO,CAACV,aAAR,CAAsBC,KAAtB,CAA4BhB,MAAlC,MAA8C,IAA9C,IAAsDmD,EAAE,KAAK,KAAK,CAAlE,GAAsE,KAAK,CAA3E,GAA+EA,EAAE,CAACzC,OAArR;;AACA,QAAI,CAAC+E,WAAL,EAAkB;AACd;AACH;;AACD,UAAMC,UAAU,GAAGrF,QAAQ,CAACoB,OAAT,CAAiBf,OAAjB,CAAyBd,KAA5C;AACA,UAAM+F,QAAQ,GAAG,CAACH,EAAE,GAAG,CAACD,EAAE,GAAGlF,QAAQ,CAACK,OAAf,MAA4B,IAA5B,IAAoC6E,EAAE,KAAK,KAAK,CAAhD,GAAoD,KAAK,CAAzD,GAA6DA,EAAE,CAAC3F,KAAtE,MAAiF,IAAjF,IAAyF4F,EAAE,KAAK,KAAK,CAArG,GAAyGA,EAAzG,GAA8G,CAA/H;AACA,UAAM9E,OAAO,GAAGnB,oBAAoB,CAACoG,QAAD,EAAWF,WAAX,EAAwB3G,WAAW,CAAC4G,UAAD,CAAnC,EAAiD/F,KAAjD,CAApC;;AACA,QAAIe,OAAO,KAAKY,SAAhB,EAA2B;AACvBjB,MAAAA,QAAQ,CAACL,MAAT,CAAgBU,OAAhB,GAA0BA,OAA1B;AACH;AACJ;;AACDoE,EAAAA,eAAe,CAACzE,QAAD,EAAWV,KAAX,EAAkBgD,SAAlB,EAA6B;AACxC,UAAM5C,SAAS,GAAG,KAAKA,SAAvB;AAAA,UAAkC6F,QAAQ,GAAG,CAACjD,SAAS,KAAK,IAAd,IAAsBA,SAAS,KAAK,KAAK,CAAzC,GAA6C,KAAK,CAAlD,GAAsDA,SAAS,CAACtB,IAAjE,IAAyEsB,SAAS,CAACtB,IAAV,GAAiBtB,SAAS,CAACkB,MAAV,CAAiBG,UAA3G,GAAwHrB,SAAS,CAACkB,MAAV,CAAiBM,cAAtL;;AACA,QAAIqE,QAAQ,KAAKtE,SAAjB,EAA4B;AACxB;AACH;;AACD,UAAMuE,OAAO,GAAG/G,WAAW,CAACuB,QAAQ,CAACoB,OAAT,CAAiBJ,IAAjB,CAAsBzB,KAAvB,CAAX,GAA2CG,SAAS,CAACkB,MAAV,CAAiBG,UAA5E;AACA,UAAM0E,KAAK,GAAGzF,QAAQ,CAACgB,IAAT,CAAczB,KAA5B;AACA,UAAMyB,IAAI,GAAG9B,oBAAoB,CAACuG,KAAD,EAAQF,QAAR,EAAkBC,OAAlB,EAA2BlG,KAA3B,CAAjC;;AACA,QAAI0B,IAAI,KAAKC,SAAb,EAAwB;AACpBjB,MAAAA,QAAQ,CAACL,MAAT,CAAgBW,MAAhB,GAAyBU,IAAzB;AACH;AACJ;;AACDmD,EAAAA,OAAO,CAACnE,QAAD,EAAWwD,SAAX,EAAsBC,SAAtB,EAAiCiC,IAAjC,EAAuC;AAC1C,UAAMhG,SAAS,GAAG,KAAKA,SAAvB;AAAA,UAAkCiG,WAAW,GAAGD,IAAI,CAAC3B,SAAL,CAAeC,QAA/D;AAAA,UAAyE5C,OAAO,GAAG1B,SAAS,CAACe,aAA7F;AAAA,UAA4Gd,MAAM,GAAGyB,OAAO,CAACV,aAAR,CAAsBC,KAAtB,CAA4BhB,MAAjJ;;AACA,QAAI,CAACA,MAAD,IAAWgG,WAAW,KAAK1E,SAA/B,EAA0C;AACtC;AACH;;AACD,UAAM2E,cAAc,GAAGjG,MAAM,CAACkE,QAA9B;AAAA,UAAwCgC,cAAc,GAAGnG,SAAS,CAACkB,MAAV,CAAiBC,kBAA1E;AAAA,UAA8FiF,cAAc,GAAGJ,IAAI,CAACzB,YAAL,CAAkBD,QAAjI;AAAA,UAA2I+B,UAAU,GAAGL,IAAI,CAAC3B,SAAL,CAAexE,KAAvK;AAAA,UAA8KyG,IAAI,GAAGN,IAAI,CAACzB,YAAL,CAAkB1E,KAAlB,IAA2B,CAAhN;AAAA,UAAmN2E,IAAI,GAAGwB,IAAI,CAACxB,IAA/N;;AACA,QAAI,CAAC2B,cAAD,IAAmBA,cAAc,GAAG,CAApC,IAAyCF,WAAW,KAAKG,cAA7D,EAA6E;AACzE;AACH;;AACD,QAAI,CAACpG,SAAS,CAACC,MAAf,EAAuB;AACnBD,MAAAA,SAAS,CAACC,MAAV,GAAmB,EAAnB;AACH;;AACD,QAAI,CAACD,SAAS,CAACC,MAAV,CAAiB0D,WAAtB,EAAmC;AAC/B,UAAIG,SAAS,IAAIqC,cAAjB,EAAiC;AAC7B,cAAMI,GAAG,GAAGF,UAAU,KAAK,IAAf,IAAuBA,UAAU,KAAK,KAAK,CAA3C,GAA+CA,UAA/C,GAA4DC,IAAxE;;AACA,YAAIC,GAAG,KAAKN,WAAZ,EAAyB;AACrB,gBAAMpG,KAAK,GAAGyG,IAAI,GAAIvC,SAAS,IAAIuC,IAAI,GAAGL,WAAX,CAAV,GAAqCC,cAA1D;;AACA,cAAI1B,IAAI,KAAK,MAAb,EAAqB;AACjBlE,YAAAA,QAAQ,CAACL,MAAT,CAAgBW,MAAhB,GAAyBf,KAAzB;AACH;;AACD,cAAI2E,IAAI,KAAK,SAAb,EAAwB;AACpBlE,YAAAA,QAAQ,CAACL,MAAT,CAAgBU,OAAhB,GAA0Bd,KAA1B;AACH;AACJ;AACJ,OAXD,MAYK;AACD,YAAI2E,IAAI,KAAK,MAAb,EAAqB;AACjB,iBAAOlE,QAAQ,CAACL,MAAT,CAAgBW,MAAvB;AACH;;AACD,YAAI4D,IAAI,KAAK,SAAb,EAAwB;AACpB,iBAAOlE,QAAQ,CAACL,MAAT,CAAgBU,OAAvB;AACH;AACJ;AACJ,KArBD,MAsBK,IAAI0F,UAAJ,EAAgB;AACjB,UAAI7B,IAAI,KAAK,MAAb,EAAqB;AACjB,eAAOlE,QAAQ,CAACL,MAAT,CAAgBW,MAAvB;AACH;;AACD,UAAI4D,IAAI,KAAK,SAAb,EAAwB;AACpB,eAAOlE,QAAQ,CAACL,MAAT,CAAgBU,OAAvB;AACH;AACJ;AACJ;;AACD6B,EAAAA,mBAAmB,CAACjC,KAAD,EAAQgC,QAAR,EAAkB7B,GAAlB,EAAuB;AACtC,UAAMV,SAAS,GAAG,KAAKA,SAAvB;AAAA,UAAkCwG,SAAS,GAAGC,QAAQ,CAACC,gBAAT,CAA0BnE,QAA1B,CAA9C;AAAA,UAAmFtC,MAAM,GAAGD,SAAS,CAACe,aAAV,CAAwBC,aAAxB,CAAsCC,KAAtC,CAA4ChB,MAAxI;;AACA,QAAI,CAACA,MAAD,IAAW,CAACuG,SAAS,CAACG,MAA1B,EAAkC;AAC9B;AACH;;AACDH,IAAAA,SAAS,CAACI,OAAV,CAAmBC,IAAD,IAAU;AACxB,YAAMC,IAAI,GAAGD,IAAb;AAAA,YAAmBE,OAAO,GAAG/G,SAAS,CAACkB,MAAV,CAAiBG,UAA9C;AAAA,YAA0DuC,GAAG,GAAG;AAC5DoD,QAAAA,CAAC,EAAE,CAACF,IAAI,CAACG,UAAL,GAAkBH,IAAI,CAACI,WAAL,GAAmB,CAAtC,IAA2CH,OADc;AAE5DI,QAAAA,CAAC,EAAE,CAACL,IAAI,CAACM,SAAL,GAAiBN,IAAI,CAACO,YAAL,GAAoB,CAAtC,IAA2CN;AAFc,OAAhE;AAAA,YAGGO,aAAa,GAAIR,IAAI,CAACI,WAAL,GAAmB,CAApB,GAAyBH,OAH5C;AAAA,YAGqDQ,IAAI,GAAG7G,GAAG,CAAC8D,IAAJ,KAAa,QAAb,GACtD,IAAIjG,MAAJ,CAAWqF,GAAG,CAACoD,CAAf,EAAkBpD,GAAG,CAACuD,CAAtB,EAAyBG,aAAzB,CADsD,GAEtD,IAAI7I,SAAJ,CAAcqI,IAAI,CAACG,UAAL,GAAkBF,OAAhC,EAAyCD,IAAI,CAACM,SAAL,GAAiBL,OAA1D,EAAmED,IAAI,CAACI,WAAL,GAAmBH,OAAtF,EAA+FD,IAAI,CAACO,YAAL,GAAoBN,OAAnH,CALN;AAAA,YAKmIzD,KAAK,GAAGtD,SAAS,CAACuD,SAAV,CAAoBC,QAApB,CAA6BF,KAA7B,CAAmCiE,IAAnC,EAA0C7D,CAAD,IAAO,KAAKjB,SAAL,CAAeiB,CAAf,CAAhD,CAL3I;;AAMA,WAAK,MAAMpD,QAAX,IAAuBgD,KAAvB,EAA8B;AAC1B,YAAI,CAACiE,IAAI,CAACC,QAAL,CAAclH,QAAQ,CAACuD,WAAT,EAAd,CAAL,EAA4C;AACxC;AACH;;AACDvD,QAAAA,QAAQ,CAACL,MAAT,CAAgBQ,OAAhB,GAA0B,IAA1B;AACA,cAAM0B,IAAI,GAAGlC,MAAM,CAACkC,IAApB;AACA,cAAMS,SAAS,GAAGhE,OAAO,CAACuD,IAAD,EAAO2E,IAAP,CAAzB;;AACA,YAAI,CAACxG,QAAQ,CAACL,MAAT,CAAgBS,GAAjB,IAAwBJ,QAAQ,CAACL,MAAT,CAAgBS,GAAhB,KAAwBoG,IAApD,EAA0D;AACtD,eAAKzG,KAAL,CAAWC,QAAX,EAAqBC,KAArB,EAA4B,IAA5B;AACAD,UAAAA,QAAQ,CAACL,MAAT,CAAgBS,GAAhB,GAAsBoG,IAAtB;AACH;;AACD,aAAK/B,eAAL,CAAqBzE,QAArB,EAA+B,CAA/B,EAAkCsC,SAAlC;AACA,aAAKoC,kBAAL,CAAwB1E,QAAxB,EAAkC,CAAlC,EAAqCsC,SAArC;AACA,aAAK+B,gBAAL,CAAsBrE,QAAtB,EAAgC,CAAhC,EAAmCsC,SAAnC;AACH;AACJ,KAtBD;AAuBH;;AAxR+C","sourcesContent":["import { Circle, ExternalInteractorBase, Rectangle, clamp, colorMix, divMode, divModeExecute, getDistance, getRangeMax, isDivModeEnabled, isInArray, itemFromSingleOrMultiple, mouseLeaveEvent, mouseMoveEvent, rangeColorToHsl, rgbToHsl, } from \"tsparticles-engine\";\nimport { Bubble } from \"./Options/Classes/Bubble\";\nfunction calculateBubbleValue(particleValue, modeValue, optionsValue, ratio) {\n    if (modeValue >= optionsValue) {\n        const value = particleValue + (modeValue - optionsValue) * ratio;\n        return clamp(value, particleValue, modeValue);\n    }\n    else if (modeValue < optionsValue) {\n        const value = particleValue - (optionsValue - modeValue) * ratio;\n        return clamp(value, modeValue, particleValue);\n    }\n}\nexport class Bubbler extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n        if (!container.bubble) {\n            container.bubble = {};\n        }\n        this.handleClickMode = (mode) => {\n            if (mode !== \"bubble\") {\n                return;\n            }\n            if (!container.bubble) {\n                container.bubble = {};\n            }\n            container.bubble.clicking = true;\n        };\n    }\n    clear(particle, delta, force) {\n        if (particle.bubble.inRange && !force) {\n            return;\n        }\n        delete particle.bubble.div;\n        delete particle.bubble.opacity;\n        delete particle.bubble.radius;\n        delete particle.bubble.color;\n    }\n    init() {\n        const container = this.container, bubble = container.actualOptions.interactivity.modes.bubble;\n        if (!bubble) {\n            return;\n        }\n        container.retina.bubbleModeDistance = bubble.distance * container.retina.pixelRatio;\n        if (bubble.size !== undefined) {\n            container.retina.bubbleModeSize = bubble.size * container.retina.pixelRatio;\n        }\n    }\n    async interact(delta) {\n        const options = this.container.actualOptions, events = options.interactivity.events, onHover = events.onHover, onClick = events.onClick, hoverEnabled = onHover.enable, hoverMode = onHover.mode, clickEnabled = onClick.enable, clickMode = onClick.mode, divs = events.onDiv;\n        if (hoverEnabled && isInArray(\"bubble\", hoverMode)) {\n            this.hoverBubble(delta);\n        }\n        else if (clickEnabled && isInArray(\"bubble\", clickMode)) {\n            this.clickBubble(delta);\n        }\n        else {\n            divModeExecute(\"bubble\", divs, (selector, div) => this.singleSelectorHover(delta, selector, div));\n        }\n    }\n    isEnabled(particle) {\n        var _a;\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = ((_a = particle === null || particle === void 0 ? void 0 : particle.interactivity) !== null && _a !== void 0 ? _a : options.interactivity).events, divs = events.onDiv, divBubble = isDivModeEnabled(\"bubble\", divs);\n        if (!(divBubble || (events.onHover.enable && mouse.position) || (events.onClick.enable && mouse.clickPosition))) {\n            return false;\n        }\n        const hoverMode = events.onHover.mode;\n        const clickMode = events.onClick.mode;\n        return isInArray(\"bubble\", hoverMode) || isInArray(\"bubble\", clickMode) || divBubble;\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.bubble) {\n            options.bubble = new Bubble();\n        }\n        for (const source of sources) {\n            options.bubble.load(source === null || source === void 0 ? void 0 : source.bubble);\n        }\n    }\n    reset(particle) {\n        particle.bubble.inRange = false;\n    }\n    clickBubble(delta) {\n        var _a, _b;\n        const container = this.container, options = container.actualOptions, mouseClickPos = container.interactivity.mouse.clickPosition, bubble = options.interactivity.modes.bubble;\n        if (!bubble || !mouseClickPos) {\n            return;\n        }\n        if (!container.bubble) {\n            container.bubble = {};\n        }\n        const distance = container.retina.bubbleModeDistance;\n        if (!distance || distance < 0) {\n            return;\n        }\n        const query = container.particles.quadTree.queryCircle(mouseClickPos, distance, (p) => this.isEnabled(p));\n        for (const particle of query) {\n            if (!container.bubble.clicking) {\n                continue;\n            }\n            particle.bubble.inRange = !container.bubble.durationEnd;\n            const pos = particle.getPosition(), distMouse = getDistance(pos, mouseClickPos), timeSpent = (new Date().getTime() - (container.interactivity.mouse.clickTime || 0)) / 1000;\n            if (timeSpent > bubble.duration) {\n                container.bubble.durationEnd = true;\n            }\n            if (timeSpent > bubble.duration * 2) {\n                container.bubble.clicking = false;\n                container.bubble.durationEnd = false;\n            }\n            const sizeData = {\n                bubbleObj: {\n                    optValue: container.retina.bubbleModeSize,\n                    value: particle.bubble.radius,\n                },\n                particlesObj: {\n                    optValue: getRangeMax(particle.options.size.value) * container.retina.pixelRatio,\n                    value: particle.size.value,\n                },\n                type: \"size\",\n            };\n            this.process(particle, distMouse, timeSpent, sizeData);\n            const opacityData = {\n                bubbleObj: {\n                    optValue: bubble.opacity,\n                    value: particle.bubble.opacity,\n                },\n                particlesObj: {\n                    optValue: getRangeMax(particle.options.opacity.value),\n                    value: (_b = (_a = particle.opacity) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : 1,\n                },\n                type: \"opacity\",\n            };\n            this.process(particle, distMouse, timeSpent, opacityData);\n            if (!container.bubble.durationEnd) {\n                if (distMouse <= distance) {\n                    this.hoverBubbleColor(particle, distMouse);\n                }\n                else {\n                    delete particle.bubble.color;\n                }\n            }\n            else {\n                delete particle.bubble.color;\n            }\n        }\n    }\n    hoverBubble(delta) {\n        const container = this.container, mousePos = container.interactivity.mouse.position, distance = container.retina.bubbleModeDistance;\n        if (!distance || distance < 0 || mousePos === undefined) {\n            return;\n        }\n        const query = container.particles.quadTree.queryCircle(mousePos, distance, (p) => this.isEnabled(p));\n        for (const particle of query) {\n            particle.bubble.inRange = true;\n            const pos = particle.getPosition(), pointDistance = getDistance(pos, mousePos), ratio = 1 - pointDistance / distance;\n            if (pointDistance <= distance) {\n                if (ratio >= 0 && container.interactivity.status === mouseMoveEvent) {\n                    this.hoverBubbleSize(particle, ratio);\n                    this.hoverBubbleOpacity(particle, ratio);\n                    this.hoverBubbleColor(particle, ratio);\n                }\n            }\n            else {\n                this.reset(particle);\n            }\n            if (container.interactivity.status === mouseLeaveEvent) {\n                this.reset(particle);\n            }\n        }\n    }\n    hoverBubbleColor(particle, ratio, divBubble) {\n        const options = this.container.actualOptions;\n        const bubbleOptions = divBubble !== null && divBubble !== void 0 ? divBubble : options.interactivity.modes.bubble;\n        if (!bubbleOptions) {\n            return;\n        }\n        if (!particle.bubble.finalColor) {\n            const modeColor = bubbleOptions.color;\n            if (!modeColor) {\n                return;\n            }\n            const bubbleColor = itemFromSingleOrMultiple(modeColor);\n            particle.bubble.finalColor = rangeColorToHsl(bubbleColor);\n        }\n        if (!particle.bubble.finalColor) {\n            return;\n        }\n        if (bubbleOptions.mix) {\n            particle.bubble.color = undefined;\n            const pColor = particle.getFillColor();\n            particle.bubble.color = pColor\n                ? rgbToHsl(colorMix(pColor, particle.bubble.finalColor, 1 - ratio, ratio))\n                : particle.bubble.finalColor;\n        }\n        else {\n            particle.bubble.color = particle.bubble.finalColor;\n        }\n    }\n    hoverBubbleOpacity(particle, ratio, divBubble) {\n        var _a, _b, _c, _d;\n        const container = this.container, options = container.actualOptions, modeOpacity = (_a = divBubble === null || divBubble === void 0 ? void 0 : divBubble.opacity) !== null && _a !== void 0 ? _a : (_b = options.interactivity.modes.bubble) === null || _b === void 0 ? void 0 : _b.opacity;\n        if (!modeOpacity) {\n            return;\n        }\n        const optOpacity = particle.options.opacity.value;\n        const pOpacity = (_d = (_c = particle.opacity) === null || _c === void 0 ? void 0 : _c.value) !== null && _d !== void 0 ? _d : 1;\n        const opacity = calculateBubbleValue(pOpacity, modeOpacity, getRangeMax(optOpacity), ratio);\n        if (opacity !== undefined) {\n            particle.bubble.opacity = opacity;\n        }\n    }\n    hoverBubbleSize(particle, ratio, divBubble) {\n        const container = this.container, modeSize = (divBubble === null || divBubble === void 0 ? void 0 : divBubble.size) ? divBubble.size * container.retina.pixelRatio : container.retina.bubbleModeSize;\n        if (modeSize === undefined) {\n            return;\n        }\n        const optSize = getRangeMax(particle.options.size.value) * container.retina.pixelRatio;\n        const pSize = particle.size.value;\n        const size = calculateBubbleValue(pSize, modeSize, optSize, ratio);\n        if (size !== undefined) {\n            particle.bubble.radius = size;\n        }\n    }\n    process(particle, distMouse, timeSpent, data) {\n        const container = this.container, bubbleParam = data.bubbleObj.optValue, options = container.actualOptions, bubble = options.interactivity.modes.bubble;\n        if (!bubble || bubbleParam === undefined) {\n            return;\n        }\n        const bubbleDuration = bubble.duration, bubbleDistance = container.retina.bubbleModeDistance, particlesParam = data.particlesObj.optValue, pObjBubble = data.bubbleObj.value, pObj = data.particlesObj.value || 0, type = data.type;\n        if (!bubbleDistance || bubbleDistance < 0 || bubbleParam === particlesParam) {\n            return;\n        }\n        if (!container.bubble) {\n            container.bubble = {};\n        }\n        if (!container.bubble.durationEnd) {\n            if (distMouse <= bubbleDistance) {\n                const obj = pObjBubble !== null && pObjBubble !== void 0 ? pObjBubble : pObj;\n                if (obj !== bubbleParam) {\n                    const value = pObj - (timeSpent * (pObj - bubbleParam)) / bubbleDuration;\n                    if (type === \"size\") {\n                        particle.bubble.radius = value;\n                    }\n                    if (type === \"opacity\") {\n                        particle.bubble.opacity = value;\n                    }\n                }\n            }\n            else {\n                if (type === \"size\") {\n                    delete particle.bubble.radius;\n                }\n                if (type === \"opacity\") {\n                    delete particle.bubble.opacity;\n                }\n            }\n        }\n        else if (pObjBubble) {\n            if (type === \"size\") {\n                delete particle.bubble.radius;\n            }\n            if (type === \"opacity\") {\n                delete particle.bubble.opacity;\n            }\n        }\n    }\n    singleSelectorHover(delta, selector, div) {\n        const container = this.container, selectors = document.querySelectorAll(selector), bubble = container.actualOptions.interactivity.modes.bubble;\n        if (!bubble || !selectors.length) {\n            return;\n        }\n        selectors.forEach((item) => {\n            const elem = item, pxRatio = container.retina.pixelRatio, pos = {\n                x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n                y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio,\n            }, repulseRadius = (elem.offsetWidth / 2) * pxRatio, area = div.type === \"circle\"\n                ? new Circle(pos.x, pos.y, repulseRadius)\n                : new Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio), query = container.particles.quadTree.query(area, (p) => this.isEnabled(p));\n            for (const particle of query) {\n                if (!area.contains(particle.getPosition())) {\n                    continue;\n                }\n                particle.bubble.inRange = true;\n                const divs = bubble.divs;\n                const divBubble = divMode(divs, elem);\n                if (!particle.bubble.div || particle.bubble.div !== elem) {\n                    this.clear(particle, delta, true);\n                    particle.bubble.div = elem;\n                }\n                this.hoverBubbleSize(particle, 1, divBubble);\n                this.hoverBubbleOpacity(particle, 1, divBubble);\n                this.hoverBubbleColor(particle, 1, divBubble);\n            }\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}